"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@babel/core");
const utils_1 = require("./utils");
const get_function_declaration_props_1 = require("./get-function-declaration-props");
const get_variable_declaration_props_1 = require("./get-variable-declaration-props");
const get_props_form_path_1 = require("./get-props-form-path");
function default_1() {
    return {
        manipulateOptions: (_opts, parserOpts) => {
            parserOpts.plugins.push('jsx');
        },
        name: 'react defaultprops',
        visitor: {
            Program: {
                enter: (path) => {
                    path.traverse({
                        FunctionDeclaration(path) {
                            const propInfo = get_function_declaration_props_1.getFunctionDeclarationProps(path);
                            if (!propInfo)
                                return;
                            utils_1.setDefaultProps(path, propInfo.componentName, propInfo.props);
                        },
                        VariableDeclaration(path) {
                            const declarationNode = path.node.declarations[0];
                            const init = declarationNode.init;
                            if (core_1.types.isCallExpression(init) &&
                                core_1.types.isIdentifier(init.callee) &&
                                init.callee.name === 'getDefaultProps' &&
                                utils_1.isImported(path, 'getDefaultProps')) {
                                const componentPath = utils_1.getComponentRecursively(path);
                                const propInfo = get_props_form_path_1.getPropsFormPath(componentPath, false);
                                path.replaceWith(core_1.types.variableDeclaration(path.node.kind, [
                                    core_1.types.variableDeclarator(declarationNode.id, propInfo ? propInfo.props : core_1.types.nullLiteral()),
                                ]));
                                return;
                            }
                            const propInfo = get_variable_declaration_props_1.getVariableDeclarationProps(path);
                            if (!propInfo)
                                return;
                            utils_1.setDefaultProps(path, propInfo.componentName, propInfo.props);
                        },
                    });
                },
            },
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=plugin.js.map