"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFunctionNode = void 0;
const core_1 = require("@babel/core");
exports.getFunctionNode = (node) => {
    if (core_1.types.isTaggedTemplateExpression(node)) {
        if (!node.quasi || !node.quasi.expressions.length) {
            if (core_1.types.isCallExpression(node.tag) && node.tag.arguments.length) {
                const func = node.tag.arguments[0];
                return func;
            }
            return;
        }
        const expNode = node.quasi.expressions[0];
        return expNode;
    }
    if (core_1.types.isArrowFunctionExpression(node)) {
        return node;
    }
    if (core_1.types.isIdentifier(node.callee)) {
        if (node.callee.name === 'forwardRef' || node.callee.name === 'memo') {
            const func = node.arguments[0];
            if (core_1.types.isArrowFunctionExpression(func)) {
                return func;
            }
            else if (core_1.types.isCallExpression(func)) {
                return exports.getFunctionNode(func);
            }
        }
    }
    if (core_1.types.isMemberExpression(node.callee) &&
        core_1.types.isIdentifier(node.callee.object) &&
        core_1.types.isIdentifier(node.callee.property)) {
        if (node.callee.property.name === 'forwardRef' ||
            node.callee.property.name === 'memo') {
            const func = node.arguments[0];
            if (core_1.types.isArrowFunctionExpression(func)) {
                return func;
            }
            else if (core_1.types.isCallExpression(func)) {
                return exports.getFunctionNode(func);
            }
        }
    }
    return undefined;
};
//# sourceMappingURL=get-function-node.js.map