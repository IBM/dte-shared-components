/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import DOMPurify from 'isomorphic-dompurify';
import marked from 'marked';
import settings from 'carbon-components/es/globals/js/settings';
var prefix = settings.prefix;
var _htmlTagRegex = /<.*?>/g;
var _cleanStringRegex = /\n|\s{2,}|&([a-zA-Z]+);/g;
/**
 * Removes any html tags from a string and keeps inner text if any
 *
 * @param {string} str String to be checked for html tags
 * @returns {string} String with html tags stripped out
 * @private
 */

var _removeHtmlTags = function _removeHtmlTags(str) {
  return str.replace(_htmlTagRegex, '');
};
/**
 * Cleans string by replacing multiple spaces with a single space
 * and removing single new lines.
 *
 * @param {string} str String to be checked
 * @returns {string} String with multiple spaces and single new lines removed
 * @private
 */


var _cleanString = function _cleanString(str) {
  return str.replace(_cleanStringRegex, ' ');
};
/**
 * Converts markdown syntaxes into html
 *
 * @param {string} str String to convert to html
 * @param {object} [options={}] Object with options for the conversion
 * @param {boolean} [options.allowHtml=false] Defines if should allow or remove html tags
 * @returns {string} String converted to html
 * @example
 * import { markdownToHtml } from '@carbon/ibmdotcom-utilities';
 *
 * markdownToHtml('Lorem *ipsum* dolor __sit__.')
 * // 'Lorem <em class="bx--type-light">ipsum</em> dolor <strong class="bx--type-semibold">sit</strong>.'
 */


function markdownToHtml(str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$allowHtml = _ref.allowHtml,
      allowHtml = _ref$allowHtml === void 0 ? false : _ref$allowHtml;

  var converted = allowHtml ? str : _removeHtmlTags(str);
  /**
   * Custom rendering options to add Carbon styles
   *
   */

  var renderer = {
    link: function link(href, title, text) {
      var linkTitle = title ? "title=\"".concat(title, "\"") : null;
      return "<a class=\"".concat(prefix, "--link\" href=\"").concat(href, "\" ").concat(linkTitle, ">").concat(text, "</a>");
    },
    list: function list(body, ordered) {
      var listType = ordered ? 'ol' : 'ul';
      var listClass = ordered ? "".concat(prefix, "--list--ordered") : "".concat(prefix, "--list--unordered");
      return "<".concat(listType, " class=\"").concat(listClass, "\">").concat(body, "</").concat(listType, ">");
    },
    listitem: function listitem(text) {
      return "<li class=\"".concat(prefix, "--list__item\">").concat(text, "</li>");
    }
  };
  marked.use({
    renderer: renderer
  });
  var convertedMarkdown = DOMPurify.sanitize(marked(converted));
  return _cleanString(convertedMarkdown);
}

export default markdownToHtml;