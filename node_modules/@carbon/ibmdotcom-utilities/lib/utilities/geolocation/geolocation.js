"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _endpoint = process && process.env.GEO_API || 'https://api.www.s81c.com/webmaster/dbip/';
/**
 * Utility to retrieve user's country code based on their IP address
 *
 * @example
 * import { geolocation } from '@carbon/ibmdotcom-utilities';
 *
 * const locationInfo = await geolocation();
 *
 * @returns {string} country cc (cc)
 *
 */


function geolocation() {
  return _geolocation.apply(this, arguments);
}

function _geolocation() {
  _geolocation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var location, cc;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _axios.default.get(_endpoint, {
              headers: {
                'Content-Type': 'application/json; charset=utf-8'
              }
            }).then(function (response) {
              return response.data;
            });

          case 2:
            location = _context.sent;
            cc = location && location.country;
            return _context.abrupt("return", cc);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _geolocation.apply(this, arguments);
}

var _default = geolocation;
exports.default = _default;