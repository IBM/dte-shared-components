"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _on = _interopRequireDefault(require("carbon-components/umd/globals/js/misc/on"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Fires the given event if focus goes out of the given element.
 *
 * @param {Element} element The element to monitor the focus on.
 * @param {Element[]} sentinelNodes
 *   The focus sentinel nodes.
 *   If these nodes gets focus, we see it as focus went out of the `element`.
 * @param {string} [eventRequestFocusWrap=dds-request-focus-wrap] The event name.
 * @returns {Handle} The handle to remove the event handler.
 */
function focuswrap(element, sentinelNodes) {
  var eventRequestFocusWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'dds-request-focus-wrap';
  return (0, _on.default)(element, 'focusout', function handleFocusout(event) {
    var _event$currentTarget$, _event$currentTarget$2;

    var target = event.target,
        relatedTarget = event.relatedTarget;

    var _sentinelNodes = _slicedToArray(sentinelNodes, 2),
        startSentinelNode = _sentinelNodes[0],
        endSentinelNode = _sentinelNodes[1];

    var oldContains = target && target !== this && (event.currentTarget.contains(target) || ((_event$currentTarget$ = event.currentTarget.host) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.contains(target))) && sentinelNodes.indexOf(target) < 0;
    var currentContains = relatedTarget && relatedTarget !== this && (event.currentTarget.contains(relatedTarget) || ((_event$currentTarget$2 = event.currentTarget.host) === null || _event$currentTarget$2 === void 0 ? void 0 : _event$currentTarget$2.contains(relatedTarget))) && sentinelNodes.indexOf(relatedTarget) < 0; // FF fires `focusout` event even if the page itself is losing focus (e.g. upon following outside link).
    // In such case, we do nothing.

    if (oldContains && !currentContains && relatedTarget) {
      var comparisonResult = target.compareDocumentPosition(relatedTarget);

      if (relatedTarget === startSentinelNode) {
        comparisonResult = Node.DOCUMENT_POSITION_PRECEDING;
      }

      if (relatedTarget === endSentinelNode) {
        comparisonResult = Node.DOCUMENT_POSITION_FOLLOWING;
      }

      element.dispatchEvent(new CustomEvent(eventRequestFocusWrap, {
        bubbles: true,
        cancelable: false,
        composed: true,
        detail: {
          comparisonResult: comparisonResult
        }
      }));
    }
  });
}

var _default = focuswrap;
exports.default = _default;