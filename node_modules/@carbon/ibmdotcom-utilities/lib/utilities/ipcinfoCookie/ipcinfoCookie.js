"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsCookie = _interopRequireDefault(require("js-cookie"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Name of cookie needed to grab cc and lc
 *
 * @type {string}
 * @private
 */
var _cookieName = 'ipcInfo';
/**
 * Utility to set and get the ipcInfo cookie needed to determine country and language code
 */

var ipcinfoCookie = /*#__PURE__*/function () {
  function ipcinfoCookie() {
    _classCallCheck(this, ipcinfoCookie);
  }

  _createClass(ipcinfoCookie, null, [{
    key: "get",

    /**
     * retreive the ipcInfo cookie that contains the cc and lc
     * decodes and converts to object
     *
     * @example
     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';
     *
     * const info = ipcinfoCookie.get();
     *
     *
     * @returns {object} object containing cc and lc
     */
    value: function get() {
      var ipcinfo = _jsCookie.default.get(_cookieName);

      if (ipcinfo) {
        var cc;
        var lc;
        var info = decodeURIComponent(ipcinfo).split(';');
        info.map(function (code) {
          var itemParts = code.split('=');
          if (itemParts[0] === 'cc') cc = itemParts[1];
          if (itemParts[0] === 'lc') lc = itemParts[1];
        });
        return {
          cc: cc,
          lc: lc
        };
      }
    }
    /**
     * set the ipcInfo cookie with expiration of a year
     * takes care of converting to string and encoding
     *
     * @param {object} params params object
     * @param {string} params.cc country code
     * @param {string} params.lc language code
     *
     * @example
     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';
     *
     * const locale = {cc: 'us', lc: 'en'}
     * ipcinfoCookie.set(locale);
     *
     */

  }, {
    key: "set",
    value: function set(_ref) {
      var cc = _ref.cc,
          lc = _ref.lc;
      var info = "cc=".concat(cc, ";lc=").concat(lc);

      _jsCookie.default.set(_cookieName, encodeURIComponent(info), {
        expires: 365
      }, {
        secure: true
      });
    }
  }]);

  return ipcinfoCookie;
}();

var _default = ipcinfoCookie;
exports.default = _default;