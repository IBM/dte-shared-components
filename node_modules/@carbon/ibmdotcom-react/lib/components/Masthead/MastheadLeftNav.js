"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _settings = _interopRequireDefault(require("@carbon/ibmdotcom-utilities/lib/utilities/settings/settings"));

var _HeaderSideNavItems = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderSideNavItems"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _SideNav = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNav"));

var _SideNavItems = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNavItems"));

var _SideNavLink = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNavLink"));

var _SideNavMenuItem = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNavMenuItem"));

var _SideNavMenuWithBackForward = _interopRequireDefault(require("../carbon-components-react/UIShell/SideNavMenuWithBackForward"));

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * Masthead left nav component.
 */

var MastheadLeftNav = function MastheadLeftNav(_ref) {
  var backButtonText = _ref.backButtonText,
      navigation = _ref.navigation,
      isSideNavExpanded = _ref.isSideNavExpanded,
      platform = _ref.platform,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["backButtonText", "navigation", "isSideNavExpanded", "platform"]);
  var sideNavRef = (0, _react.useRef)();

  var preventOutFocus = function preventOutFocus() {
    if (isSideNavExpanded && _react.useRef) {
      var _sideNavRef$current;

      (_sideNavRef$current = sideNavRef.current) === null || _sideNavRef$current === void 0 ? void 0 : _sideNavRef$current.parentNode.querySelector(".".concat(prefix, "--header__menu-toggle")).focus();
    }
  };
  /**
   * Left side navigation
   *
   * @returns {*} Left side navigation
   */


  var sideNav = navigation.map(function (link, i) {
    if (link.hasMenu) {
      var autoid = "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0-nav").concat(i);

      if (navigation.length === i + 1) {
        return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_SideNavMenuWithBackForward.default, {
          title: link.title,
          backButtonText: backButtonText,
          key: i,
          autoid: autoid,
          navType: rest.navType
        }, renderNavSections(link.menuSections, backButtonText, autoid, rest.navType)), _react.default.createElement("button", {
          className: "".concat(prefix, "--masthead__focus"),
          onFocus: preventOutFocus,
          "aria-hidden": true
        }));
      }

      return _react.default.createElement(_SideNavMenuWithBackForward.default, {
        title: link.title,
        backButtonText: backButtonText,
        key: i,
        autoid: autoid,
        navType: rest.navType
      }, renderNavSections(link.menuSections, backButtonText, autoid, rest.navType));
    } else {
      if (navigation.length === i + 1) {
        return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_SideNavLink.default, {
          href: link.url,
          "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0-nav").concat(i),
          key: i
        }, link.title), _react.default.createElement("button", {
          className: "".concat(prefix, "--masthead__focus}"),
          onFocus: preventOutFocus,
          "aria-hidden": true,
          href: "#"
        }));
      }

      return _react.default.createElement(_SideNavLink.default, {
        href: link.url,
        "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0-nav").concat(i),
        key: i
      }, link.title);
    }
  });
  return _react.default.createElement(_SideNav.default, {
    "aria-label": "Side navigation",
    expanded: isSideNavExpanded,
    isPersistent: false,
    ref: sideNavRef
  }, _react.default.createElement("nav", {
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0")
  }, platform && _react.default.createElement("a", {
    // eslint-disable-line jsx-a11y/role-supports-aria-props
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0-productname"),
    href: platform.url,
    "aria-haspopup": "true",
    className: "".concat(prefix, "--side-nav__submenu ").concat(prefix, "--side-nav__submenu-platform")
  }, platform.name), _react.default.createElement(_SideNavItems.default, null, _react.default.createElement(_HeaderSideNavItems.default, null, sideNav))));
};
/**
 * Loops through and renders a list of links for the side nav
 *
 * @param {Array} sections A list of link sections to be rendered
 * @param {string} backButtonText back button text
 * @param {string} autoid autoid predecessor
 * @param {string} navType navigation type
 * @returns {object} JSX object
 */


function renderNavSections(sections, backButtonText, autoid, navType) {
  var sectionItems = [];
  sections.forEach(function (section) {
    section.menuItems.forEach(function (item, j) {
      var dataAutoId = "".concat(autoid, "-list").concat(j);

      if (item.megapanelContent) {
        sectionItems.push(_react.default.createElement(_SideNavMenuWithBackForward.default, {
          title: item.title,
          titleUrl: item.url,
          backButtonText: backButtonText,
          autoid: dataAutoId,
          navType: navType,
          key: j
        }, renderNavItem(item.megapanelContent.quickLinks.links, dataAutoId)));
      } else {
        sectionItems.push(_react.default.createElement(_SideNavMenuItem.default, {
          href: item.url,
          "data-autoid": dataAutoId,
          key: item.title
        }, item.title));
      }
    });
  });
  return sectionItems;
}
/**
 * Loops through and renders a list of links for the side nav
 *
 * @param {Array} items A list of links to be rendered
 * @param {string} autoid autoid predecessor
 * @returns {object} JSX object
 */


function renderNavItem(items, autoid) {
  var navItems = [];
  items.forEach(function (item, i) {
    var dataAutoId = "".concat(autoid, "-item").concat(i);
    navItems.push(_react.default.createElement(_SideNavMenuItem.default, {
      href: item.url,
      "data-autoid": dataAutoId,
      key: item.title
    }, item.title));
  });
  return navItems;
}

MastheadLeftNav.propTypes = {
  /**
   * Back button text
   */
  backButtonText: _propTypes.default.string,

  /**
   * Object containing left navigation elements.
   */
  navigation: _propTypes.default.arrayOf(_propTypes.default.shape({
    hasMenu: _propTypes.default.bool,
    title: _propTypes.default.string,
    url: _propTypes.default.string,
    menuSections: _propTypes.default.arrayOf(_propTypes.default.shape({
      menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
        title: _propTypes.default.string,
        url: _propTypes.default.string
      }))
    }))
  })),

  /**
   * `true` to make the sidenav expanded.
   */
  isSideNavExpanded: _propTypes.default.bool,

  /**
   * Platform object with name and url
   */
  platform: _propTypes.default.shape({
    name: _propTypes.default.string,
    url: _propTypes.default.string
  })
};
MastheadLeftNav.defaultProps = {
  backButtonText: 'Back'
};
var _default = MastheadLeftNav;
exports.default = _default;