"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cardPropTypes = exports.Card = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _Tile = require("../../internal/vendor/carbon-components-react/components/Tile/Tile");

var _classnames = _interopRequireDefault(require("classnames"));

var _CTALogic = _interopRequireDefault(require("../CTA/CTALogic"));

var _settings = _interopRequireDefault(require("@carbon/ibmdotcom-utilities/lib/utilities/settings/settings"));

var _Image = require("../Image");

var _markdownToHtml = _interopRequireDefault(require("@carbon/ibmdotcom-utilities/lib/utilities/markdownToHtml/markdownToHtml"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * Card Link Component.
 */

var Card = function Card(_ref) {
  var _classNames;

  var inverse = _ref.inverse,
      image = _ref.image,
      eyebrow = _ref.eyebrow,
      heading = _ref.heading,
      customClassName = _ref.customClassName,
      copy = _ref.copy,
      cta = _ref.cta,
      props = (0, _objectWithoutProperties2.default)(_ref, ["inverse", "image", "eyebrow", "heading", "customClassName", "copy", "cta"]);
  var TileType = props.disabled ? _Tile.Tile : _Tile.ClickableTile;
  return _react.default.createElement(TileType, (0, _extends2.default)({
    "data-autoid": "".concat(stablePrefix, "--card"),
    className: (0, _classnames.default)("".concat(prefix, "--card"), (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--card--inverse"), inverse), (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--card__CTA--disabled"), props.disabled), _classNames), customClassName),
    href: cta === null || cta === void 0 ? void 0 : cta.href,
    target: _CTALogic.default.external(cta === null || cta === void 0 ? void 0 : cta.type),
    onClick: function onClick(e) {
      (cta === null || cta === void 0 ? void 0 : cta.type) === 'jump' ? _CTALogic.default.jump(e, cta.type) : false;
    }
  }, props), image && _react.default.createElement(_Image.Image, (0, _extends2.default)({}, image, {
    classname: "".concat(prefix, "--card__img")
  })), _react.default.createElement("div", {
    className: "".concat(prefix, "--card__wrapper")
  }, eyebrow && _react.default.createElement("p", {
    className: "".concat(prefix, "--card__eyebrow")
  }, eyebrow), heading && _react.default.createElement("h3", {
    className: "".concat(prefix, "--card__heading")
  }, heading), optionalContent(copy), renderFooter(cta)));
};
/**
 * Card Link optional content
 *
 * @param {string} copy paragraph of text
 * @returns {object} JSX object
 */


exports.Card = Card;

function optionalContent(copy) {
  return !copy ? null : _react.default.createElement("div", {
    className: "".concat(prefix, "--card__copy"),
    dangerouslySetInnerHTML: {
      __html: (0, _markdownToHtml.default)(copy, {
        bold: false
      })
    }
  });
}
/**
 * Render footer with icon
 *
 * @param {object} cta cta object
 * @returns {object} JSX object
 */


function renderFooter(cta) {
  var _classNames2, _cta$icon;

  return cta && _react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(prefix, "--card__footer"), (_classNames2 = {}, (0, _defineProperty2.default)(_classNames2, "".concat(prefix, "--card__footer__icon-left"), cta.iconPlacement === 'left'), (0, _defineProperty2.default)(_classNames2, "".concat(prefix, "--card__footer__copy"), cta.copy), _classNames2))
  }, cta.copy && _react.default.createElement("span", {
    className: "".concat(prefix, "--card__cta__copy")
  }, cta.copy), ((_cta$icon = cta.icon) === null || _cta$icon === void 0 ? void 0 : _cta$icon.src) && _react.default.createElement(cta.icon.src, (0, _extends2.default)({
    className: "".concat(prefix, "--card__cta")
  }, cta.icon)));
}

var cardPropTypes = {
  /**
   * Concise yet descriptive string of text describing the linked resource.
   */
  heading: _propTypes.default.string,

  /**
   * Eyebrow text to be passed as a property to the Card component.
   * Style for Card component has been set to "text".
   */
  eyebrow: _propTypes.default.string,

  /**
   * Paragraph of text that further describing the resource with added detail.
   */
  copy: _propTypes.default.string,

  /**
   * Disable card link
   */
  disabled: _propTypes.default.bool,

  /**
   * CTA options. Has the following structure in summary:
   *
   * | Name            | Data Type | Description                                                                                                                      |
   * | --------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------- |
   * | `href`          | String    | Valid URL for a the location of an internal or external resource                                                                 |
   * | `icon`          | String    | Provide an optional icon to the footer from [Carbon's icon library](https://www.carbondesignsystem.com/guidelines/icons/library) |
   * | `iconPlacement` | String    | Option to place icon left or right of cta text                                                                                   |
   * | `copy`          | String    | Optional text for CTA                                                                                                            |
   * | `type`          | String    | type of CTA (local or external) when Card type is static                                                                         |
   *
   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
   */
  cta: _propTypes.default.shape({
    copy: _propTypes.default.string,
    href: _propTypes.default.string,
    type: _propTypes.default.oneOf(['jump', 'local', 'external', 'download']),
    icon: _propTypes.default.shape({
      src: _propTypes.default.elementType
    }),
    iconPlacement: _propTypes.default.oneOf(['left', 'right'])
  }),

  /**
   * Contains source and alt text properties.
   * See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details.
   */
  image: _propTypes.default.shape({
    classname: _propTypes.default.string,
    sources: _propTypes.default.arrayOf(_propTypes.default.shape({
      src: _propTypes.default.string,
      breakpoint: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    })),
    defaultSrc: _propTypes.default.string.isRequired,
    alt: _propTypes.default.string.isRequired,
    longDescription: _propTypes.default.string
  }),

  /**
   * `true` to sets the high contrast for Card.
   */
  inverse: _propTypes.default.bool,

  /**
   * Classname to be assigned to the Card component.
   */
  customClassName: _propTypes.default.string
};
exports.cardPropTypes = cardPropTypes;
Card.propTypes = cardPropTypes;