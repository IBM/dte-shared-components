"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports._close = exports.sortList = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _ComposedModal = _interopRequireWildcard(require("../../internal/vendor/carbon-components-react/components/ComposedModal/ComposedModal"));

var _react = _interopRequireWildcard(require("react"));

var _altlangs = _interopRequireDefault(require("@carbon/ibmdotcom-utilities/lib/utilities/altlangs/altlangs"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/arrow--left/20"));

var _classnames = _interopRequireDefault(require("classnames"));

var _settings = _interopRequireDefault(require("@carbon/ibmdotcom-utilities/lib/utilities/settings/settings"));

var _2 = _interopRequireDefault(require("@carbon/icons-react/lib/earth--filled/16"));

var _Locale = _interopRequireDefault(require("@carbon/ibmdotcom-services/lib/services/Locale/Locale"));

var _LocaleModalCountries = _interopRequireDefault(require("./LocaleModalCountries"));

var _LocaleModalRegions = _interopRequireDefault(require("./LocaleModalRegions"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * LocaleModal component.
 */

var LocaleModal = function LocaleModal(_ref) {
  var isOpen = _ref.isOpen,
      setIsOpen = _ref.setIsOpen,
      localeData = _ref.localeData,
      localeDisplay = _ref.localeDisplay;

  var _useState = (0, _react.useState)({}),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      list = _useState2[0],
      setList = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      langDisplay = _useState4[0],
      setLangDisplay = _useState4[1];

  var _useState5 = (0, _react.useState)({}),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      modalLabels = _useState6[0],
      setModalLabels = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      isFiltering = _useState8[0],
      setIsFiltering = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      clearResults = _useState10[0],
      setClearResults = _useState10[1];

  var _useState11 = (0, _react.useState)(),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      currentRegion = _useState12[0],
      setCurrentRegion = _useState12[1];

  var filterClass = (0, _classnames.default)((0, _defineProperty2.default)({}, "".concat(prefix, "--locale-modal__filtering"), isFiltering));
  (0, _react.useEffect)(function () {
    var stale = false;
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var _document$querySelect;

      var list, getLangDisplay, pair, locale, localeModalContainer;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(localeData && localeDisplay)) {
                _context.next = 5;
                break;
              }

              list = Object.assign({}, localeData);
              getLangDisplay = localeDisplay;
              _context.next = 17;
              break;

            case 5:
              _context.next = 7;
              return Promise.all([_Locale.default.getLocale(), _Locale.default.getLangDisplay()]);

            case 7:
              pair = _context.sent;

              if (stale) {
                _context.next = 17;
                break;
              }

              locale = pair[0];
              getLangDisplay = pair[1];
              _context.t0 = locale;

              if (!_context.t0) {
                _context.next = 16;
                break;
              }

              _context.next = 15;
              return _Locale.default.getList(locale);

            case 15:
              _context.t0 = _context.sent;

            case 16:
              list = _context.t0;

            case 17:
              setLangDisplay(getLangDisplay);
              setList(list);
              setModalLabels(list.localeModal);
              (_document$querySelect = document.querySelector(".".concat(prefix, "--modal-header__heading"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute('tabindex', '0');
              localeModalContainer = document.querySelector(".".concat(prefix, "--locale-modal-container .").concat(prefix, "--modal-container"));
              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('role', 'dialog');
              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('tabindex', '-1');
              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('aria-modal', 'true');

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))(); // reset the country search results when clicking close icon or back to region button

    if (clearResults) {
      var localeItems = document.querySelectorAll(".".concat(prefix, "--locale-modal__locales"));
      var localeHidden = "".concat(prefix, "--locale-modal__locales-hidden");
      (0, _toConsumableArray2.default)(localeItems).map(function (item) {
        item.classList.remove(localeHidden);
      });
    }

    return function () {
      stale = true;
    };
  }, [clearResults, localeData, localeDisplay]);
  return _react.default.createElement(_ComposedModal.default, {
    open: isOpen,
    onClose: function onClose() {
      _close(setIsOpen);
    },
    className: "".concat(prefix, "--locale-modal-container"),
    "data-autoid": "".concat(stablePrefix, "--locale-modal"),
    selectorPrimaryFocus: ".".concat(prefix, "--modal-close")
  }, isFiltering ? _react.default.createElement(_ComposedModal.ModalHeader, {
    "data-autoid": "".concat(stablePrefix, "--locale-modal__region-back"),
    label: [_react.default.createElement(_.default, {
      className: "".concat(prefix, "--locale-modal__label-arrow"),
      key: "arrow-left"
    }), modalLabels.headerTitle],
    title: currentRegion,
    className: "".concat(prefix, "--locale-modal__back")
  }) : _react.default.createElement(_ComposedModal.ModalHeader, {
    label: [langDisplay, _react.default.createElement(_2.default, {
      key: "earthfilled",
      className: "".concat(prefix, "--locale-modal__label-globe")
    })],
    title: modalLabels.headerTitle,
    iconDescription: modalLabels.modalClose
  }), _react.default.createElement(_ComposedModal.ModalBody, {
    className: "".concat(prefix, "--locale-modal ").concat(filterClass)
  }, _react.default.createElement(_LocaleModalRegions.default, {
    regionList: sortList(list),
    setCurrentRegion: setCurrentRegion,
    setIsFiltering: setIsFiltering,
    setClearResults: setClearResults,
    returnButtonLabel: modalLabels.headerTitle,
    closeModalLabel: modalLabels.modalClose
  }), _react.default.createElement(_LocaleModalCountries.default, (0, _extends2.default)({
    regionList: sortList(list),
    setClearResults: setClearResults,
    currentRegion: currentRegion
  }, modalLabels))));
};

LocaleModal.propTypes = {
  /**
   * `true` to open modal in its initial state.
   */
  isOpen: _propTypes.default.bool,

  /**
   * The setter for `isOpen`.
   */
  setIsOpen: _propTypes.default.func,

  /**
   * Locale/Language data to bypass the service call.
   */
  localeData: _propTypes.default.shape({
    regionList: _propTypes.default.arrayOf(_propTypes.default.shape({
      name: _propTypes.default.string,
      key: _propTypes.default.string,
      countryList: _propTypes.default.shape({
        name: _propTypes.default.string,
        locale: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.string))
      })
    })),
    localeModal: _propTypes.default.shape({
      headerTitle: _propTypes.default.string,
      modalClose: _propTypes.default.string,
      searchLabel: _propTypes.default.string,
      searchClearText: _propTypes.default.string,
      searchPlaceholder: _propTypes.default.string,
      availabilityText: _propTypes.default.string,
      unavailabilityText: _propTypes.default.string
    })
  }),

  /**
   * Display text for current locale/language to bypass service call.
   */
  localeDisplay: _propTypes.default.string
};
LocaleModal.defaultProps = {
  isOpen: false,
  setIsOpen: function setIsOpen() {},
  localeData: null,
  localeDisplay: null
};
/**
 *  New region/country list based lang attributes available on page
 *
 * @param {object} list country list
 *
 * @returns {object} list item
 */

var sortList = function sortList(list) {
  var pageLangs = (0, _altlangs.default)();
  var filterList = [];
  list.regionList && list.regionList.map(function (region, index) {
    filterList.push({
      name: region.name,
      key: region.key,
      countries: []
    });

    var _loop = function _loop() {
      var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      region.countryList.map(function (country) {
        country.locale.map(function (loc) {
          if (loc[0].includes(key)) {
            filterList[index].countries.push({
              region: region.key,
              name: country.name,
              locale: loc[0],
              language: loc[1],
              href: value
            });
          }
        });
      });
    };

    for (var _i = 0, _Object$entries = Object.entries(pageLangs); _i < _Object$entries.length; _i++) {
      _loop();
    }

    filterList[index].countries.sort(function (a, b) {
      return a.name > b.name ? 1 : -1;
    });
  });
  return filterList;
};
/**
 * Sets modal state to closed
 *
 * @private
 */


exports.sortList = sortList;

var _close = function _close(setIsOpen) {
  setIsOpen(false);
  var footerBtn = document.querySelector(".".concat(prefix, "--locale-btn__container .").concat(prefix, "--btn--secondary"));
  setTimeout(function () {
    footerBtn === null || footerBtn === void 0 ? void 0 : footerBtn.focus();
  }, 100);
};

exports._close = _close;
var _default = LocaleModal;
exports.default = _default;