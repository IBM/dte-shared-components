import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import classNames from 'classnames';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings';
import Link from '../../internal/vendor/carbon-components-react/components/Link/Link';
import PropTypes from 'prop-types';
import React from 'react';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * LinkWithIcon component.
 */

var LinkWithIcon = function LinkWithIcon(_ref) {
  var children = _ref.children,
      customClassName = _ref.className,
      href = _ref.href,
      inverse = _ref.inverse,
      iconPlacement = _ref.iconPlacement,
      props = _objectWithoutProperties(_ref, ["children", "className", "href", "inverse", "iconPlacement"]);

  return React.createElement("div", {
    className: classNames("".concat(prefix, "--link-with-icon__container"), customClassName, _defineProperty({}, "".concat(prefix, "--link-with-icon__container__inverse"), inverse)),
    "data-autoid": "".concat(stablePrefix, "--link-with-icon")
  }, React.createElement(Link, _extends({
    tabIndex: 0,
    href: href,
    className: classNames("".concat(prefix, "--link-with-icon"), _defineProperty({}, "".concat(prefix, "--link-with-icon__icon-left"), iconPlacement === 'left'))
  }, props), children));
};

LinkWithIcon.propTypes = {
  /**
   * Array containing Link text and icon elements.
   */
  children: PropTypes.arrayOf(PropTypes.node),

  /**
   * Url of link.
   */
  href: PropTypes.string,

  /**
   * Icon placement.
   */
  iconPlacement: PropTypes.oneOf(['left', 'right']),

  /**
   * Toggles inverse theming
   */
  inverse: PropTypes.bool,

  /**
   * custom classname
   */
  className: PropTypes.string
};
LinkWithIcon.defaultProps = {
  children: [],
  href: '',
  iconPlacement: 'right'
};
export default LinkWithIcon;