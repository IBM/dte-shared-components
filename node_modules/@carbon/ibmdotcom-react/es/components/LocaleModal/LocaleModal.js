import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import ComposedModal, { ModalBody, ModalHeader } from '../../internal/vendor/carbon-components-react/components/ComposedModal/ComposedModal';
import React, { useEffect, useState } from 'react';
import altlangs from '@carbon/ibmdotcom-utilities/es/utilities/altlangs/altlangs';
import ArrowLeft20 from '@carbon/icons-react/es/arrow--left/20';
import cx from 'classnames';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings';
import EarthFilled16 from '@carbon/icons-react/es/earth--filled/16';
import LocaleAPI from '@carbon/ibmdotcom-services/es/services/Locale/Locale';
import LocaleModalCountries from './LocaleModalCountries';
import LocaleModalRegions from './LocaleModalRegions';
import PropTypes from 'prop-types';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * LocaleModal component.
 */

var LocaleModal = function LocaleModal(_ref) {
  var isOpen = _ref.isOpen,
      setIsOpen = _ref.setIsOpen,
      localeData = _ref.localeData,
      localeDisplay = _ref.localeDisplay;

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      list = _useState2[0],
      setList = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      langDisplay = _useState4[0],
      setLangDisplay = _useState4[1];

  var _useState5 = useState({}),
      _useState6 = _slicedToArray(_useState5, 2),
      modalLabels = _useState6[0],
      setModalLabels = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isFiltering = _useState8[0],
      setIsFiltering = _useState8[1];

  var _useState9 = useState(false),
      _useState10 = _slicedToArray(_useState9, 2),
      clearResults = _useState10[0],
      setClearResults = _useState10[1];

  var _useState11 = useState(),
      _useState12 = _slicedToArray(_useState11, 2),
      currentRegion = _useState12[0],
      setCurrentRegion = _useState12[1];

  var filterClass = cx(_defineProperty({}, "".concat(prefix, "--locale-modal__filtering"), isFiltering));
  useEffect(function () {
    var stale = false;

    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _document$querySelect;

      var list, getLangDisplay, pair, locale, localeModalContainer;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(localeData && localeDisplay)) {
                _context.next = 5;
                break;
              }

              list = Object.assign({}, localeData);
              getLangDisplay = localeDisplay;
              _context.next = 17;
              break;

            case 5:
              _context.next = 7;
              return Promise.all([LocaleAPI.getLocale(), LocaleAPI.getLangDisplay()]);

            case 7:
              pair = _context.sent;

              if (stale) {
                _context.next = 17;
                break;
              }

              locale = pair[0];
              getLangDisplay = pair[1];
              _context.t0 = locale;

              if (!_context.t0) {
                _context.next = 16;
                break;
              }

              _context.next = 15;
              return LocaleAPI.getList(locale);

            case 15:
              _context.t0 = _context.sent;

            case 16:
              list = _context.t0;

            case 17:
              setLangDisplay(getLangDisplay);
              setList(list);
              setModalLabels(list.localeModal);
              (_document$querySelect = document.querySelector(".".concat(prefix, "--modal-header__heading"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute('tabindex', '0');
              localeModalContainer = document.querySelector(".".concat(prefix, "--locale-modal-container .").concat(prefix, "--modal-container"));
              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('role', 'dialog');
              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('tabindex', '-1');
              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('aria-modal', 'true');

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))(); // reset the country search results when clicking close icon or back to region button


    if (clearResults) {
      var localeItems = document.querySelectorAll(".".concat(prefix, "--locale-modal__locales"));
      var localeHidden = "".concat(prefix, "--locale-modal__locales-hidden");

      _toConsumableArray(localeItems).map(function (item) {
        item.classList.remove(localeHidden);
      });
    }

    return function () {
      stale = true;
    };
  }, [clearResults, localeData, localeDisplay]);
  return React.createElement(ComposedModal, {
    open: isOpen,
    onClose: function onClose() {
      _close(setIsOpen);
    },
    className: "".concat(prefix, "--locale-modal-container"),
    "data-autoid": "".concat(stablePrefix, "--locale-modal"),
    selectorPrimaryFocus: ".".concat(prefix, "--modal-close")
  }, isFiltering ? React.createElement(ModalHeader, {
    "data-autoid": "".concat(stablePrefix, "--locale-modal__region-back"),
    label: [React.createElement(ArrowLeft20, {
      className: "".concat(prefix, "--locale-modal__label-arrow"),
      key: "arrow-left"
    }), modalLabels.headerTitle],
    title: currentRegion,
    className: "".concat(prefix, "--locale-modal__back")
  }) : React.createElement(ModalHeader, {
    label: [langDisplay, React.createElement(EarthFilled16, {
      key: "earthfilled",
      className: "".concat(prefix, "--locale-modal__label-globe")
    })],
    title: modalLabels.headerTitle,
    iconDescription: modalLabels.modalClose
  }), React.createElement(ModalBody, {
    className: "".concat(prefix, "--locale-modal ").concat(filterClass)
  }, React.createElement(LocaleModalRegions, {
    regionList: sortList(list),
    setCurrentRegion: setCurrentRegion,
    setIsFiltering: setIsFiltering,
    setClearResults: setClearResults,
    returnButtonLabel: modalLabels.headerTitle,
    closeModalLabel: modalLabels.modalClose
  }), React.createElement(LocaleModalCountries, _extends({
    regionList: sortList(list),
    setClearResults: setClearResults,
    currentRegion: currentRegion
  }, modalLabels))));
};

LocaleModal.propTypes = {
  /**
   * `true` to open modal in its initial state.
   */
  isOpen: PropTypes.bool,

  /**
   * The setter for `isOpen`.
   */
  setIsOpen: PropTypes.func,

  /**
   * Locale/Language data to bypass the service call.
   */
  localeData: PropTypes.shape({
    regionList: PropTypes.arrayOf(PropTypes.shape({
      name: PropTypes.string,
      key: PropTypes.string,
      countryList: PropTypes.shape({
        name: PropTypes.string,
        locale: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))
      })
    })),
    localeModal: PropTypes.shape({
      headerTitle: PropTypes.string,
      modalClose: PropTypes.string,
      searchLabel: PropTypes.string,
      searchClearText: PropTypes.string,
      searchPlaceholder: PropTypes.string,
      availabilityText: PropTypes.string,
      unavailabilityText: PropTypes.string
    })
  }),

  /**
   * Display text for current locale/language to bypass service call.
   */
  localeDisplay: PropTypes.string
};
LocaleModal.defaultProps = {
  isOpen: false,
  setIsOpen: function setIsOpen() {},
  localeData: null,
  localeDisplay: null
};
/**
 *  New region/country list based lang attributes available on page
 *
 * @param {object} list country list
 *
 * @returns {object} list item
 */

export var sortList = function sortList(list) {
  var pageLangs = altlangs();
  var filterList = [];
  list.regionList && list.regionList.map(function (region, index) {
    filterList.push({
      name: region.name,
      key: region.key,
      countries: []
    });

    var _loop = function _loop() {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      region.countryList.map(function (country) {
        country.locale.map(function (loc) {
          if (loc[0].includes(key)) {
            filterList[index].countries.push({
              region: region.key,
              name: country.name,
              locale: loc[0],
              language: loc[1],
              href: value
            });
          }
        });
      });
    };

    for (var _i = 0, _Object$entries = Object.entries(pageLangs); _i < _Object$entries.length; _i++) {
      _loop();
    }

    filterList[index].countries.sort(function (a, b) {
      return a.name > b.name ? 1 : -1;
    });
  });
  return filterList;
};
/**
 * Sets modal state to closed
 *
 * @private
 */

export var _close = function _close(setIsOpen) {
  setIsOpen(false);
  var footerBtn = document.querySelector(".".concat(prefix, "--locale-btn__container .").concat(prefix, "--btn--secondary"));
  setTimeout(function () {
    footerBtn === null || footerBtn === void 0 ? void 0 : footerBtn.focus();
  }, 100);
};
export default LocaleModal;