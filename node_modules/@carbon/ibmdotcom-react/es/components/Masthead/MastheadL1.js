import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import ArrowLeft16 from '@carbon/icons-react/es/arrow--left/16';
import cx from 'classnames';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings';
import HeaderMenu from '../carbon-components-react/UIShell/HeaderMenu';
import HeaderMenuItem from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderMenuItem';
import HeaderNavigation from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderNavigation';
import PropTypes from 'prop-types';
import React from 'react';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * MastHead L1 component.
 */

var MastheadL1 = function MastheadL1(_ref) {
  var _cx;

  var isShort = _ref.isShort,
      title = _ref.title,
      titleLink = _ref.titleLink,
      eyebrowText = _ref.eyebrowText,
      eyebrowLink = _ref.eyebrowLink,
      navigationL1 = _ref.navigationL1,
      rest = _objectWithoutProperties(_ref, ["isShort", "title", "titleLink", "eyebrowText", "eyebrowLink", "navigationL1"]);

  var className = cx((_cx = {}, _defineProperty(_cx, "".concat(prefix, "--masthead__l1"), true), _defineProperty(_cx, "".concat(prefix, "--masthead__l1--short"), isShort), _cx));
  var mastheadL1Links = navigationL1.map(function (link, index) {
    if (link.hasMenu) {
      return React.createElement(HeaderMenu, {
        "aria-label": link.title,
        menuLinkName: link.title,
        "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "__l1-nav").concat(index),
        key: index
      }, renderNav(link.menuSections, rest.navType));
    } else {
      return React.createElement(HeaderMenuItem, {
        href: link.url,
        "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "__l1-nav").concat(index),
        key: index
      }, link.title);
    }
  });
  return React.createElement("div", {
    className: className
  }, React.createElement("div", {
    className: "".concat(prefix, "--masthead__l1-name")
  }, eyebrowText && eyebrowLink && React.createElement("span", {
    className: "".concat(prefix, "--masthead__l1-name-eyebrow"),
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "__l1-productname")
  }, React.createElement(ArrowLeft16, null), React.createElement("a", {
    href: eyebrowLink
  }, eyebrowText)), React.createElement("span", {
    className: "".concat(prefix, "--masthead__l1-name-title")
  }, React.createElement("a", {
    href: titleLink
  }, title))), React.createElement(HeaderNavigation, {
    className: "".concat(prefix, "--masthead__l1-nav"),
    "aria-label": ""
  }, mastheadL1Links));
};
/**
 * Loops through and renders a list of links for the masthead nav
 *
 * @param {Array} sections A list of links to be rendered
 * @param {string} navType navigation type for autoids
 * @returns {object} JSX object
 */


function renderNav(sections, navType) {
  var navItems = [];
  sections.forEach(function (section, i) {
    section.menuItems.forEach(function (item, j) {
      navItems.push(React.createElement(HeaderMenuItem, {
        href: item.url,
        "data-autoid": "".concat(stablePrefix, "--masthead-").concat(navType, "__l1-nav").concat(i, "-item").concat(j),
        key: item.title
      }, item.title));
    });
  });
  return navItems;
}

MastheadL1.propTypes = {
  /**
   * `true` to make this L1 short.
   */
  isShort: PropTypes.bool,

  /**
   * The title (experimental).
   */
  title: PropTypes.string,

  /**
   * The optional title link (experimental)
   */
  titleLink: PropTypes.string,

  /**
   * Text for the eyebrow link (experimental).
   */
  eyebrowText: PropTypes.string,

  /**
   * URL for the eyebrow link (experimental).
   */
  eyebrowLink: PropTypes.string,

  /**
   * Object containing masthead l1 navigation elements.
   */
  navigationL1: PropTypes.arrayOf(PropTypes.shape({
    hasMenu: PropTypes.bool,
    title: PropTypes.string,
    url: PropTypes.string,
    menuSections: PropTypes.arrayOf(PropTypes.shape({
      menuItems: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string,
        url: PropTypes.string
      }))
    }))
  }))
};
MastheadL1.defaultProps = {
  navigationL1: [],
  titleLink: null
};
export default MastheadL1;