import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useState } from 'react';
import classnames from 'classnames';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings';
import HeaderMenu from '../carbon-components-react/UIShell/HeaderMenu';
import HeaderMenuItem from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderMenuItem';
import HeaderName from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderName';
import HeaderNavigation from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderNavigation';
import MegaMenu from './MastheadMegaMenu/MegaMenu';
import PropTypes from 'prop-types';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * Masthead top nav component.
 */

var MastheadTopNav = function MastheadTopNav(_ref) {
  var navigation = _ref.navigation,
      topNavProps = _objectWithoutProperties(_ref, ["navigation"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      overlay = _useState2[0],
      setOverlay = _useState2[1];
  /**
   * Top masthead navigation
   *
   * @returns {*} Top masthead navigation
   */


  var mastheadLinks = navigation.map(function (link, i) {
    var autoid = "".concat(stablePrefix, "--masthead-").concat(topNavProps.navType, "__l0-nav").concat(i);

    if (link.hasMenu || link.hasMegapanel) {
      return React.createElement(HeaderMenu, {
        "aria-label": link.title,
        menuLinkName: link.title,
        className: classnames(_defineProperty({}, "".concat(prefix, "--masthead__megamenu__l0-nav"), link.hasMegapanel)),
        autoId: autoid,
        key: i,
        setOverlay: setOverlay
      }, renderNav(link, autoid));
    } else {
      return React.createElement(HeaderMenuItem, {
        href: link.url,
        "data-autoid": autoid,
        key: i
      }, link.title);
    }
  });
  return React.createElement(React.Fragment, null, React.createElement("div", {
    className: "".concat(prefix, "--header__nav-container")
  }, topNavProps.platform && React.createElement(HeaderName, {
    prefix: "",
    href: topNavProps.platform.url,
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(topNavProps.navType, "__l0-ecosystemname")
  }, topNavProps.platform.name), React.createElement(HeaderNavigation, {
    "aria-label": "IBM",
    "data-autoid": "".concat(stablePrefix, "--masthead__l0-nav")
  }, mastheadLinks)), React.createElement("div", {
    className: classnames("".concat(prefix, "--masthead__overlay"), _defineProperty({}, "".concat(prefix, "--masthead__overlay-show"), overlay))
  }));
};
/**
 * Loops through and renders a list of links for the masthead nav
 *
 * @param {object} link A list of links to be rendered
 * @param {string} autoid autoid predecessor for megamenu items/menu items data-autoids
 * @returns {object} JSX object
 */


function renderNav(link, autoid) {
  var navItems = [];

  if (link.hasMegapanel) {
    navItems.push(React.createElement(MegaMenu, {
      key: link.title,
      data: link,
      autoid: autoid
    }));
  } else {
    link.menuSections.forEach(function (section, i) {
      section.menuItems.forEach(function (item, j) {
        navItems.push(React.createElement(HeaderMenuItem, {
          href: item.url,
          "data-autoid": "".concat(autoid, "--subnav-col").concat(i, "-item").concat(j),
          key: item.title
        }, item.title));
      });
    });
  }

  return navItems;
}

MastheadTopNav.propTypes = {
  /**
   * Object containing top navigation elements.
   */
  navigation: PropTypes.arrayOf(PropTypes.shape({
    hasMenu: PropTypes.bool,
    title: PropTypes.string,
    url: PropTypes.string,
    menuSections: PropTypes.arrayOf(PropTypes.shape({
      menuItems: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string,
        url: PropTypes.string
      }))
    }))
  }))
};
export default MastheadTopNav;