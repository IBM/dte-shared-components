(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types'), require('classnames'), require('react-dom')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types', 'classnames', 'react-dom'], factory) :
	(global = global || self, factory(global.IBMDotcomReact = {}, global.React, global.PropTypes, global.classNames, global.ReactDOM));
}(this, function (exports, React, PropTypes, cx, ReactDOM) { 'use strict';

	var React__default = 'default' in React ? React['default'] : React;
	PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;
	cx = cx && cx.hasOwnProperty('default') ? cx['default'] : cx;
	ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _extends_1 = createCommonjsModule(function (module) {
	  function _extends() {
	    module.exports = _extends = Object.assign || function (target) {
	      for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];

	        for (var key in source) {
	          if (Object.prototype.hasOwnProperty.call(source, key)) {
	            target[key] = source[key];
	          }
	        }
	      }

	      return target;
	    };

	    return _extends.apply(this, arguments);
	  }

	  module.exports = _extends;
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Settings.
	 * @exports CarbonComponents.settings
	 * @type Object
	 * @property {boolean} [disableAutoInit]
	 *   Disables automatic instantiation of components.
	 *   By default (`CarbonComponents.disableAutoInit` is `false`),
	 *   carbon-components attempts to instantiate components automatically
	 *   by searching for elements with `data-component-name` (e.g. `data-loading`) attribute
	 *   or upon DOM events (e.g. clicking) on such elements.
	 *   See each components' static `.init()` methods for details.
	 * @property {string} [prefix=bx]
	 *   Brand prefix. Should be in sync with `$prefix` Sass variable in carbon-components/src/globals/scss/_vars.scss.
	 * // @todo given that the default value is so long, is it appropriate to put in the JSDoc?
	 * @property {string} [selectorTabbable]
	 *   A selector selecting tabbable/focusable nodes.
	 *   By default selectorTabbable references links, areas, inputs, buttons, selects, textareas,
	 *   iframes, objects, embeds, or elements explicitly using tabindex or contenteditable attributes
	 *   as long as the element is not `disabled` or the `tabindex="-1"`.
	 * @property {string} [selectorFocusable]
	 *   CSS selector that selects major nodes that are click focusable
	 *   This property is identical to selectorTabbable with the exception of
	 *   the `:not([tabindex='-1'])` pseudo class
	 */
	var settings = {
	  prefix: 'bx',
	  selectorTabbable: "\n    a[href], area[href], input:not([disabled]):not([tabindex='-1']),\n    button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),\n    textarea:not([disabled]):not([tabindex='-1']),\n    iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]\n  ",
	  selectorFocusable: "\n    a[href], area[href], input:not([disabled]),\n    button:not([disabled]),select:not([disabled]),\n    textarea:not([disabled]),\n    iframe, object, embed, *[tabindex], *[contenteditable=true]\n  "
	};
	var settings_1 = settings;

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var ButtonKinds = ['primary', 'secondary', 'danger', 'ghost', 'danger--primary', 'tertiary'];

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function warning() {};

	{
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);

	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });

	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }

	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	var browser = warning;

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var didWarnAboutDeprecation = {};
	function deprecate(propType, message) {
	  function checker(props, propName, componentName) {
	    if (props[propName] === undefined) {
	      return;
	    }

	    if (!didWarnAboutDeprecation[componentName] || !didWarnAboutDeprecation[componentName][propName]) {
	      didWarnAboutDeprecation[componentName] = _objectSpread(_objectSpread({}, didWarnAboutDeprecation[componentName]), {}, _defineProperty({}, propName, true));
	        browser(false, message || "The prop `".concat(propName, "` has been deprecated for the ") + "".concat(componentName, " component. It will be removed in the next major ") + "release")  ;
	    }

	    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      rest[_key - 3] = arguments[_key];
	    }

	    return propType.apply(void 0, [props, propName, componentName].concat(rest));
	  }

	  return checker;
	}

	function ownKeys$1(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$1(Object(source), true).forEach(function (key) {
	        _defineProperty$1(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$1(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty$1(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix = settings_1.prefix;
	var Button = /*#__PURE__*/React__default.forwardRef(function Button(_ref, ref) {
	  var _classNames;

	  var children = _ref.children,
	      as = _ref.as,
	      className = _ref.className,
	      disabled = _ref.disabled,
	      small = _ref.small,
	      size = _ref.size,
	      kind = _ref.kind,
	      href = _ref.href,
	      tabIndex = _ref.tabIndex,
	      type = _ref.type,
	      ButtonImageElement = _ref.renderIcon,
	      iconDescription = _ref.iconDescription,
	      hasIconOnly = _ref.hasIconOnly,
	      tooltipPosition = _ref.tooltipPosition,
	      tooltipAlignment = _ref.tooltipAlignment,
	      other = _objectWithoutProperties(_ref, ["children", "as", "className", "disabled", "small", "size", "kind", "href", "tabIndex", "type", "renderIcon", "iconDescription", "hasIconOnly", "tooltipPosition", "tooltipAlignment"]);

	  var buttonClasses = cx(className, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefix, "--btn"), true), _defineProperty$1(_classNames, "".concat(prefix, "--btn--field"), size === 'field'), _defineProperty$1(_classNames, "".concat(prefix, "--btn--sm"), size === 'small' || small), _defineProperty$1(_classNames, "".concat(prefix, "--btn--").concat(kind), kind), _defineProperty$1(_classNames, "".concat(prefix, "--btn--disabled"), disabled), _defineProperty$1(_classNames, "".concat(prefix, "--btn--icon-only"), hasIconOnly), _defineProperty$1(_classNames, "".concat(prefix, "--tooltip__trigger"), hasIconOnly), _defineProperty$1(_classNames, "".concat(prefix, "--tooltip--a11y"), hasIconOnly), _defineProperty$1(_classNames, "".concat(prefix, "--tooltip--").concat(tooltipPosition), hasIconOnly && tooltipPosition), _defineProperty$1(_classNames, "".concat(prefix, "--tooltip--align-").concat(tooltipAlignment), hasIconOnly && tooltipAlignment), _classNames));
	  var commonProps = {
	    tabIndex: tabIndex,
	    className: buttonClasses,
	    ref: ref
	  };
	  var buttonImage = !ButtonImageElement ? null : /*#__PURE__*/React__default.createElement(ButtonImageElement, {
	    "aria-label": iconDescription,
	    className: "".concat(prefix, "--btn__icon"),
	    "aria-hidden": "true"
	  });
	  var component = 'button';
	  var otherProps = {
	    disabled: disabled,
	    type: type
	  };
	  var anchorProps = {
	    href: href
	  };
	  var assistiveText = hasIconOnly ? /*#__PURE__*/React__default.createElement("span", {
	    className: "".concat(prefix, "--assistive-text")
	  }, iconDescription) : null;

	  if (as) {
	    component = as;
	    otherProps = _objectSpread$1(_objectSpread$1({}, otherProps), anchorProps);
	  } else if (href && !disabled) {
	    component = 'a';
	    otherProps = anchorProps;
	  }

	  return /*#__PURE__*/React__default.createElement(component, _objectSpread$1(_objectSpread$1(_objectSpread$1({}, other), commonProps), otherProps), assistiveText, children, buttonImage);
	});
	Button.displayName = 'Button';
	Button.propTypes = {
	  /**
	   * Specify the content of your Button
	   */
	  children: PropTypes.node,

	  /**
	   * Specify how the button itself should be rendered.
	   * Make sure to apply all props to the root node and render children appropriately
	   */
	  as: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.elementType]),

	  /**
	   * Specify an optional className to be added to your Button
	   */
	  className: PropTypes.string,

	  /**
	   * Specify whether the Button should be disabled, or not
	   */
	  disabled: PropTypes.bool,

	  /**
	   * Specify the size of the button, from a list of available sizes.
	   * For `default` buttons, this prop can remain unspecified.
	   */
	  size: PropTypes.oneOf(['default', 'field', 'small']),

	  /**
	   * Deprecated in v10 in favor of `size`.
	   * Specify whether the Button should be a small variant
	   */
	  small: deprecate(PropTypes.bool, "\nThe prop `small` for Button has been deprecated in favor of `size`. Please use `size=\"small\"` instead."),

	  /**
	   * Specify the kind of Button you want to create
	   */
	  kind: PropTypes.oneOf(ButtonKinds).isRequired,

	  /**
	   * Optionally specify an href for your Button to become an <a> element
	   */
	  href: PropTypes.string,

	  /**
	   * Optional prop to specify the tabIndex of the Button
	   */
	  tabIndex: PropTypes.number,

	  /**
	   * Optional prop to specify the type of the Button
	   */
	  type: PropTypes.oneOf(['button', 'reset', 'submit']),

	  /**
	   * Optional prop to specify the role of the Button
	   */
	  role: PropTypes.string,

	  /**
	   * Optional prop to allow overriding the icon rendering.
	   * Can be a React component class
	   */
	  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

	  /**
	   * If specifying the `renderIcon` prop, provide a description for that icon that can
	   * be read by screen readers
	   */
	  iconDescription: function iconDescription(props) {
	    if (props.renderIcon && !props.children && !props.iconDescription) {
	      return new Error('renderIcon property specified without also providing an iconDescription property.');
	    }

	    return undefined;
	  },

	  /**
	   * Specify if the button is an icon-only button
	   */
	  hasIconOnly: PropTypes.bool,

	  /**
	   * Specify the direction of the tooltip for icon-only buttons.
	   * Can be either top, right, bottom, or left.
	   */
	  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * Specify the alignment of the tooltip to the icon-only button.
	   * Can be one of: start, center, or end.
	   */
	  tooltipAlignment: PropTypes.oneOf(['start', 'center', 'end'])
	};
	Button.defaultProps = {
	  tabIndex: 0,
	  type: 'button',
	  disabled: false,
	  kind: 'primary',
	  size: 'default'
	};

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Global settings
	 *
	 * @exports ibmdotcom.settings
	 * @type {object} Settings object
	 * @property {string} [prefix=dds]
	 * IBM.com Library prefix
	 *
	 */
	var settings$1 = {
	  version: 'dds.v1.10.1',
	  stablePrefix: 'dds'
	};

	var _typeof_1 = createCommonjsModule(function (module) {
	  function _typeof2(obj) {
	    if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	      _typeof2 = function _typeof2(obj) {
	        return _typeof_1(obj);
	      };
	    } else {
	      _typeof2 = function _typeof2(obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	      };
	    }

	    return _typeof2(obj);
	  }

	  function _typeof(obj) {
	    if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	      module.exports = _typeof = function _typeof(obj) {
	        return _typeof2(obj);
	      };
	    } else {
	      module.exports = _typeof = function _typeof(obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	      };
	    }

	    return _typeof(obj);
	  }

	  module.exports = _typeof;
	});

	var lib = (typeof self === "undefined" ? "undefined" : _typeof_1(self)) === 'object' && self.self === self && self || _typeof_1(commonjsGlobal) === 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal || commonjsGlobal;

	/**
	 * Copyright IBM Corp. 2018, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	/**
	 * Copyright IBM Corp. 2018, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	// Default, Use with em() and rem() functions

	var baseFontSize = 16;
	/**
	 * Convert a given px unit to a rem unit
	 * @param {number} px
	 * @returns {string}
	 */

	function rem(px) {
	  return "".concat(px / baseFontSize, "rem");
	}
	// Initial map of our breakpoints and their values


	var breakpoints = {
	  sm: {
	    width: rem(320),
	    columns: 4,
	    margin: '0'
	  },
	  md: {
	    width: rem(672),
	    columns: 8,
	    margin: rem(16)
	  },
	  lg: {
	    width: rem(1056),
	    columns: 16,
	    margin: rem(16)
	  },
	  xlg: {
	    width: rem(1312),
	    columns: 16,
	    margin: rem(16)
	  },
	  max: {
	    width: rem(1584),
	    columns: 16,
	    margin: rem(24)
	  }
	};

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	/**
	 * Utility that sets an array of elements to the same height.
	 *
	 * @example
	 * import {sameHeight} from '@carbon/ibmdotcom-utilities';
	 *
	 * sameHeight(ElementArray, 'md');
	 *
	 * if you want the utility to refresh the sizes as you resize the screen, consider using a listener:
	 *
	 * window.addEventListener('resize', function() {
	 *   window.requestAnimationFrame(function() {
	 *     sameHeight(ElementArray, 'md');
	 *   });
	 * }, true);
	 *
	 * @param {Array} elemCollection Html objects array
	 * @param {string} minSize Minimum size for the utility to be activated, empty for small,
	 *  md for medium, lg for large, xlg for xlarge, max for maximum
	 */

	function sameHeight(elemCollection) {
	  var minSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	  var elemArr = Array.prototype.slice.call(elemCollection);
	  var targetWidth = minSize ? parseFloat(breakpoints[minSize].width) * baseFontSize : 0;

	  if (window.innerWidth > targetWidth) {
	    var targetHeight = 0;
	    elemArr.forEach(function (elem) {
	      elem.style.height = 'auto';
	      elem.offsetHeight > targetHeight ? targetHeight = elem.offsetHeight : false;
	    });
	    elemArr.forEach(function (elem) {
	      elem.style.height = targetHeight + 'px';
	    });
	  } else {
	    elemArr.forEach(function (elem) {
	      elem.style.height = 'auto';
	    });
	  }
	}

	var stablePrefix = settings$1.stablePrefix;
	var prefix$1 = settings_1.prefix;
	/**
	 * Button group.
	 */

	var ButtonGroup = function ButtonGroup(_ref) {
	  var buttons = _ref.buttons,
	      enableSizeByContent = _ref.enableSizeByContent;
	  var groupRef = React.useRef(null);
	  var observedPseudoButtonNodesRef = React.useRef(new Set());
	  var shouldUseResizeObserver = enableSizeByContent && typeof ResizeObserver !== 'undefined';
	  var resizeObserverButtonsRef = React.useRef(!shouldUseResizeObserver ? null : new ResizeObserver(function (entries) {
	    var groups = entries.reduce(function (acc, entry) {
	      var group = entry.target.closest('.bx--buttongroup');

	      if (group) {
	        acc.add(group);
	      }

	      return acc;
	    }, new Set());
	    groups.forEach(function (group) {
	      var width = Array.prototype.reduce.call(group.querySelectorAll('.bx--buttongroup-item--pseudo .bx--btn'), function (acc, item) {
	        return Math.max(acc, item.offsetWidth);
	      }, 0);
	      var height = Array.prototype.reduce.call(group.querySelectorAll('.bx--buttongroup-item--pseudo .bx--btn'), function (acc, item) {
	        return Math.max(acc, item.offsetHeight);
	      }, 0);
	      var hasWordWrap = height > 48;
	      var mobileWidth = lib.innerWidth <= 320;
	      Array.prototype.forEach.call(group.querySelectorAll('.bx--buttongroup-item:not(.bx--buttongroup-item--pseudo) .bx--btn'), function (item) {
	        item.style.width = mobileWidth ? "100%" : "".concat(width + 1, "px");
	        item.classList.toggle("".concat(prefix$1, "--btn--multiline"), hasWordWrap);
	      });
	    });
	  }));
	  React.useLayoutEffect(function () {
	    var observedPseudoButtonNodes = observedPseudoButtonNodesRef.current;
	    var resizeObserverButtons = resizeObserverButtonsRef.current;

	    if (shouldUseResizeObserver) {
	      var groupNode = groupRef.current;
	      observedPseudoButtonNodes.forEach(function (item) {
	        if (!groupNode.contains(item)) {
	          resizeObserverButtons.unobserve(item);
	          observedPseudoButtonNodes.delete(item);
	        }
	      });
	      var latestPseudoButtonNodes = groupNode.querySelectorAll('.bx--buttongroup-item--pseudo .bx--btn');
	      Array.prototype.forEach.call(latestPseudoButtonNodes, function (item) {
	        if (!observedPseudoButtonNodes.has(item)) {
	          resizeObserverButtons.observe(item);
	          observedPseudoButtonNodes.add(item);
	        }
	      });
	    } else {
	      observedPseudoButtonNodes.forEach(function (item) {
	        resizeObserverButtons.unobserve(item);
	        observedPseudoButtonNodes.delete(item);
	      });
	    }
	  }, [buttons, shouldUseResizeObserver]);
	  React.useEffect(function () {
	    return function () {
	      var resizeObserverButtons = resizeObserverButtonsRef.current;

	      if (resizeObserverButtons) {
	        resizeObserverButtons.disconnect();
	      }
	    };
	  }, []);
	  React.useEffect(function () {
	    if (buttons.length > 1) {
	      setSameHeight();
	      lib.addEventListener('resize', setSameHeight);
	      return function () {
	        return lib.removeEventListener('resize', setSameHeight);
	      };
	    }
	  }, [buttons]);
	  /**
	   * Set the buttons to have the same height based on the tallest one
	   */

	  var setSameHeight = function setSameHeight() {
	    lib.requestAnimationFrame(function () {
	      var containerNode = groupRef.current;

	      if (containerNode) {
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$1, "--buttongroup-item")));
	      }
	    });
	  };

	  return React__default.createElement("ol", {
	    className: "".concat(prefix$1, "--buttongroup"),
	    "data-autoid": "".concat(stablePrefix, "--button-group"),
	    ref: groupRef
	  }, buttons.map(function (button, key) {
	    return React__default.createElement(React.Fragment, {
	      key: key
	    }, React__default.createElement("li", {
	      className: "".concat(prefix$1, "--buttongroup-item")
	    }, React__default.createElement(Button, _extends_1({
	      "data-autoid": "".concat(stablePrefix, "--button-group-").concat(key)
	    }, button, {
	      type: "button",
	      kind: key === buttons.length - 1 ? 'primary' : 'tertiary'
	    }), button.copy)), !shouldUseResizeObserver ? undefined : React__default.createElement("li", {
	      className: "".concat(prefix$1, "--buttongroup-item ").concat(prefix$1, "--buttongroup-item--pseudo")
	    }, React__default.createElement(Button, _extends_1({
	      tabIndex: -1
	    }, button, {
	      type: "button",
	      kind: key === buttons.length - 1 ? 'primary' : 'tertiary'
	    }), button.copy)));
	  }));
	};

	ButtonGroup.propTypes = {
	  /**
	   * Array of button objects to render.
	   * Use the following for each items:
	   *
	   * | Name         | Data Type | Description                                                                                                                    |
	   * | ------------ | --------- | ------------------------------------------------------------------------------------------------------------------------------ |
	   * | `href`       | String    | URL for the button item                                                                                                        |
	   * | `copy`       | String    | Button copy                                                                                                                    |
	   * | `renderIcon` | Object    | Provide an optional icon for the CTA from [Carbon's icon library](https://www.carbondesignsystem.com/guidelines/icons/library) |
	   *
	   * Visit the [Button documentation](http://react.carbondesignsystem.com/?path=/story/buttons--default)
	   * from Carbon for a full list of available props.
	   */
	  buttons: PropTypes.arrayOf(PropTypes.shape({
	    copy: PropTypes.string.isRequired,
	    href: PropTypes.string.isRequired,
	    renderIcon: PropTypes.elementType
	  })).isRequired,

	  /**
	   * `true` to make the buttons change their sizes by their contents.
	   */
	  enableSizeByContent: PropTypes.bool
	};
	ButtonGroup.defaultProps = {
	  enableSizeByContent: true
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$1 = settings$1.stablePrefix;
	var prefix$2 = settings_1.prefix;
	/**
	 * Callout with child object.
	 */

	var Callout = function Callout(_ref) {
	  var children = _ref.children;
	  return React__default.createElement("section", {
	    className: "".concat(prefix$2, "--callout__container"),
	    "data-autoid": "".concat(stablePrefix$1, "--callout__container")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$2, "--callout__column"),
	    "data-autoid": "".concat(stablePrefix$1, "--callout__column")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$2, "--callout__content"),
	    "data-autoid": "".concat(stablePrefix$1, "--callout__content")
	  }, children)));
	};

	Callout.propTypes = {
	  /**
	   * The component being imported into the callout container.
	   */
	  children: PropTypes.object
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * This file contains the list of the default values of compile-time feature flags.
	 */

	/**
	 * This flag will determine if all feature flags should be enabled
	 *
	 * @type {boolean}
	 */
	var DDS_FLAGS_ALL = process.env.DDS_FLAGS_ALL === 'true' || false;
	/**
	 * Feature flag to turn on the Masthead L1
	 *
	 * @type {boolean}
	 */

	var DDS_MASTHEAD_L1 = process.env.DDS_MASTHEAD_L1 === 'true' || DDS_FLAGS_ALL || false;
	/**
	 * Feature flag for the optional language selector in the footer
	 *
	 * @type {boolean}
	 */

	var DDS_LANGUAGE_SELECTOR = process.env.DDS_LANGUAGE_SELECTOR === 'true' || DDS_FLAGS_ALL || false;
	/**
	 * This determines if the simplebenefits will be rendered or not
	 *
	 * @type {string | boolean}
	 */

	var DDS_SIMPLEBENEFITS = process.env.DDS_SIMPLEBENEFITS === 'true' || DDS_FLAGS_ALL || false;
	/**
	 * This determines if the logo grid will be rendered or not
	 *
	 * @type {string | boolean}
	 */

	var DDS_CALLOUT_DATA = process.env.DDS_CALLOUT_DATA === 'true' || DDS_FLAGS_ALL || false;
	/**
	 * This determines if content block - headlines will be rendered or not
	 *
	 * @type {string | boolean}
	 */

	var DDS_CONTENTBLOCK_HEADLINES = process.env.DDS_CONTENTBLOCK_HEADLINES === 'true' || DDS_FLAGS_ALL || false;

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Helper function for rendering feature flag
	 *
	 * @param {string} flag identifies which flag is used
	 * @param {object} jsx pass in the jsx to render conditionally
	 * @private
	 * @returns {object} JSX object
	 *
	 * return featureFlag(DDS_FEATURE_NAME, <div>hello world</div>);
	 *
	 */
	function featureFlag(flag, jsx) {
	  return flag ? jsx : null;
	}

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$2 = settings$1.stablePrefix;
	var prefix$3 = settings_1.prefix;
	/**
	 * Callout with Data pattern.
	 */

	var CalloutData = function CalloutData(_ref) {
	  var data = _ref.data,
	      copy = _ref.copy,
	      source = _ref.source;
	  return featureFlag(DDS_CALLOUT_DATA, React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$2, "--callout-data"),
	    className: "".concat(prefix$3, "--callout-data")
	  }, React__default.createElement(Callout, null, React__default.createElement("h4", {
	    className: "".concat(prefix$3, "--callout-data__data")
	  }, data), React__default.createElement("p", {
	    className: "".concat(prefix$3, "--callout-data__copy")
	  }, copy)), React__default.createElement("p", {
	    className: "".concat(prefix$3, "--callout-data__source")
	  }, source)));
	};

	CalloutData.PropTypes = {
	  /**
	   * Data for CalloutData pattern.
	   */
	  data: PropTypes.string.isRequired,

	  /**
	   * Copy text
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * Source test
	   */
	  source: PropTypes.string.isRequired
	};

	function _defineProperty$2(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty = _defineProperty$2;

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var arrayWithHoles = _arrayWithHoles;

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	var iterableToArrayLimit = _iterableToArrayLimit;

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var nonIterableRest = _nonIterableRest;

	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
	}

	var slicedToArray = _slicedToArray;

	function _defineProperty$3(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function ownKeys$2(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$2(Object(source), true).forEach(function (key) {
	        _defineProperty$3(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$2(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties$1(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$1(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}
	/**
	 * Copyright IBM Corp. 2018, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */


	var defaultAttributes = {
	  // Reference:
	  // https://github.com/IBM/carbon-components-react/issues/1392
	  // https://github.com/PolymerElements/iron-iconset-svg/pull/47
	  // `focusable` is a string attribute which is why we do not use a boolean here
	  focusable: 'false',
	  preserveAspectRatio: 'xMidYMid meet'
	};
	/**
	 * Get supplementary HTML attributes for a given <svg> element based on existing
	 * attributes.
	 */

	function getAttributes() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      width = _ref.width,
	      height = _ref.height,
	      _ref$viewBox = _ref.viewBox,
	      viewBox = _ref$viewBox === void 0 ? "0 0 ".concat(width, " ").concat(height) : _ref$viewBox,
	      attributes = _objectWithoutProperties$1(_ref, ["width", "height", "viewBox"]);

	  var tabindex = attributes.tabindex,
	      rest = _objectWithoutProperties$1(attributes, ["tabindex"]);

	  var iconAttributes = _objectSpread2(_objectSpread2(_objectSpread2({}, defaultAttributes), rest), {}, {
	    width: width,
	    height: height,
	    viewBox: viewBox
	  }); // TODO: attributes.title assumes that the consumer will implement <title> and
	  // correctly set `aria-labelledby`.


	  if (iconAttributes['aria-label'] || iconAttributes['aria-labelledby'] || iconAttributes.title) {
	    iconAttributes.role = 'img'; // Reference:
	    // https://allyjs.io/tutorials/focusing-in-svg.html

	    if (tabindex !== undefined && tabindex !== null) {
	      iconAttributes.focusable = 'true';
	      iconAttributes.tabindex = tabindex;
	    }
	  } else {
	    iconAttributes['aria-hidden'] = true;
	  }

	  return iconAttributes;
	}

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	function _defineProperty$4(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function ownKeys$3(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$3(Object(source), true).forEach(function (key) {
	        _defineProperty$4(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$3(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$2(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties$2(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$2(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var Icon = /*#__PURE__*/React__default.forwardRef(function Icon(_ref, ref) {
	  var className = _ref.className,
	      children = _ref.children,
	      tabIndex = _ref.tabIndex,
	      rest = _objectWithoutProperties$2(_ref, ["className", "children", "tabIndex"]);

	  var _getAttributes = getAttributes(_objectSpread2$1(_objectSpread2$1({}, rest), {}, {
	    tabindex: tabIndex
	  })),
	      tabindex = _getAttributes.tabindex,
	      props = _objectWithoutProperties$2(_getAttributes, ["tabindex"]);

	  if (className) {
	    props.className = className;
	  }

	  if (tabindex !== undefined && tabindex !== null) {
	    props.tabIndex = tabindex;
	  }

	  if (ref) {
	    props.ref = ref;
	  }

	  return /*#__PURE__*/React__default.createElement('svg', props, children);
	});
	Icon.displayName = 'Icon';
	Icon.propTypes = {
	  'aria-hidden': PropTypes.string,
	  'aria-label': PropTypes.string,
	  'aria-labelledby': PropTypes.string,
	  className: PropTypes.string,
	  children: PropTypes.node,
	  height: PropTypes.number,
	  preserveAspectRatio: PropTypes.string,
	  tabIndex: PropTypes.string,
	  viewBox: PropTypes.string,
	  width: PropTypes.number,
	  xmlns: PropTypes.string
	};
	Icon.defaultProps = {
	  xmlns: 'http://www.w3.org/2000/svg',
	  preserveAspectRatio: 'xMidYMid meet'
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M11.8 2.8L10.8 3.8 16.2 9.3 1 9.3 1 10.7 16.2 10.7 10.8 16.2 11.8 17.2 19 10z"
	});

	var ArrowRight20 = /*#__PURE__*/React__default.forwardRef(function ArrowRight20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 20 20",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2, children);
	});

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Utility function to parse and decode text content.
	 * Strings can become encoded for various reasons.
	 * This utility decodes those strings.
	 *
	 * @param {string} str String to decode
	 * @returns {string} Final string with decoded characters
	 * @example
	 * import { decodeString } from '@carbon/ibmdotcom-utilities'
	 *
	 * const str = decodeString('https://www.ibm.com/search?lang=en&amp;cc=us&amp;q=cloud');
	 * console.log(str); // https://www.ibm.com/search?lang=en&cc=us&q=cloud
	 *
	 */
	function decodeString(str) {
	  var div = document.createElement('div');
	  div.innerHTML = str;
	  return div.textContent;
	}

	var stablePrefix$3 = settings$1.stablePrefix;
	var prefix$4 = settings_1.prefix;
	/**
	 * Horizontal Rule component.
	 */

	var HorizontalRule = function HorizontalRule(_ref) {
	  var _classnames;

	  var style = _ref.style,
	      size = _ref.size,
	      contrast = _ref.contrast,
	      weight = _ref.weight;
	  return React__default.createElement("hr", {
	    "data-autoid": "".concat(stablePrefix$3, "--hr"),
	    className: cx("".concat(prefix$4, "--hr"), (_classnames = {}, defineProperty(_classnames, "".concat(prefix$4, "--hr--").concat(style), style), defineProperty(_classnames, "".concat(prefix$4, "--hr--").concat(contrast), contrast), defineProperty(_classnames, "".concat(prefix$4, "--hr--").concat(size), size), defineProperty(_classnames, "".concat(prefix$4, "--hr--").concat(weight), weight), _classnames))
	  });
	};

	HorizontalRule.propTypes = {
	  /**
	   * Style of the HR. Choose from:
	   *
	   * | Name     | Description                                                                    |
	   * | -------- | ------------------------------------------------------------------------------ |
	   * | `solid`  | Default style variant of the horizontal rule                                   |
	   * | `dashed` | Dashed/dotted style variant (style is applied in conjuction with `fluid` size) |
	   */
	  style: PropTypes.oneOf(['solid', 'dashed']),

	  /**
	   * Length of the HR. Choose from:
	   *
	   * | Name     | Description                                                         |
	   * | -------- | ------------------------------------------------------------------- |
	   * | `fluid`  | Default size variant - horizontal rule takes full width of the grid |
	   * | `small`  | Shorter fixed-length variant with a max-width of 32px               |
	   * | `medium` | Medium fixed-length variant with a max-width of 48px                |
	   * | `large`  | Longer fixed-length variant with a max-width of 64px                |
	   */
	  size: PropTypes.oneOf(['fluid', 'small', 'medium', 'large']),

	  /**
	   * Contrast of the HR. Choose from:
	   *
	   * | Name              | Description                    |
	   * | ----------------- | ------------------------------ |
	   * | `medium-contrast` | Default contrast color variant |
	   * | `low-contrast`    | Lighter contrast color variant |
	   * | `high-contrast`   | Darker contrast color variant  |
	   */
	  contrast: PropTypes.oneOf(['medium-contrast', 'low-contrast', 'high-contrast']),

	  /**
	   * Weight of the HR. Choose from:
	   *
	   * | Name    | Description                                                                          |
	   * | ------- | ------------------------------------------------------------------------------------ |
	   * | `thin`  | Default weight variant                                                               |
	   * | `thick` | Slightly thicker weight variant (this only applied in conjunction with `fluid` size) |
	   */
	  weight: PropTypes.oneOf(['thin', 'thick'])
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$1 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M26,28H6a2,2,0,0,1-2-2V6A2,2,0,0,1,6,4h9V6H6V26H26V17h2v9A2,2,0,0,1,26,28Z"
	});

	var _ref3 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M21 2L21 4 26.59 4 18 12.59 19.41 14 28 5.41 28 11 30 11 30 2 21 2z"
	});

	var Launch20 = /*#__PURE__*/React__default.forwardRef(function Launch20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$1, _ref3, children);
	});

	function _objectWithoutPropertiesLoose$3(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$3;

	function _objectWithoutProperties$3(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var objectWithoutProperties = _objectWithoutProperties$3;

	function _extends$1() {
	  _extends$1 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$1.apply(this, arguments);
	}

	function _defineProperty$5(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$4(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$4(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$4(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$5 = settings_1.prefix;

	var Link = function Link(_ref) {
	  var _classnames;

	  var children = _ref.children,
	      className = _ref.className,
	      href = _ref.href,
	      disabled = _ref.disabled,
	      inline = _ref.inline,
	      visited = _ref.visited,
	      other = _objectWithoutProperties$4(_ref, ["children", "className", "href", "disabled", "inline", "visited"]);

	  var classNames = cx("".concat(prefix$5, "--link"), className, (_classnames = {}, _defineProperty$5(_classnames, "".concat(prefix$5, "--link--disabled"), disabled), _defineProperty$5(_classnames, "".concat(prefix$5, "--link--inline"), inline), _defineProperty$5(_classnames, "".concat(prefix$5, "--link--visited"), visited), _classnames));
	  var Tag = disabled ? 'p' : 'a';
	  return /*#__PURE__*/React__default.createElement(Tag, _extends$1({
	    href: disabled ? null : href,
	    className: classNames
	  }, other), children);
	};

	Link.propTypes = {
	  /**
	   * Provide the content for the Link
	   */
	  children: PropTypes.node,

	  /**
	   * Provide a custom className to be applied to the containing <a> node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide the `href` attribute for the <a> node
	   */
	  href: PropTypes.string,

	  /**
	   * Specify if the control should be disabled, or not
	   */
	  disabled: PropTypes.bool,

	  /**
	   * Specify whether you want the inline version of this control
	   */
	  inline: PropTypes.bool,

	  /**
	   * Specify whether you want the link to receive visited styles after the link has been clicked
	   */
	  visited: PropTypes.bool
	};

	var stablePrefix$4 = settings$1.stablePrefix;
	var prefix$6 = settings_1.prefix;
	/**
	 * LinkWithIcon component.
	 */

	var LinkWithIcon = function LinkWithIcon(_ref) {
	  var children = _ref.children,
	      customClassName = _ref.className,
	      href = _ref.href,
	      inverse = _ref.inverse,
	      iconPlacement = _ref.iconPlacement,
	      props = objectWithoutProperties(_ref, ["children", "className", "href", "inverse", "iconPlacement"]);

	  return React__default.createElement("div", {
	    className: cx("".concat(prefix$6, "--link-with-icon__container"), customClassName, defineProperty({}, "".concat(prefix$6, "--link-with-icon__container__inverse"), inverse)),
	    "data-autoid": "".concat(stablePrefix$4, "--link-with-icon")
	  }, React__default.createElement(Link, _extends_1({
	    tabIndex: 0,
	    href: href,
	    className: cx("".concat(prefix$6, "--link-with-icon"), defineProperty({}, "".concat(prefix$6, "--link-with-icon__icon-left"), iconPlacement === 'left'))
	  }, props), children));
	};

	LinkWithIcon.propTypes = {
	  /**
	   * Array containing Link text and icon elements.
	   */
	  children: PropTypes.arrayOf(PropTypes.node),

	  /**
	   * Url of link.
	   */
	  href: PropTypes.string,

	  /**
	   * Icon placement.
	   */
	  iconPlacement: PropTypes.oneOf(['left', 'right']),

	  /**
	   * Toggles inverse theming
	   */
	  inverse: PropTypes.bool,

	  /**
	   * custom classname
	   */
	  className: PropTypes.string
	};
	LinkWithIcon.defaultProps = {
	  children: [],
	  href: '',
	  iconPlacement: 'right'
	};

	var stablePrefix$5 = settings$1.stablePrefix;
	var prefix$7 = settings_1.prefix;
	/**
	 * Quote Pattern
	 *
	 * @param {object} props props Object
	 * @param {string} props.markType type of the quote marks
	 * @param {string} props.copy quote copy
	 * @param {object} props.source source object
	 * @param {string} props.source.heading name heading for quote source
	 * @param {string} props.source.copy title copy for quote source
	 * @param {object} props.cta cta props object
	 * @param {string} props.cta.copy cta copy
	 * @param {string} props.cta.type type 'local' or 'external'
	 * @param {string} props.cta.href cta href
	 * @param {boolean} props.inverse toggles inverse theme
	 * @returns {*} Quote Pattern
	 */

	var Quote = function Quote(_ref) {
	  var _ref$markType = _ref.markType,
	      markType = _ref$markType === void 0 ? 'doubleCurved' : _ref$markType,
	      copy = _ref.copy,
	      source = _ref.source,
	      cta = _ref.cta,
	      inverse = _ref.inverse;

	  var _useState = React.useState(''),
	      _useState2 = slicedToArray(_useState, 2),
	      decodedCopy = _useState2[0],
	      setDecodedCopy = _useState2[1];

	  React.useEffect(function () {
	    setDecodedCopy(decodeString(copy));
	  }, [copy]);
	  /**
	   * Render the Quote copy with the selected quote marks
	   *
	   * @returns {*} Blockquote with quote marks
	   */

	  var renderQuote = function renderQuote() {
	    switch (markType) {
	      case 'doubleCurved':
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
	          className: "".concat(prefix$7, "--quote__mark")
	        }, "\u201C"), React__default.createElement("blockquote", {
	          className: "".concat(prefix$7, "--quote__copy")
	        }, decodedCopy, "\u201D"));

	      case 'singleCurved':
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
	          className: "".concat(prefix$7, "--quote__mark")
	        }, "\u2018"), React__default.createElement("blockquote", {
	          className: "".concat(prefix$7, "--quote__copy")
	        }, decodedCopy, "\u2019"));

	      case 'doubleAngle':
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
	          className: "".concat(prefix$7, "--quote__mark")
	        }, "\xAB"), React__default.createElement("blockquote", {
	          className: "".concat(prefix$7, "--quote__copy")
	        }, decodedCopy, "\xBB"));

	      case 'singleAngle':
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
	          className: "".concat(prefix$7, "--quote__mark")
	        }, "\u2039"), React__default.createElement("blockquote", {
	          className: "".concat(prefix$7, "--quote__copy")
	        }, decodedCopy, "\u203A"));

	      case 'lowHighReversedDoubleCurved':
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
	          className: "".concat(prefix$7, "--quote__mark")
	        }, "\u201E"), React__default.createElement("blockquote", {
	          className: "".concat(prefix$7, "--quote__copy")
	        }, decodedCopy, "\u201C"));
	    }
	  };

	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$5, "--quote"),
	    className: cx("".concat(prefix$7, "--quote"), defineProperty({}, "".concat(prefix$7, "--quote__inverse"), inverse))
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$7, "--quote__container")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$7, "--quote__wrapper"),
	    "data-autoid": "".concat(stablePrefix$5, "--quote__copy")
	  }, renderQuote()), source && source.heading && source.copy ? React__default.createElement("div", {
	    className: "".concat(prefix$7, "--quote__source"),
	    "data-autoid": "".concat(stablePrefix$5, "--quote__source")
	  }, React__default.createElement("p", {
	    className: "".concat(prefix$7, "--quote__source-heading")
	  }, source.heading), React__default.createElement("p", {
	    className: "".concat(prefix$7, "--quote__source-body")
	  }, source.copy), source.copy2 && React__default.createElement("p", {
	    className: "".concat(prefix$7, "--quote__source-optional-copy")
	  }, source.copy2)) : false), cta ? React__default.createElement("div", {
	    className: "".concat(prefix$7, "--quote__footer")
	  }, React__default.createElement(HorizontalRule, null), React__default.createElement(LinkWithIcon, {
	    href: cta.href
	  }, React__default.createElement("span", null, cta.copy), cta.type === 'local' ? React__default.createElement(ArrowRight20, null) : false, cta.type === 'external' ? React__default.createElement(Launch20, null) : false)) : false);
	};

	Quote.propTypes = {
	  /**
	   * Type of the quote marks. Choose from:
	   *
	   * | Name                          | Description |
	   * | ----------------------------- | ----------- |
	   * | `singleCurved`                | ‘ ’         |
	   * | `doubleCurved`                | “ ”         |
	   * | `singleAngle`                 | ‹ ›         |
	   * | `doubleAngle`                 | « »         |
	   * | `lowHighReversedDoubleCurved` | „ “         |
	   */
	  markType: PropTypes.oneOf(['doubleCurved', 'singleCurved', 'doubleAngle', 'singleAngle', 'lowHighReversedDoubleCurved']),

	  /**
	   * Main Quote.
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * Source object. The structure is:
	   *
	   * | Name      | Required | Data Type | Default Value | Description                  |
	   * | --------- | -------- | --------- | ------------- | ---------------------------- |
	   * | `heading` | YES      | String    | null          | Source heading               |
	   * | `copy`    | YES      | String    | null          | Source body text             |
	   * | `copy2`   | NO       | String    | null          | Optional second line of copy |
	   */
	  source: PropTypes.shape({
	    heading: PropTypes.string.isRequired,
	    copy: PropTypes.string.isRequired,
	    copy2: PropTypes.string
	  }),

	  /**
	   * Object with a sub-scheme of CTA data.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    copy: PropTypes.string,
	    type: PropTypes.oneOf(['local', 'external']),
	    href: PropTypes.string
	  }),

	  /**
	   * `true` to use the invese colors.
	   */
	  inverse: PropTypes.bool
	};

	var stablePrefix$6 = settings$1.stablePrefix;
	var prefix$8 = settings_1.prefix;
	/**
	 * CalloutQuote component.
	 */

	var CalloutQuote = function CalloutQuote(_ref) {
	  var quote = _ref.quote;
	  return React__default.createElement("div", {
	    className: "".concat(prefix$8, "--callout-quote"),
	    "data-autoid": "".concat(stablePrefix$6, "--callout-quote")
	  }, React__default.createElement(Callout, null, React__default.createElement(Quote, _extends_1({}, quote, {
	    inverse: true
	  }))));
	};

	CalloutQuote.propTypes = {
	  /**
	   * Quote object.
	   * See [`<Quote>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-quote--default#props) for full usage details.
	   */
	  quote: PropTypes.shape({
	    markType: PropTypes.oneOf(['doubleCurved', 'singleCurved', 'doubleAngle', 'singleAngle', 'lowHighReversedDoubleCurved']),
	    copy: PropTypes.string.isRequired,
	    source: PropTypes.shape({
	      heading: PropTypes.string,
	      copy: PropTypes.string
	    }),
	    cta: PropTypes.shape({
	      copy: PropTypes.string,
	      type: PropTypes.oneOf(['local', 'external']),
	      href: PropTypes.string
	    }),
	    inverse: PropTypes.bool
	  })
	};

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var classCallCheck = _classCallCheck;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$2 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M24.59 16.59L17 24.17 17 2 15 2 15 24.17 7.41 16.59 6 18 16 28 26 18 24.59 16.59z"
	});

	var ArrowDown20 = /*#__PURE__*/React__default.forwardRef(function ArrowDown20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$2, children);
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$3 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M13 26L14.41 24.59 6.83 17 29 17 29 15 6.83 15 14.41 7.41 13 6 3 16 13 26z"
	});

	var ArrowLeft20 = /*#__PURE__*/React__default.forwardRef(function ArrowLeft20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$3, children);
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$4 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M26 15L24.59 13.59 17 21.17 17 2 15 2 15 21.17 7.41 13.59 6 15 16 25 26 15z"
	});

	var _ref3$1 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M26,24v4H6V24H4v4H4a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2h0V24Z"
	});

	var Download20 = /*#__PURE__*/React__default.forwardRef(function Download20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$4, _ref3$1, children);
	});

	var runtime_1 = createCommonjsModule(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};

	    IteratorPrototype[iteratorSymbol] = function () {
	      return this;
	    };

	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	    GeneratorFunctionPrototype.constructor = GeneratorFunction;
	    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        prototype[method] = function (arg) {
	          return this._invoke(method, arg);
	        };
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;

	        if (!(toStringTagSymbol in genFun)) {
	          genFun[toStringTagSymbol] = "GeneratorFunction";
	        }
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && _typeof_1(value) === "object" && hasOwn.call(value, "__await")) {
	            return Promise.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return Promise.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new Promise(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);

	    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	      return this;
	    };

	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList) {
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    Gp[iteratorSymbol] = function () {
	      return this;
	    };

	    Gp.toString = function () {
	      return "[object Generator]";
	    };

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	});

	var regenerator = runtime_1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	var asyncToGenerator = _asyncToGenerator;

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$5 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z"
	});

	var Close20 = /*#__PURE__*/React__default.forwardRef(function Close20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$5, children);
	});

	/**
	 * Adds or removes a CSS class to an element.
	 * @param {Element} element An element.
	 * @param {string} name A CSS class name.
	 * @param {boolean} add `true` to add the given CSS class to given the element. Otherwise to remove.
	 */
	function toggleClass(element, name, add) {
	  if (element.classList.contains(name) === !add) {
	    element.classList[add ? 'add' : 'remove'](name);
	  }
	}

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * @param {Function} name The name of the prop that must exist to validate
	 * the current prop.
	 * @param {Function} propType The original prop type checker.
	 * @returns {Function} The new prop type checker for the current prop that
	 * becomes required if the prop corresponding to the provided prop name exists.
	 */
	function requiredIfGivenPropIsTruthy(name, propType) {
	  return function check(props, propName, componentName) {
	    if ( props[name] == true && props[propName] == null) {
	      return new Error("You must provide a value for `".concat(propName, "` in `").concat(componentName, "` if `").concat(name, "` exists."));
	    }

	    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      rest[_key - 3] = arguments[_key];
	    }

	    return propType.apply(void 0, [props, propName, componentName].concat(rest));
	  };
	}

	var lodash_findlast = createCommonjsModule(function (module, exports) {
	  /**
	   * lodash (Custom Build) <https://lodash.com/>
	   * Build: `lodash modularize exports="npm" -o ./`
	   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	   * Released under MIT license <https://lodash.com/license>
	   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	   */

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	  /** Used as the `TypeError` message for "Functions" methods. */

	  var FUNC_ERROR_TEXT = 'Expected a function';
	  /** Used to stand-in for `undefined` hash values. */

	  var HASH_UNDEFINED = '__lodash_hash_undefined__';
	  /** Used to compose bitmasks for comparison styles. */

	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;
	  /** Used as references for various `Number` constants. */

	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;
	  /** `Object#toString` result references. */

	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]';
	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	  /** Used to match property names within property paths. */

	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      reLeadingDot = /^\./,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */

	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	  /** Used to match leading and trailing whitespace. */

	  var reTrim = /^\s+|\s+$/g;
	  /** Used to match backslashes in property paths. */

	  var reEscapeChar = /\\(\\)?/g;
	  /** Used to detect bad signed hexadecimal string values. */

	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	  /** Used to detect binary string values. */

	  var reIsBinary = /^0b[01]+$/i;
	  /** Used to detect host constructors (Safari). */

	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	  /** Used to detect octal string values. */

	  var reIsOctal = /^0o[0-7]+$/i;
	  /** Used to detect unsigned integer values. */

	  var reIsUint = /^(?:0|[1-9]\d*)$/;
	  /** Used to identify `toStringTag` values of typed arrays. */

	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	  /** Built-in method references without a dependency on `root`. */

	  var freeParseInt = parseInt;
	  /** Detect free variable `global` from Node.js. */

	  var freeGlobal = _typeof_1(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
	  /** Detect free variable `self`. */

	  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof_1(self)) == 'object' && self && self.Object === Object && self;
	  /** Used as a reference to the global object. */

	  var root = freeGlobal || freeSelf || Function('return this')();
	  /** Detect free variable `exports`. */

	  var freeExports =  exports && !exports.nodeType && exports;
	  /** Detect free variable `module`. */

	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
	  /** Detect the popular CommonJS extension `module.exports`. */

	  var moduleExports = freeModule && freeModule.exports === freeExports;
	  /** Detect free variable `process` from Node.js. */

	  var freeProcess = moduleExports && freeGlobal.process;
	  /** Used to access faster Node.js helpers. */

	  var nodeUtil = function () {
	    try {
	      return freeProcess && freeProcess.binding('util');
	    } catch (e) {}
	  }();
	  /* Node.js helper references. */


	  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */

	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array ? array.length : 0;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }

	    return false;
	  }
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */


	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while (fromRight ? index-- : ++index < length) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }

	    return -1;
	  }
	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */


	  function baseProperty(key) {
	    return function (object) {
	      return object == null ? undefined : object[key];
	    };
	  }
	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */


	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }

	    return result;
	  }
	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */


	  function baseUnary(func) {
	    return function (value) {
	      return func(value);
	    };
	  }
	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */


	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }
	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */


	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;

	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }

	    return result;
	  }
	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */


	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);
	    map.forEach(function (value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }
	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */


	  function overArg(func, transform) {
	    return function (arg) {
	      return func(transform(arg));
	    };
	  }
	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */


	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);
	    set.forEach(function (value) {
	      result[++index] = value;
	    });
	    return result;
	  }
	  /** Used for built-in method references. */


	  var arrayProto = Array.prototype,
	      funcProto = Function.prototype,
	      objectProto = Object.prototype;
	  /** Used to detect overreaching core-js shims. */

	  var coreJsData = root['__core-js_shared__'];
	  /** Used to detect methods masquerading as native. */

	  var maskSrcKey = function () {
	    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	    return uid ? 'Symbol(src)_1.' + uid : '';
	  }();
	  /** Used to resolve the decompiled source of functions. */


	  var funcToString = funcProto.toString;
	  /** Used to check objects for own properties. */

	  var hasOwnProperty = objectProto.hasOwnProperty;
	  /**
	   * Used to resolve the
	   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	   * of values.
	   */

	  var objectToString = objectProto.toString;
	  /** Used to detect if a method is native. */

	  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  /** Built-in value references. */

	  var _Symbol = root.Symbol,
	      Uint8Array = root.Uint8Array,
	      propertyIsEnumerable = objectProto.propertyIsEnumerable,
	      splice = arrayProto.splice;
	  /* Built-in method references for those with the same name as other `lodash` methods. */

	  var nativeKeys = overArg(Object.keys, Object),
	      nativeMax = Math.max,
	      nativeMin = Math.min;
	  /* Built-in method references that are verified to be native. */

	  var DataView = getNative(root, 'DataView'),
	      Map = getNative(root, 'Map'),
	      Promise = getNative(root, 'Promise'),
	      Set = getNative(root, 'Set'),
	      WeakMap = getNative(root, 'WeakMap'),
	      nativeCreate = getNative(Object, 'create');
	  /** Used to detect maps, sets, and weakmaps. */

	  var dataViewCtorString = toSource(DataView),
	      mapCtorString = toSource(Map),
	      promiseCtorString = toSource(Promise),
	      setCtorString = toSource(Set),
	      weakMapCtorString = toSource(WeakMap);
	  /** Used to convert symbols to primitives and strings. */

	  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	      symbolToString = symbolProto ? symbolProto.toString : undefined;
	  /**
	   * Creates a hash object.
	   *
	   * @private
	   * @constructor
	   * @param {Array} [entries] The key-value pairs to cache.
	   */

	  function Hash(entries) {
	    var index = -1,
	        length = entries ? entries.length : 0;
	    this.clear();

	    while (++index < length) {
	      var entry = entries[index];
	      this.set(entry[0], entry[1]);
	    }
	  }
	  /**
	   * Removes all key-value entries from the hash.
	   *
	   * @private
	   * @name clear
	   * @memberOf Hash
	   */


	  function hashClear() {
	    this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  }
	  /**
	   * Removes `key` and its value from the hash.
	   *
	   * @private
	   * @name delete
	   * @memberOf Hash
	   * @param {Object} hash The hash to modify.
	   * @param {string} key The key of the value to remove.
	   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	   */


	  function hashDelete(key) {
	    return this.has(key) && delete this.__data__[key];
	  }
	  /**
	   * Gets the hash value for `key`.
	   *
	   * @private
	   * @name get
	   * @memberOf Hash
	   * @param {string} key The key of the value to get.
	   * @returns {*} Returns the entry value.
	   */


	  function hashGet(key) {
	    var data = this.__data__;

	    if (nativeCreate) {
	      var result = data[key];
	      return result === HASH_UNDEFINED ? undefined : result;
	    }

	    return hasOwnProperty.call(data, key) ? data[key] : undefined;
	  }
	  /**
	   * Checks if a hash value for `key` exists.
	   *
	   * @private
	   * @name has
	   * @memberOf Hash
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */


	  function hashHas(key) {
	    var data = this.__data__;
	    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	  }
	  /**
	   * Sets the hash `key` to `value`.
	   *
	   * @private
	   * @name set
	   * @memberOf Hash
	   * @param {string} key The key of the value to set.
	   * @param {*} value The value to set.
	   * @returns {Object} Returns the hash instance.
	   */


	  function hashSet(key, value) {
	    var data = this.__data__;
	    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	    return this;
	  } // Add methods to `Hash`.


	  Hash.prototype.clear = hashClear;
	  Hash.prototype['delete'] = hashDelete;
	  Hash.prototype.get = hashGet;
	  Hash.prototype.has = hashHas;
	  Hash.prototype.set = hashSet;
	  /**
	   * Creates an list cache object.
	   *
	   * @private
	   * @constructor
	   * @param {Array} [entries] The key-value pairs to cache.
	   */

	  function ListCache(entries) {
	    var index = -1,
	        length = entries ? entries.length : 0;
	    this.clear();

	    while (++index < length) {
	      var entry = entries[index];
	      this.set(entry[0], entry[1]);
	    }
	  }
	  /**
	   * Removes all key-value entries from the list cache.
	   *
	   * @private
	   * @name clear
	   * @memberOf ListCache
	   */


	  function listCacheClear() {
	    this.__data__ = [];
	  }
	  /**
	   * Removes `key` and its value from the list cache.
	   *
	   * @private
	   * @name delete
	   * @memberOf ListCache
	   * @param {string} key The key of the value to remove.
	   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	   */


	  function listCacheDelete(key) {
	    var data = this.__data__,
	        index = assocIndexOf(data, key);

	    if (index < 0) {
	      return false;
	    }

	    var lastIndex = data.length - 1;

	    if (index == lastIndex) {
	      data.pop();
	    } else {
	      splice.call(data, index, 1);
	    }

	    return true;
	  }
	  /**
	   * Gets the list cache value for `key`.
	   *
	   * @private
	   * @name get
	   * @memberOf ListCache
	   * @param {string} key The key of the value to get.
	   * @returns {*} Returns the entry value.
	   */


	  function listCacheGet(key) {
	    var data = this.__data__,
	        index = assocIndexOf(data, key);
	    return index < 0 ? undefined : data[index][1];
	  }
	  /**
	   * Checks if a list cache value for `key` exists.
	   *
	   * @private
	   * @name has
	   * @memberOf ListCache
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */


	  function listCacheHas(key) {
	    return assocIndexOf(this.__data__, key) > -1;
	  }
	  /**
	   * Sets the list cache `key` to `value`.
	   *
	   * @private
	   * @name set
	   * @memberOf ListCache
	   * @param {string} key The key of the value to set.
	   * @param {*} value The value to set.
	   * @returns {Object} Returns the list cache instance.
	   */


	  function listCacheSet(key, value) {
	    var data = this.__data__,
	        index = assocIndexOf(data, key);

	    if (index < 0) {
	      data.push([key, value]);
	    } else {
	      data[index][1] = value;
	    }

	    return this;
	  } // Add methods to `ListCache`.


	  ListCache.prototype.clear = listCacheClear;
	  ListCache.prototype['delete'] = listCacheDelete;
	  ListCache.prototype.get = listCacheGet;
	  ListCache.prototype.has = listCacheHas;
	  ListCache.prototype.set = listCacheSet;
	  /**
	   * Creates a map cache object to store key-value pairs.
	   *
	   * @private
	   * @constructor
	   * @param {Array} [entries] The key-value pairs to cache.
	   */

	  function MapCache(entries) {
	    var index = -1,
	        length = entries ? entries.length : 0;
	    this.clear();

	    while (++index < length) {
	      var entry = entries[index];
	      this.set(entry[0], entry[1]);
	    }
	  }
	  /**
	   * Removes all key-value entries from the map.
	   *
	   * @private
	   * @name clear
	   * @memberOf MapCache
	   */


	  function mapCacheClear() {
	    this.__data__ = {
	      'hash': new Hash(),
	      'map': new (Map || ListCache)(),
	      'string': new Hash()
	    };
	  }
	  /**
	   * Removes `key` and its value from the map.
	   *
	   * @private
	   * @name delete
	   * @memberOf MapCache
	   * @param {string} key The key of the value to remove.
	   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	   */


	  function mapCacheDelete(key) {
	    return getMapData(this, key)['delete'](key);
	  }
	  /**
	   * Gets the map value for `key`.
	   *
	   * @private
	   * @name get
	   * @memberOf MapCache
	   * @param {string} key The key of the value to get.
	   * @returns {*} Returns the entry value.
	   */


	  function mapCacheGet(key) {
	    return getMapData(this, key).get(key);
	  }
	  /**
	   * Checks if a map value for `key` exists.
	   *
	   * @private
	   * @name has
	   * @memberOf MapCache
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */


	  function mapCacheHas(key) {
	    return getMapData(this, key).has(key);
	  }
	  /**
	   * Sets the map `key` to `value`.
	   *
	   * @private
	   * @name set
	   * @memberOf MapCache
	   * @param {string} key The key of the value to set.
	   * @param {*} value The value to set.
	   * @returns {Object} Returns the map cache instance.
	   */


	  function mapCacheSet(key, value) {
	    getMapData(this, key).set(key, value);
	    return this;
	  } // Add methods to `MapCache`.


	  MapCache.prototype.clear = mapCacheClear;
	  MapCache.prototype['delete'] = mapCacheDelete;
	  MapCache.prototype.get = mapCacheGet;
	  MapCache.prototype.has = mapCacheHas;
	  MapCache.prototype.set = mapCacheSet;
	  /**
	   *
	   * Creates an array cache object to store unique values.
	   *
	   * @private
	   * @constructor
	   * @param {Array} [values] The values to cache.
	   */

	  function SetCache(values) {
	    var index = -1,
	        length = values ? values.length : 0;
	    this.__data__ = new MapCache();

	    while (++index < length) {
	      this.add(values[index]);
	    }
	  }
	  /**
	   * Adds `value` to the array cache.
	   *
	   * @private
	   * @name add
	   * @memberOf SetCache
	   * @alias push
	   * @param {*} value The value to cache.
	   * @returns {Object} Returns the cache instance.
	   */


	  function setCacheAdd(value) {
	    this.__data__.set(value, HASH_UNDEFINED);

	    return this;
	  }
	  /**
	   * Checks if `value` is in the array cache.
	   *
	   * @private
	   * @name has
	   * @memberOf SetCache
	   * @param {*} value The value to search for.
	   * @returns {number} Returns `true` if `value` is found, else `false`.
	   */


	  function setCacheHas(value) {
	    return this.__data__.has(value);
	  } // Add methods to `SetCache`.


	  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	  SetCache.prototype.has = setCacheHas;
	  /**
	   * Creates a stack cache object to store key-value pairs.
	   *
	   * @private
	   * @constructor
	   * @param {Array} [entries] The key-value pairs to cache.
	   */

	  function Stack(entries) {
	    this.__data__ = new ListCache(entries);
	  }
	  /**
	   * Removes all key-value entries from the stack.
	   *
	   * @private
	   * @name clear
	   * @memberOf Stack
	   */


	  function stackClear() {
	    this.__data__ = new ListCache();
	  }
	  /**
	   * Removes `key` and its value from the stack.
	   *
	   * @private
	   * @name delete
	   * @memberOf Stack
	   * @param {string} key The key of the value to remove.
	   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	   */


	  function stackDelete(key) {
	    return this.__data__['delete'](key);
	  }
	  /**
	   * Gets the stack value for `key`.
	   *
	   * @private
	   * @name get
	   * @memberOf Stack
	   * @param {string} key The key of the value to get.
	   * @returns {*} Returns the entry value.
	   */


	  function stackGet(key) {
	    return this.__data__.get(key);
	  }
	  /**
	   * Checks if a stack value for `key` exists.
	   *
	   * @private
	   * @name has
	   * @memberOf Stack
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */


	  function stackHas(key) {
	    return this.__data__.has(key);
	  }
	  /**
	   * Sets the stack `key` to `value`.
	   *
	   * @private
	   * @name set
	   * @memberOf Stack
	   * @param {string} key The key of the value to set.
	   * @param {*} value The value to set.
	   * @returns {Object} Returns the stack cache instance.
	   */


	  function stackSet(key, value) {
	    var cache = this.__data__;

	    if (cache instanceof ListCache) {
	      var pairs = cache.__data__;

	      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	        pairs.push([key, value]);
	        return this;
	      }

	      cache = this.__data__ = new MapCache(pairs);
	    }

	    cache.set(key, value);
	    return this;
	  } // Add methods to `Stack`.


	  Stack.prototype.clear = stackClear;
	  Stack.prototype['delete'] = stackDelete;
	  Stack.prototype.get = stackGet;
	  Stack.prototype.has = stackHas;
	  Stack.prototype.set = stackSet;
	  /**
	   * Creates an array of the enumerable property names of the array-like `value`.
	   *
	   * @private
	   * @param {*} value The value to query.
	   * @param {boolean} inherited Specify returning inherited property names.
	   * @returns {Array} Returns the array of property names.
	   */

	  function arrayLikeKeys(value, inherited) {
	    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	    // Safari 9 makes `arguments.length` enumerable in strict mode.
	    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
	    var length = result.length,
	        skipIndexes = !!length;

	    for (var key in value) {
	      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	        result.push(key);
	      }
	    }

	    return result;
	  }
	  /**
	   * Gets the index at which the `key` is found in `array` of key-value pairs.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} key The key to search for.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */


	  function assocIndexOf(array, key) {
	    var length = array.length;

	    while (length--) {
	      if (eq(array[length][0], key)) {
	        return length;
	      }
	    }

	    return -1;
	  }
	  /**
	   * The base implementation of `_.get` without support for default values.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array|string} path The path of the property to get.
	   * @returns {*} Returns the resolved value.
	   */


	  function baseGet(object, path) {
	    path = isKey(path, object) ? [path] : castPath(path);
	    var index = 0,
	        length = path.length;

	    while (object != null && index < length) {
	      object = object[toKey(path[index++])];
	    }

	    return index && index == length ? object : undefined;
	  }
	  /**
	   * The base implementation of `getTag`.
	   *
	   * @private
	   * @param {*} value The value to query.
	   * @returns {string} Returns the `toStringTag`.
	   */


	  function baseGetTag(value) {
	    return objectToString.call(value);
	  }
	  /**
	   * The base implementation of `_.hasIn` without support for deep paths.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {Array|string} key The key to check.
	   * @returns {boolean} Returns `true` if `key` exists, else `false`.
	   */


	  function baseHasIn(object, key) {
	    return object != null && key in Object(object);
	  }
	  /**
	   * The base implementation of `_.isEqual` which supports partial comparisons
	   * and tracks traversed objects.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @param {Function} [customizer] The function to customize comparisons.
	   * @param {boolean} [bitmask] The bitmask of comparison flags.
	   *  The bitmask may be composed of the following flags:
	   *     1 - Unordered comparison
	   *     2 - Partial comparison
	   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	   */


	  function baseIsEqual(value, other, customizer, bitmask, stack) {
	    if (value === other) {
	      return true;
	    }

	    if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
	      return value !== value && other !== other;
	    }

	    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	  }
	  /**
	   * A specialized version of `baseIsEqual` for arrays and objects which performs
	   * deep comparisons and tracks traversed objects enabling objects with circular
	   * references to be compared.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {Function} equalFunc The function to determine equivalents of values.
	   * @param {Function} [customizer] The function to customize comparisons.
	   * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	   *  for more details.
	   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	   */


	  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	    var objIsArr = isArray(object),
	        othIsArr = isArray(other),
	        objTag = arrayTag,
	        othTag = arrayTag;

	    if (!objIsArr) {
	      objTag = getTag(object);
	      objTag = objTag == argsTag ? objectTag : objTag;
	    }

	    if (!othIsArr) {
	      othTag = getTag(other);
	      othTag = othTag == argsTag ? objectTag : othTag;
	    }

	    var objIsObj = objTag == objectTag && !isHostObject(object),
	        othIsObj = othTag == objectTag && !isHostObject(other),
	        isSameTag = objTag == othTag;

	    if (isSameTag && !objIsObj) {
	      stack || (stack = new Stack());
	      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	    }

	    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	      if (objIsWrapped || othIsWrapped) {
	        var objUnwrapped = objIsWrapped ? object.value() : object,
	            othUnwrapped = othIsWrapped ? other.value() : other;
	        stack || (stack = new Stack());
	        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	      }
	    }

	    if (!isSameTag) {
	      return false;
	    }

	    stack || (stack = new Stack());
	    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	  }
	  /**
	   * The base implementation of `_.isMatch` without support for iteratee shorthands.
	   *
	   * @private
	   * @param {Object} object The object to inspect.
	   * @param {Object} source The object of property values to match.
	   * @param {Array} matchData The property names, values, and compare flags to match.
	   * @param {Function} [customizer] The function to customize comparisons.
	   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	   */


	  function baseIsMatch(object, source, matchData, customizer) {
	    var index = matchData.length,
	        length = index,
	        noCustomizer = !customizer;

	    if (object == null) {
	      return !length;
	    }

	    object = Object(object);

	    while (index--) {
	      var data = matchData[index];

	      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
	        return false;
	      }
	    }

	    while (++index < length) {
	      data = matchData[index];
	      var key = data[0],
	          objValue = object[key],
	          srcValue = data[1];

	      if (noCustomizer && data[2]) {
	        if (objValue === undefined && !(key in object)) {
	          return false;
	        }
	      } else {
	        var stack = new Stack();

	        if (customizer) {
	          var result = customizer(objValue, srcValue, key, object, source, stack);
	        }

	        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
	          return false;
	        }
	      }
	    }

	    return true;
	  }
	  /**
	   * The base implementation of `_.isNative` without bad shim checks.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a native function,
	   *  else `false`.
	   */


	  function baseIsNative(value) {
	    if (!isObject(value) || isMasked(value)) {
	      return false;
	    }

	    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
	    return pattern.test(toSource(value));
	  }
	  /**
	   * The base implementation of `_.isTypedArray` without Node.js optimizations.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	   */


	  function baseIsTypedArray(value) {
	    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	  }
	  /**
	   * The base implementation of `_.iteratee`.
	   *
	   * @private
	   * @param {*} [value=_.identity] The value to convert to an iteratee.
	   * @returns {Function} Returns the iteratee.
	   */


	  function baseIteratee(value) {
	    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	    if (typeof value == 'function') {
	      return value;
	    }

	    if (value == null) {
	      return identity;
	    }

	    if (_typeof_1(value) == 'object') {
	      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
	    }

	    return property(value);
	  }
	  /**
	   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Array} Returns the array of property names.
	   */


	  function baseKeys(object) {
	    if (!isPrototype(object)) {
	      return nativeKeys(object);
	    }

	    var result = [];

	    for (var key in Object(object)) {
	      if (hasOwnProperty.call(object, key) && key != 'constructor') {
	        result.push(key);
	      }
	    }

	    return result;
	  }
	  /**
	   * The base implementation of `_.matches` which doesn't clone `source`.
	   *
	   * @private
	   * @param {Object} source The object of property values to match.
	   * @returns {Function} Returns the new spec function.
	   */


	  function baseMatches(source) {
	    var matchData = getMatchData(source);

	    if (matchData.length == 1 && matchData[0][2]) {
	      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	    }

	    return function (object) {
	      return object === source || baseIsMatch(object, source, matchData);
	    };
	  }
	  /**
	   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	   *
	   * @private
	   * @param {string} path The path of the property to get.
	   * @param {*} srcValue The value to match.
	   * @returns {Function} Returns the new spec function.
	   */


	  function baseMatchesProperty(path, srcValue) {
	    if (isKey(path) && isStrictComparable(srcValue)) {
	      return matchesStrictComparable(toKey(path), srcValue);
	    }

	    return function (object) {
	      var objValue = get(object, path);
	      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	    };
	  }
	  /**
	   * A specialized version of `baseProperty` which supports deep paths.
	   *
	   * @private
	   * @param {Array|string} path The path of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */


	  function basePropertyDeep(path) {
	    return function (object) {
	      return baseGet(object, path);
	    };
	  }
	  /**
	   * The base implementation of `_.toString` which doesn't convert nullish
	   * values to empty strings.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */


	  function baseToString(value) {
	    // Exit early for strings to avoid a performance hit in some environments.
	    if (typeof value == 'string') {
	      return value;
	    }

	    if (isSymbol(value)) {
	      return symbolToString ? symbolToString.call(value) : '';
	    }

	    var result = value + '';
	    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	  }
	  /**
	   * Casts `value` to a path array if it's not one.
	   *
	   * @private
	   * @param {*} value The value to inspect.
	   * @returns {Array} Returns the cast property path array.
	   */


	  function castPath(value) {
	    return isArray(value) ? value : stringToPath(value);
	  }
	  /**
	   * Creates a `_.find` or `_.findLast` function.
	   *
	   * @private
	   * @param {Function} findIndexFunc The function to find the collection index.
	   * @returns {Function} Returns the new find function.
	   */


	  function createFind(findIndexFunc) {
	    return function (collection, predicate, fromIndex) {
	      var iterable = Object(collection);

	      if (!isArrayLike(collection)) {
	        var iteratee = baseIteratee(predicate);
	        collection = keys(collection);

	        predicate = function predicate(key) {
	          return iteratee(iterable[key], key, iterable);
	        };
	      }

	      var index = findIndexFunc(collection, predicate, fromIndex);
	      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	    };
	  }
	  /**
	   * A specialized version of `baseIsEqualDeep` for arrays with support for
	   * partial deep comparisons.
	   *
	   * @private
	   * @param {Array} array The array to compare.
	   * @param {Array} other The other array to compare.
	   * @param {Function} equalFunc The function to determine equivalents of values.
	   * @param {Function} customizer The function to customize comparisons.
	   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	   *  for more details.
	   * @param {Object} stack Tracks traversed `array` and `other` objects.
	   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	   */


	  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	        arrLength = array.length,
	        othLength = other.length;

	    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	      return false;
	    } // Assume cyclic values are equal.


	    var stacked = stack.get(array);

	    if (stacked && stack.get(other)) {
	      return stacked == other;
	    }

	    var index = -1,
	        result = true,
	        seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;
	    stack.set(array, other);
	    stack.set(other, array); // Ignore non-index properties.

	    while (++index < arrLength) {
	      var arrValue = array[index],
	          othValue = other[index];

	      if (customizer) {
	        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	      }

	      if (compared !== undefined) {
	        if (compared) {
	          continue;
	        }

	        result = false;
	        break;
	      } // Recursively compare arrays (susceptible to call stack limits).


	      if (seen) {
	        if (!arraySome(other, function (othValue, othIndex) {
	          if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	            return seen.add(othIndex);
	          }
	        })) {
	          result = false;
	          break;
	        }
	      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	        result = false;
	        break;
	      }
	    }

	    stack['delete'](array);
	    stack['delete'](other);
	    return result;
	  }
	  /**
	   * A specialized version of `baseIsEqualDeep` for comparing objects of
	   * the same `toStringTag`.
	   *
	   * **Note:** This function only supports comparing values with tags of
	   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {string} tag The `toStringTag` of the objects to compare.
	   * @param {Function} equalFunc The function to determine equivalents of values.
	   * @param {Function} customizer The function to customize comparisons.
	   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	   *  for more details.
	   * @param {Object} stack Tracks traversed `object` and `other` objects.
	   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	   */


	  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	    switch (tag) {
	      case dataViewTag:
	        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	          return false;
	        }

	        object = object.buffer;
	        other = other.buffer;

	      case arrayBufferTag:
	        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	          return false;
	        }

	        return true;

	      case boolTag:
	      case dateTag:
	      case numberTag:
	        // Coerce booleans to `1` or `0` and dates to milliseconds.
	        // Invalid dates are coerced to `NaN`.
	        return eq(+object, +other);

	      case errorTag:
	        return object.name == other.name && object.message == other.message;

	      case regexpTag:
	      case stringTag:
	        // Coerce regexes to strings and treat strings, primitives and objects,
	        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	        // for more details.
	        return object == other + '';

	      case mapTag:
	        var convert = mapToArray;

	      case setTag:
	        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	        convert || (convert = setToArray);

	        if (object.size != other.size && !isPartial) {
	          return false;
	        } // Assume cyclic values are equal.


	        var stacked = stack.get(object);

	        if (stacked) {
	          return stacked == other;
	        }

	        bitmask |= UNORDERED_COMPARE_FLAG; // Recursively compare objects (susceptible to call stack limits).

	        stack.set(object, other);
	        var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	        stack['delete'](object);
	        return result;

	      case symbolTag:
	        if (symbolValueOf) {
	          return symbolValueOf.call(object) == symbolValueOf.call(other);
	        }

	    }

	    return false;
	  }
	  /**
	   * A specialized version of `baseIsEqualDeep` for objects with support for
	   * partial deep comparisons.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {Function} equalFunc The function to determine equivalents of values.
	   * @param {Function} customizer The function to customize comparisons.
	   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	   *  for more details.
	   * @param {Object} stack Tracks traversed `object` and `other` objects.
	   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	   */


	  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	        objProps = keys(object),
	        objLength = objProps.length,
	        othProps = keys(other),
	        othLength = othProps.length;

	    if (objLength != othLength && !isPartial) {
	      return false;
	    }

	    var index = objLength;

	    while (index--) {
	      var key = objProps[index];

	      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	        return false;
	      }
	    } // Assume cyclic values are equal.


	    var stacked = stack.get(object);

	    if (stacked && stack.get(other)) {
	      return stacked == other;
	    }

	    var result = true;
	    stack.set(object, other);
	    stack.set(other, object);
	    var skipCtor = isPartial;

	    while (++index < objLength) {
	      key = objProps[index];
	      var objValue = object[key],
	          othValue = other[key];

	      if (customizer) {
	        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	      } // Recursively compare objects (susceptible to call stack limits).


	      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
	        result = false;
	        break;
	      }

	      skipCtor || (skipCtor = key == 'constructor');
	    }

	    if (result && !skipCtor) {
	      var objCtor = object.constructor,
	          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

	      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	        result = false;
	      }
	    }

	    stack['delete'](object);
	    stack['delete'](other);
	    return result;
	  }
	  /**
	   * Gets the data for `map`.
	   *
	   * @private
	   * @param {Object} map The map to query.
	   * @param {string} key The reference key.
	   * @returns {*} Returns the map data.
	   */


	  function getMapData(map, key) {
	    var data = map.__data__;
	    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	  }
	  /**
	   * Gets the property names, values, and compare flags of `object`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Array} Returns the match data of `object`.
	   */


	  function getMatchData(object) {
	    var result = keys(object),
	        length = result.length;

	    while (length--) {
	      var key = result[length],
	          value = object[key];
	      result[length] = [key, value, isStrictComparable(value)];
	    }

	    return result;
	  }
	  /**
	   * Gets the native function at `key` of `object`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {string} key The key of the method to get.
	   * @returns {*} Returns the function if it's native, else `undefined`.
	   */


	  function getNative(object, key) {
	    var value = getValue(object, key);
	    return baseIsNative(value) ? value : undefined;
	  }
	  /**
	   * Gets the `toStringTag` of `value`.
	   *
	   * @private
	   * @param {*} value The value to query.
	   * @returns {string} Returns the `toStringTag`.
	   */


	  var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11,
	  // for data views in Edge < 14, and promises in Node.js.

	  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	    getTag = function getTag(value) {
	      var result = objectToString.call(value),
	          Ctor = result == objectTag ? value.constructor : undefined,
	          ctorString = Ctor ? toSource(Ctor) : undefined;

	      if (ctorString) {
	        switch (ctorString) {
	          case dataViewCtorString:
	            return dataViewTag;

	          case mapCtorString:
	            return mapTag;

	          case promiseCtorString:
	            return promiseTag;

	          case setCtorString:
	            return setTag;

	          case weakMapCtorString:
	            return weakMapTag;
	        }
	      }

	      return result;
	    };
	  }
	  /**
	   * Checks if `path` exists on `object`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array|string} path The path to check.
	   * @param {Function} hasFunc The function to check properties.
	   * @returns {boolean} Returns `true` if `path` exists, else `false`.
	   */


	  function hasPath(object, path, hasFunc) {
	    path = isKey(path, object) ? [path] : castPath(path);
	    var result,
	        index = -1,
	        length = path.length;

	    while (++index < length) {
	      var key = toKey(path[index]);

	      if (!(result = object != null && hasFunc(object, key))) {
	        break;
	      }

	      object = object[key];
	    }

	    if (result) {
	      return result;
	    }

	    var length = object ? object.length : 0;
	    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
	  }
	  /**
	   * Checks if `value` is a valid array-like index.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	   */


	  function isIndex(value, length) {
	    length = length == null ? MAX_SAFE_INTEGER : length;
	    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	  }
	  /**
	   * Checks if `value` is a property name and not a property path.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {Object} [object] The object to query keys on.
	   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	   */


	  function isKey(value, object) {
	    if (isArray(value)) {
	      return false;
	    }

	    var type = _typeof_1(value);

	    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
	      return true;
	    }

	    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	  }
	  /**
	   * Checks if `value` is suitable for use as unique object key.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	   */


	  function isKeyable(value) {
	    var type = _typeof_1(value);

	    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	  }
	  /**
	   * Checks if `func` has its source masked.
	   *
	   * @private
	   * @param {Function} func The function to check.
	   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	   */


	  function isMasked(func) {
	    return !!maskSrcKey && maskSrcKey in func;
	  }
	  /**
	   * Checks if `value` is likely a prototype object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	   */


	  function isPrototype(value) {
	    var Ctor = value && value.constructor,
	        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
	    return value === proto;
	  }
	  /**
	   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` if suitable for strict
	   *  equality comparisons, else `false`.
	   */


	  function isStrictComparable(value) {
	    return value === value && !isObject(value);
	  }
	  /**
	   * A specialized version of `matchesProperty` for source values suitable
	   * for strict equality comparisons, i.e. `===`.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @param {*} srcValue The value to match.
	   * @returns {Function} Returns the new spec function.
	   */


	  function matchesStrictComparable(key, srcValue) {
	    return function (object) {
	      if (object == null) {
	        return false;
	      }

	      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
	    };
	  }
	  /**
	   * Converts `string` to a property path array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the property path array.
	   */


	  var stringToPath = memoize(function (string) {
	    string = toString(string);
	    var result = [];

	    if (reLeadingDot.test(string)) {
	      result.push('');
	    }

	    string.replace(rePropName, function (match, number, quote, string) {
	      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
	    });
	    return result;
	  });
	  /**
	   * Converts `value` to a string key if it's not a string or symbol.
	   *
	   * @private
	   * @param {*} value The value to inspect.
	   * @returns {string|symbol} Returns the key.
	   */

	  function toKey(value) {
	    if (typeof value == 'string' || isSymbol(value)) {
	      return value;
	    }

	    var result = value + '';
	    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	  }
	  /**
	   * Converts `func` to its source code.
	   *
	   * @private
	   * @param {Function} func The function to process.
	   * @returns {string} Returns the source code.
	   */


	  function toSource(func) {
	    if (func != null) {
	      try {
	        return funcToString.call(func);
	      } catch (e) {}

	      try {
	        return func + '';
	      } catch (e) {}
	    }

	    return '';
	  }
	  /**
	   * This method is like `_.findIndex` except that it iterates over elements
	   * of `collection` from right to left.
	   *
	   * @static
	   * @memberOf _
	   * @since 2.0.0
	   * @category Array
	   * @param {Array} array The array to inspect.
	   * @param {Function} [predicate=_.identity]
	   *  The function invoked per iteration.
	   * @param {number} [fromIndex=array.length-1] The index to search from.
	   * @returns {number} Returns the index of the found element, else `-1`.
	   * @example
	   *
	   * var users = [
	   *   { 'user': 'barney',  'active': true },
	   *   { 'user': 'fred',    'active': false },
	   *   { 'user': 'pebbles', 'active': false }
	   * ];
	   *
	   * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	   * // => 2
	   *
	   * // The `_.matches` iteratee shorthand.
	   * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	   * // => 0
	   *
	   * // The `_.matchesProperty` iteratee shorthand.
	   * _.findLastIndex(users, ['active', false]);
	   * // => 2
	   *
	   * // The `_.property` iteratee shorthand.
	   * _.findLastIndex(users, 'active');
	   * // => 0
	   */


	  function findLastIndex(array, predicate, fromIndex) {
	    var length = array ? array.length : 0;

	    if (!length) {
	      return -1;
	    }

	    var index = length - 1;

	    if (fromIndex !== undefined) {
	      index = toInteger(fromIndex);
	      index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	    }

	    return baseFindIndex(array, baseIteratee(predicate), index, true);
	  }
	  /**
	   * This method is like `_.find` except that it iterates over elements of
	   * `collection` from right to left.
	   *
	   * @static
	   * @memberOf _
	   * @since 2.0.0
	   * @category Collection
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} [predicate=_.identity]
	   *  The function invoked per iteration.
	   * @param {number} [fromIndex=collection.length-1] The index to search from.
	   * @returns {*} Returns the matched element, else `undefined`.
	   * @example
	   *
	   * _.findLast([1, 2, 3, 4], function(n) {
	   *   return n % 2 == 1;
	   * });
	   * // => 3
	   */


	  var findLast = createFind(findLastIndex);
	  /**
	   * Creates a function that memoizes the result of `func`. If `resolver` is
	   * provided, it determines the cache key for storing the result based on the
	   * arguments provided to the memoized function. By default, the first argument
	   * provided to the memoized function is used as the map cache key. The `func`
	   * is invoked with the `this` binding of the memoized function.
	   *
	   * **Note:** The cache is exposed as the `cache` property on the memoized
	   * function. Its creation may be customized by replacing the `_.memoize.Cache`
	   * constructor with one whose instances implement the
	   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	   * method interface of `delete`, `get`, `has`, and `set`.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Function
	   * @param {Function} func The function to have its output memoized.
	   * @param {Function} [resolver] The function to resolve the cache key.
	   * @returns {Function} Returns the new memoized function.
	   * @example
	   *
	   * var object = { 'a': 1, 'b': 2 };
	   * var other = { 'c': 3, 'd': 4 };
	   *
	   * var values = _.memoize(_.values);
	   * values(object);
	   * // => [1, 2]
	   *
	   * values(other);
	   * // => [3, 4]
	   *
	   * object.a = 2;
	   * values(object);
	   * // => [1, 2]
	   *
	   * // Modify the result cache.
	   * values.cache.set(object, ['a', 'b']);
	   * values(object);
	   * // => ['a', 'b']
	   *
	   * // Replace `_.memoize.Cache`.
	   * _.memoize.Cache = WeakMap;
	   */

	  function memoize(func, resolver) {
	    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
	      throw new TypeError(FUNC_ERROR_TEXT);
	    }

	    var memoized = function memoized() {
	      var args = arguments,
	          key = resolver ? resolver.apply(this, args) : args[0],
	          cache = memoized.cache;

	      if (cache.has(key)) {
	        return cache.get(key);
	      }

	      var result = func.apply(this, args);
	      memoized.cache = cache.set(key, result);
	      return result;
	    };

	    memoized.cache = new (memoize.Cache || MapCache)();
	    return memoized;
	  } // Assign cache to `_.memoize`.


	  memoize.Cache = MapCache;
	  /**
	   * Performs a
	   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	   * comparison between two values to determine if they are equivalent.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	   * @example
	   *
	   * var object = { 'a': 1 };
	   * var other = { 'a': 1 };
	   *
	   * _.eq(object, object);
	   * // => true
	   *
	   * _.eq(object, other);
	   * // => false
	   *
	   * _.eq('a', 'a');
	   * // => true
	   *
	   * _.eq('a', Object('a'));
	   * // => false
	   *
	   * _.eq(NaN, NaN);
	   * // => true
	   */

	  function eq(value, other) {
	    return value === other || value !== value && other !== other;
	  }
	  /**
	   * Checks if `value` is likely an `arguments` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	   *  else `false`.
	   * @example
	   *
	   * _.isArguments(function() { return arguments; }());
	   * // => true
	   *
	   * _.isArguments([1, 2, 3]);
	   * // => false
	   */


	  function isArguments(value) {
	    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	  }
	  /**
	   * Checks if `value` is classified as an `Array` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	   * @example
	   *
	   * _.isArray([1, 2, 3]);
	   * // => true
	   *
	   * _.isArray(document.body.children);
	   * // => false
	   *
	   * _.isArray('abc');
	   * // => false
	   *
	   * _.isArray(_.noop);
	   * // => false
	   */


	  var isArray = Array.isArray;
	  /**
	   * Checks if `value` is array-like. A value is considered array-like if it's
	   * not a function and has a `value.length` that's an integer greater than or
	   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	   * @example
	   *
	   * _.isArrayLike([1, 2, 3]);
	   * // => true
	   *
	   * _.isArrayLike(document.body.children);
	   * // => true
	   *
	   * _.isArrayLike('abc');
	   * // => true
	   *
	   * _.isArrayLike(_.noop);
	   * // => false
	   */

	  function isArrayLike(value) {
	    return value != null && isLength(value.length) && !isFunction(value);
	  }
	  /**
	   * This method is like `_.isArrayLike` except that it also checks if `value`
	   * is an object.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is an array-like object,
	   *  else `false`.
	   * @example
	   *
	   * _.isArrayLikeObject([1, 2, 3]);
	   * // => true
	   *
	   * _.isArrayLikeObject(document.body.children);
	   * // => true
	   *
	   * _.isArrayLikeObject('abc');
	   * // => false
	   *
	   * _.isArrayLikeObject(_.noop);
	   * // => false
	   */


	  function isArrayLikeObject(value) {
	    return isObjectLike(value) && isArrayLike(value);
	  }
	  /**
	   * Checks if `value` is classified as a `Function` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	   * @example
	   *
	   * _.isFunction(_);
	   * // => true
	   *
	   * _.isFunction(/abc/);
	   * // => false
	   */


	  function isFunction(value) {
	    // The use of `Object#toString` avoids issues with the `typeof` operator
	    // in Safari 8-9 which returns 'object' for typed array and other constructors.
	    var tag = isObject(value) ? objectToString.call(value) : '';
	    return tag == funcTag || tag == genTag;
	  }
	  /**
	   * Checks if `value` is a valid array-like length.
	   *
	   * **Note:** This method is loosely based on
	   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	   * @example
	   *
	   * _.isLength(3);
	   * // => true
	   *
	   * _.isLength(Number.MIN_VALUE);
	   * // => false
	   *
	   * _.isLength(Infinity);
	   * // => false
	   *
	   * _.isLength('3');
	   * // => false
	   */


	  function isLength(value) {
	    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	  }
	  /**
	   * Checks if `value` is the
	   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	   * @example
	   *
	   * _.isObject({});
	   * // => true
	   *
	   * _.isObject([1, 2, 3]);
	   * // => true
	   *
	   * _.isObject(_.noop);
	   * // => true
	   *
	   * _.isObject(null);
	   * // => false
	   */


	  function isObject(value) {
	    var type = _typeof_1(value);

	    return !!value && (type == 'object' || type == 'function');
	  }
	  /**
	   * Checks if `value` is object-like. A value is object-like if it's not `null`
	   * and has a `typeof` result of "object".
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   * @example
	   *
	   * _.isObjectLike({});
	   * // => true
	   *
	   * _.isObjectLike([1, 2, 3]);
	   * // => true
	   *
	   * _.isObjectLike(_.noop);
	   * // => false
	   *
	   * _.isObjectLike(null);
	   * // => false
	   */


	  function isObjectLike(value) {
	    return !!value && _typeof_1(value) == 'object';
	  }
	  /**
	   * Checks if `value` is classified as a `Symbol` primitive or object.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	   * @example
	   *
	   * _.isSymbol(Symbol.iterator);
	   * // => true
	   *
	   * _.isSymbol('abc');
	   * // => false
	   */


	  function isSymbol(value) {
	    return _typeof_1(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
	  }
	  /**
	   * Checks if `value` is classified as a typed array.
	   *
	   * @static
	   * @memberOf _
	   * @since 3.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	   * @example
	   *
	   * _.isTypedArray(new Uint8Array);
	   * // => true
	   *
	   * _.isTypedArray([]);
	   * // => false
	   */


	  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	  /**
	   * Converts `value` to a finite number.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.12.0
	   * @category Lang
	   * @param {*} value The value to convert.
	   * @returns {number} Returns the converted number.
	   * @example
	   *
	   * _.toFinite(3.2);
	   * // => 3.2
	   *
	   * _.toFinite(Number.MIN_VALUE);
	   * // => 5e-324
	   *
	   * _.toFinite(Infinity);
	   * // => 1.7976931348623157e+308
	   *
	   * _.toFinite('3.2');
	   * // => 3.2
	   */

	  function toFinite(value) {
	    if (!value) {
	      return value === 0 ? value : 0;
	    }

	    value = toNumber(value);

	    if (value === INFINITY || value === -INFINITY) {
	      var sign = value < 0 ? -1 : 1;
	      return sign * MAX_INTEGER;
	    }

	    return value === value ? value : 0;
	  }
	  /**
	   * Converts `value` to an integer.
	   *
	   * **Note:** This method is loosely based on
	   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to convert.
	   * @returns {number} Returns the converted integer.
	   * @example
	   *
	   * _.toInteger(3.2);
	   * // => 3
	   *
	   * _.toInteger(Number.MIN_VALUE);
	   * // => 0
	   *
	   * _.toInteger(Infinity);
	   * // => 1.7976931348623157e+308
	   *
	   * _.toInteger('3.2');
	   * // => 3
	   */


	  function toInteger(value) {
	    var result = toFinite(value),
	        remainder = result % 1;
	    return result === result ? remainder ? result - remainder : result : 0;
	  }
	  /**
	   * Converts `value` to a number.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to process.
	   * @returns {number} Returns the number.
	   * @example
	   *
	   * _.toNumber(3.2);
	   * // => 3.2
	   *
	   * _.toNumber(Number.MIN_VALUE);
	   * // => 5e-324
	   *
	   * _.toNumber(Infinity);
	   * // => Infinity
	   *
	   * _.toNumber('3.2');
	   * // => 3.2
	   */


	  function toNumber(value) {
	    if (typeof value == 'number') {
	      return value;
	    }

	    if (isSymbol(value)) {
	      return NAN;
	    }

	    if (isObject(value)) {
	      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	      value = isObject(other) ? other + '' : other;
	    }

	    if (typeof value != 'string') {
	      return value === 0 ? value : +value;
	    }

	    value = value.replace(reTrim, '');
	    var isBinary = reIsBinary.test(value);
	    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	  }
	  /**
	   * Converts `value` to a string. An empty string is returned for `null`
	   * and `undefined` values. The sign of `-0` is preserved.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   * @example
	   *
	   * _.toString(null);
	   * // => ''
	   *
	   * _.toString(-0);
	   * // => '-0'
	   *
	   * _.toString([1, 2, 3]);
	   * // => '1,2,3'
	   */


	  function toString(value) {
	    return value == null ? '' : baseToString(value);
	  }
	  /**
	   * Gets the value at `path` of `object`. If the resolved value is
	   * `undefined`, the `defaultValue` is returned in its place.
	   *
	   * @static
	   * @memberOf _
	   * @since 3.7.0
	   * @category Object
	   * @param {Object} object The object to query.
	   * @param {Array|string} path The path of the property to get.
	   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	   * @returns {*} Returns the resolved value.
	   * @example
	   *
	   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	   *
	   * _.get(object, 'a[0].b.c');
	   * // => 3
	   *
	   * _.get(object, ['a', '0', 'b', 'c']);
	   * // => 3
	   *
	   * _.get(object, 'a.b.c', 'default');
	   * // => 'default'
	   */


	  function get(object, path, defaultValue) {
	    var result = object == null ? undefined : baseGet(object, path);
	    return result === undefined ? defaultValue : result;
	  }
	  /**
	   * Checks if `path` is a direct or inherited property of `object`.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Object
	   * @param {Object} object The object to query.
	   * @param {Array|string} path The path to check.
	   * @returns {boolean} Returns `true` if `path` exists, else `false`.
	   * @example
	   *
	   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	   *
	   * _.hasIn(object, 'a');
	   * // => true
	   *
	   * _.hasIn(object, 'a.b');
	   * // => true
	   *
	   * _.hasIn(object, ['a', 'b']);
	   * // => true
	   *
	   * _.hasIn(object, 'b');
	   * // => false
	   */


	  function hasIn(object, path) {
	    return object != null && hasPath(object, path, baseHasIn);
	  }
	  /**
	   * Creates an array of the own enumerable property names of `object`.
	   *
	   * **Note:** Non-object values are coerced to objects. See the
	   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	   * for more details.
	   *
	   * @static
	   * @since 0.1.0
	   * @memberOf _
	   * @category Object
	   * @param {Object} object The object to query.
	   * @returns {Array} Returns the array of property names.
	   * @example
	   *
	   * function Foo() {
	   *   this.a = 1;
	   *   this.b = 2;
	   * }
	   *
	   * Foo.prototype.c = 3;
	   *
	   * _.keys(new Foo);
	   * // => ['a', 'b'] (iteration order is not guaranteed)
	   *
	   * _.keys('hi');
	   * // => ['0', '1']
	   */


	  function keys(object) {
	    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	  }
	  /**
	   * This method returns the first argument it receives.
	   *
	   * @static
	   * @since 0.1.0
	   * @memberOf _
	   * @category Util
	   * @param {*} value Any value.
	   * @returns {*} Returns `value`.
	   * @example
	   *
	   * var object = { 'a': 1 };
	   *
	   * console.log(_.identity(object) === object);
	   * // => true
	   */


	  function identity(value) {
	    return value;
	  }
	  /**
	   * Creates a function that returns the value at `path` of a given object.
	   *
	   * @static
	   * @memberOf _
	   * @since 2.4.0
	   * @category Util
	   * @param {Array|string} path The path of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   * @example
	   *
	   * var objects = [
	   *   { 'a': { 'b': 2 } },
	   *   { 'a': { 'b': 1 } }
	   * ];
	   *
	   * _.map(objects, _.property('a.b'));
	   * // => [2, 1]
	   *
	   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	   * // => [1, 2]
	   */


	  function property(path) {
	    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	  }

	  module.exports = findLast;
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var Enter = {
	  key: 'Enter',
	  which: 13,
	  keyCode: 13
	};
	var Escape = {
	  key: ['Escape', // IE11 Escape
	  'Esc'],
	  which: 27,
	  keyCode: 27
	};
	var Space = {
	  key: ' ',
	  which: 32,
	  keyCode: 32
	};
	var ArrowLeft = {
	  key: 'ArrowLeft',
	  which: 37,
	  keyCode: 37
	};
	var ArrowUp = {
	  key: 'ArrowUp',
	  which: 38,
	  keyCode: 38
	};
	var ArrowRight = {
	  key: 'ArrowRight',
	  which: 39,
	  keyCode: 39
	};
	var ArrowDown = {
	  key: 'ArrowDown',
	  which: 40,
	  keyCode: 40
	};

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * @typedef Key
	 * @property key {Array<string>|string}
	 * @property which {number}
	 * @property keyCode {number}
	 */

	/**
	 * Check to see if at least one key code matches the key code of the
	 * given event.
	 *
	 * @example
	 * import * as keys from '../keys';
	 * import { matches } from '../match';
	 *
	 * function handleOnKeyDown(event) {
	 *   if (matches(event, [keys.Enter, keys.Space]) {
	 *     // ...
	 *   }
	 * }
	 *
	 * @param {Event} event
	 * @param {Array<Key>} keysToMatch
	 * @returns {boolean}
	 */
	function matches(event, keysToMatch) {
	  for (var i = 0; i < keysToMatch.length; i++) {
	    if (match(event, keysToMatch[i])) {
	      return true;
	    }
	  }

	  return false;
	}
	/**
	 * Check to see if the given key matches the corresponding keyboard event. Also
	 * supports passing in the value directly if you can't used the given event.
	 *
	 * @example
	 * import * as keys from '../keys';
	 * import { matches } from '../match';
	 *
	 * function handleOnKeyDown(event) {
	 *   if (match(event, keys.Enter) {
	 *     // ...
	 *   }
	 * }
	 *
	 * @param {Event|number|string} eventOrCode
	 * @param {Key} key
	 * @returns {boolean}
	 */

	function match(eventOrCode) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      key = _ref.key,
	      which = _ref.which,
	      keyCode = _ref.keyCode;

	  if (typeof eventOrCode === 'string') {
	    return eventOrCode === key;
	  }

	  if (typeof eventOrCode === 'number') {
	    return eventOrCode === which || eventOrCode === keyCode;
	  }

	  if (eventOrCode.key && Array.isArray(key)) {
	    return key.indexOf(eventOrCode.key) !== -1;
	  }

	  return eventOrCode.key === key || eventOrCode.which === which || eventOrCode.keyCode === keyCode;
	}

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	/**
	 * A flag `node.compareDocumentPosition(target)` returns,
	 * that indicates `target` is located earlier than `node` in the document or `target` contains `node`.
	 */

	var DOCUMENT_POSITION_BROAD_PRECEDING = // Checks `typeof Node` for `react-docgen`
	typeof Node !== 'undefined' && Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS;
	/**
	 * A flag `node.compareDocumentPosition(target)` returns,
	 * that indicates `target` is located later than `node` in the document or `node` contains `target`.
	 */

	var DOCUMENT_POSITION_BROAD_FOLLOWING = // Checks `typeof Node` for `react-docgen`
	typeof Node !== 'undefined' && Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY;
	/**
	 * CSS selector that selects major nodes that are sequential-focusable.
	 */

	var selectorTabbable = "\n  a[href], area[href], input:not([disabled]):not([tabindex='-1']),\n  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),\n  textarea:not([disabled]):not([tabindex='-1']),\n  iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]\n";
	/**
	 * CSS selector that selects major nodes that are click focusable
	 */

	var selectorFocusable = "\n  a[href], area[href], input:not([disabled]),\n  button:not([disabled]),select:not([disabled]),\n  textarea:not([disabled]),\n  iframe, object, embed, *[tabindex], *[contenteditable=true]\n";

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var prefix$9 = settings_1.prefix;
	/**
	 * @param {Node} node A DOM node.
	 * @param {string[]} selectorsFloatingMenus The CSS selectors that matches floating menus.
	 * @returns {boolean} `true` of the given `node` is in a floating menu.
	 */

	function elementOrParentIsFloatingMenu(node) {
	  var selectorsFloatingMenus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [".".concat(prefix$9, "--overflow-menu-options"), ".".concat(prefix$9, "--tooltip"), '.flatpickr-calendar'];

	  if (node && typeof node.closest === 'function') {
	    return selectorsFloatingMenus.some(function (selector) {
	      return node.closest(selector);
	    });
	  }
	}
	/**
	 * Ensures the focus is kept in the given `modalNode`, implementing "focus-wrap" behavior.
	 * @param {object} options The options.
	 * @param {Node} options.modalNode The DOM node of the inner modal.
	 * @param {Node} options.startTrapNode The DOM node of the focus sentinel the is placed earlier next to `modalNode`.
	 * @param {Node} options.endTrapNode The DOM node of the focus sentinel the is placed next to `modalNode`.
	 * @param {Node} options.currentActiveNode The DOM node that has focus.
	 * @param {Node} options.oldActiveNode The DOM node that previously had focus.
	 * @param {Node} [options.selectorsFloatingMenus] The CSS selectors that matches floating menus.
	 */


	function wrapFocus(_ref) {
	  var bodyNode = _ref.bodyNode,
	      startTrapNode = _ref.startTrapNode,
	      endTrapNode = _ref.endTrapNode,
	      currentActiveNode = _ref.currentActiveNode,
	      oldActiveNode = _ref.oldActiveNode,
	      selectorsFloatingMenus = _ref.selectorsFloatingMenus;

	  if (bodyNode && currentActiveNode && oldActiveNode && !bodyNode.contains(currentActiveNode) && !elementOrParentIsFloatingMenu(currentActiveNode, selectorsFloatingMenus)) {
	    var comparisonResult = oldActiveNode.compareDocumentPosition(currentActiveNode);

	    if (currentActiveNode === startTrapNode || comparisonResult & DOCUMENT_POSITION_BROAD_PRECEDING) {
	      var tabbable = lodash_findlast(bodyNode.querySelectorAll(selectorTabbable), function (elem) {
	        return Boolean(elem.offsetParent);
	      });

	      if (tabbable) {
	        tabbable.focus();
	      } else if (bodyNode !== oldActiveNode) {
	        bodyNode.focus();
	      }
	    } else if (currentActiveNode === endTrapNode || comparisonResult & DOCUMENT_POSITION_BROAD_FOLLOWING) {
	      var _tabbable = Array.prototype.find.call(bodyNode.querySelectorAll(selectorTabbable), function (elem) {
	        return Boolean(elem.offsetParent);
	      });

	      if (_tabbable) {
	        _tabbable.focus();
	      } else if (bodyNode !== oldActiveNode) {
	        bodyNode.focus();
	      }
	    }
	  }
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof(obj);
	}

	function _extends$2() {
	  _extends$2 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$2.apply(this, arguments);
	}

	function _objectWithoutProperties$5(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$5(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$5(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _classCallCheck$1(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _defineProperty$6(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$a = settings_1.prefix;

	var ComposedModal = /*#__PURE__*/function (_Component) {
	  _inherits(ComposedModal, _Component);

	  var _super = _createSuper(ComposedModal);

	  function ComposedModal() {
	    var _this;

	    _classCallCheck$1(this, ComposedModal);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _super.call.apply(_super, [this].concat(args));

	    _defineProperty$6(_assertThisInitialized(_this), "state", {});

	    _defineProperty$6(_assertThisInitialized(_this), "outerModal", /*#__PURE__*/React__default.createRef());

	    _defineProperty$6(_assertThisInitialized(_this), "innerModal", /*#__PURE__*/React__default.createRef());

	    _defineProperty$6(_assertThisInitialized(_this), "button", /*#__PURE__*/React__default.createRef());

	    _defineProperty$6(_assertThisInitialized(_this), "startSentinel", /*#__PURE__*/React__default.createRef());

	    _defineProperty$6(_assertThisInitialized(_this), "endSentinel", /*#__PURE__*/React__default.createRef());

	    _defineProperty$6(_assertThisInitialized(_this), "handleKeyDown", function (evt) {
	      // Esc key
	      if (evt.which === 27) {
	        _this.closeModal(evt);
	      }

	      _this.props.onKeyDown(evt);
	    });

	    _defineProperty$6(_assertThisInitialized(_this), "handleClick", function (evt) {
	      if (_this.innerModal.current && !_this.innerModal.current.contains(evt.target)) {
	        _this.closeModal(evt);
	      }
	    });

	    _defineProperty$6(_assertThisInitialized(_this), "handleBlur", function (_ref) {
	      var oldActiveNode = _ref.target,
	          currentActiveNode = _ref.relatedTarget;
	      var _this$props = _this.props,
	          open = _this$props.open,
	          selectorsFloatingMenus = _this$props.selectorsFloatingMenus;

	      if (open && currentActiveNode && oldActiveNode) {
	        var bodyNode = _this.innerModal.current;
	        var startSentinelNode = _this.startSentinel.current;
	        var endSentinelNode = _this.endSentinel.current;
	        wrapFocus({
	          bodyNode: bodyNode,
	          startSentinelNode: startSentinelNode,
	          endSentinelNode: endSentinelNode,
	          currentActiveNode: currentActiveNode,
	          oldActiveNode: oldActiveNode,
	          selectorsFloatingMenus: selectorsFloatingMenus
	        });
	      }
	    });

	    _defineProperty$6(_assertThisInitialized(_this), "focusButton", function (focusContainerElement) {
	      if (focusContainerElement) {
	        var primaryFocusElement = focusContainerElement.querySelector(_this.props.selectorPrimaryFocus);

	        if (primaryFocusElement) {
	          primaryFocusElement.focus();
	          return;
	        }

	        if (_this.button.current) {
	          _this.button.current.focus();
	        }
	      }
	    });

	    _defineProperty$6(_assertThisInitialized(_this), "handleTransitionEnd", function (evt) {
	      if (_this.outerModal.current.offsetWidth && _this.outerModal.current.offsetHeight && _this.beingOpen) {
	        _this.focusButton(evt.currentTarget);

	        _this.beingOpen = false;
	      }
	    });

	    _defineProperty$6(_assertThisInitialized(_this), "closeModal", function (evt) {
	      var onClose = _this.props.onClose;

	      if (!onClose || onClose(evt) !== false) {
	        _this.setState({
	          open: false
	        });
	      }
	    });

	    return _this;
	  }

	  _createClass$1(ComposedModal, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (!prevState.open && this.state.open) {
	        this.beingOpen = true;
	      } else if (prevState.open && !this.state.open) {
	        this.beingOpen = false;
	      }

	      toggleClass(document.body, "".concat(prefix$a, "--body--with-modal-open"), this.state.open);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      toggleClass(document.body, "".concat(prefix$a, "--body--with-modal-open"), false);
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      toggleClass(document.body, "".concat(prefix$a, "--body--with-modal-open"), this.props.open);

	      if (!this.props.open) {
	        return;
	      }

	      if (this.innerModal.current) {
	        this.focusButton(this.innerModal.current);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _classNames,
	          _classNames2,
	          _this2 = this;

	      var open = this.state.open;

	      var _this$props2 = this.props,
	          className = _this$props2.className,
	          containerClassName = _this$props2.containerClassName,
	          children = _this$props2.children,
	          danger = _this$props2.danger,
	          size = _this$props2.size,
	          other = _objectWithoutProperties$5(_this$props2, ["className", "containerClassName", "children", "danger", "selectorPrimaryFocus", "size"]);

	      var modalClass = cx((_classNames = {}, _defineProperty$6(_classNames, "".concat(prefix$a, "--modal"), true), _defineProperty$6(_classNames, 'is-visible', open), _defineProperty$6(_classNames, className, className), _defineProperty$6(_classNames, "".concat(prefix$a, "--modal--danger"), danger), _classNames));
	      var containerClass = cx((_classNames2 = {}, _defineProperty$6(_classNames2, "".concat(prefix$a, "--modal-container"), true), _defineProperty$6(_classNames2, "".concat(prefix$a, "--modal-container--").concat(size), size), _defineProperty$6(_classNames2, containerClassName, containerClassName), _classNames2));
	      var childrenWithProps = React__default.Children.toArray(children).map(function (child) {
	        switch (child.type) {
	          case /*#__PURE__*/React__default.createElement(ModalHeader).type:
	            return /*#__PURE__*/React__default.cloneElement(child, {
	              closeModal: _this2.closeModal
	            });

	          case /*#__PURE__*/React__default.createElement(ModalFooter).type:
	            return /*#__PURE__*/React__default.cloneElement(child, {
	              closeModal: _this2.closeModal,
	              inputref: _this2.button
	            });

	          default:
	            return child;
	        }
	      });
	      return /*#__PURE__*/React__default.createElement("div", _extends$2({}, other, {
	        role: "presentation",
	        ref: this.outerModal,
	        onBlur: this.handleBlur,
	        onClick: this.handleClick,
	        onKeyDown: this.handleKeyDown,
	        onTransitionEnd: open ? this.handleTransitionEnd : undefined,
	        className: modalClass
	      }), /*#__PURE__*/React__default.createElement("span", {
	        ref: this.startSentinel,
	        tabIndex: "0",
	        role: "link",
	        className: "".concat(prefix$a, "--visually-hidden")
	      }, "Focus sentinel"), /*#__PURE__*/React__default.createElement("div", {
	        ref: this.innerModal,
	        className: containerClass,
	        role: "dialog"
	      }, childrenWithProps), /*#__PURE__*/React__default.createElement("span", {
	        ref: this.endSentinel,
	        tabIndex: "0",
	        role: "link",
	        className: "".concat(prefix$a, "--visually-hidden")
	      }, "Focus sentinel"));
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(_ref2, state) {
	      var open = _ref2.open;
	      var prevOpen = state.prevOpen;
	      return prevOpen === open ? null : {
	        open: open,
	        prevOpen: open
	      };
	    }
	  }]);

	  return ComposedModal;
	}(React.Component);

	_defineProperty$6(ComposedModal, "defaultProps", {
	  onKeyDown: function onKeyDown() {},
	  selectorPrimaryFocus: '[data-modal-primary-focus]'
	});

	_defineProperty$6(ComposedModal, "propTypes", {
	  /**
	   * Specify an optional className to be applied to the modal root node
	   */
	  className: PropTypes.string,

	  /**
	   * Specify an optional className to be applied to the modal node
	   */
	  containerClassName: PropTypes.string,

	  /**
	   * Specify an optional handler for closing modal.
	   * Returning `false` here prevents closing modal.
	   */
	  onClose: PropTypes.func,

	  /**
	   * Specify an optional handler for the `onKeyDown` event. Called for all
	   * `onKeyDown` events that do not close the modal
	   */
	  onKeyDown: PropTypes.func,

	  /**
	   * Specify whether the Modal is currently open
	   */
	  open: PropTypes.bool,

	  /**
	   * Specify a CSS selector that matches the DOM element that should be
	   * focused when the Modal opens
	   */
	  selectorPrimaryFocus: PropTypes.string,

	  /**
	   * Specify the CSS selectors that match the floating menus
	   */
	  selectorsFloatingMenus: PropTypes.string,

	  /**
	   * Specify the content to be placed in the ComposedModal
	   */
	  children: PropTypes.node,

	  /**
	   * Specify whether the primary button should be replaced with danger button.
	   * Note that this prop is not applied if you render primary/danger button by yourself
	   */
	  danger: PropTypes.bool,

	  /**
	   * Specify the size variant.
	   */
	  size: PropTypes.oneOf(['xs', 'sm', 'lg'])
	});
	var ModalHeader = /*#__PURE__*/function (_Component2) {
	  _inherits(ModalHeader, _Component2);

	  var _super2 = _createSuper(ModalHeader);

	  function ModalHeader() {
	    var _this3;

	    _classCallCheck$1(this, ModalHeader);

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    _this3 = _super2.call.apply(_super2, [this].concat(args));

	    _defineProperty$6(_assertThisInitialized(_this3), "handleCloseButtonClick", function (evt) {
	      _this3.props.closeModal(evt);

	      _this3.props.buttonOnClick();
	    });

	    return _this3;
	  }

	  _createClass$1(ModalHeader, [{
	    key: "render",
	    value: function render() {
	      var _classNames3, _classNames4, _classNames5, _classNames6, _classNames7;

	      var _this$props3 = this.props,
	          className = _this$props3.className,
	          labelClassName = _this$props3.labelClassName,
	          titleClassName = _this$props3.titleClassName,
	          closeClassName = _this$props3.closeClassName,
	          closeIconClassName = _this$props3.closeIconClassName,
	          label = _this$props3.label,
	          title = _this$props3.title,
	          children = _this$props3.children,
	          iconDescription = _this$props3.iconDescription,
	          other = _objectWithoutProperties$5(_this$props3, ["className", "labelClassName", "titleClassName", "closeClassName", "closeIconClassName", "label", "title", "children", "iconDescription", "closeModal", "buttonOnClick"]);

	      var headerClass = cx((_classNames3 = {}, _defineProperty$6(_classNames3, "".concat(prefix$a, "--modal-header"), true), _defineProperty$6(_classNames3, className, className), _classNames3));
	      var labelClass = cx((_classNames4 = {}, _defineProperty$6(_classNames4, "".concat(prefix$a, "--modal-header__label ").concat(prefix$a, "--type-delta"), true), _defineProperty$6(_classNames4, labelClassName, labelClassName), _classNames4));
	      var titleClass = cx((_classNames5 = {}, _defineProperty$6(_classNames5, "".concat(prefix$a, "--modal-header__heading ").concat(prefix$a, "--type-beta"), true), _defineProperty$6(_classNames5, titleClassName, titleClassName), _classNames5));
	      var closeClass = cx((_classNames6 = {}, _defineProperty$6(_classNames6, "".concat(prefix$a, "--modal-close"), true), _defineProperty$6(_classNames6, closeClassName, closeClassName), _classNames6));
	      var closeIconClass = cx((_classNames7 = {}, _defineProperty$6(_classNames7, "".concat(prefix$a, "--modal-close__icon"), true), _defineProperty$6(_classNames7, closeIconClassName, closeIconClassName), _classNames7));
	      return /*#__PURE__*/React__default.createElement("div", _extends$2({
	        className: headerClass
	      }, other), label && /*#__PURE__*/React__default.createElement("p", {
	        className: labelClass
	      }, label), title && /*#__PURE__*/React__default.createElement("p", {
	        className: titleClass
	      }, title), children, /*#__PURE__*/React__default.createElement("button", {
	        onClick: this.handleCloseButtonClick,
	        className: closeClass,
	        title: iconDescription,
	        "aria-label": iconDescription,
	        type: "button"
	      }, /*#__PURE__*/React__default.createElement(Close20, {
	        className: closeIconClass
	      })));
	    }
	  }]);

	  return ModalHeader;
	}(React.Component);

	_defineProperty$6(ModalHeader, "propTypes", {
	  /**
	   * Specify an optional className to be applied to the modal header
	   */
	  className: PropTypes.string,

	  /**
	   * Specify an optional className to be applied to the modal header label
	   */
	  labelClassName: PropTypes.string,

	  /**
	   * Specify an optional className to be applied to the modal heading
	   */
	  titleClassName: PropTypes.string,

	  /**
	   * Specify an optional className to be applied to the modal close node
	   */
	  closeClassName: PropTypes.string,

	  /**
	   * Specify an optional className to be applied to the modal close icon node
	   */
	  closeIconClassName: PropTypes.string,

	  /**
	   * Specify an optional label to be displayed
	   */
	  label: PropTypes.node,

	  /**
	   * Specify an optional title to be displayed
	   */
	  title: PropTypes.node,

	  /**
	   * Specify the content to be placed in the ModalHeader
	   */
	  children: PropTypes.node,

	  /**
	   * Specify a description for the close icon that can be read by screen
	   * readers
	   */
	  iconDescription: PropTypes.string,

	  /**
	   * Provide an optional function to be called when the modal is closed
	   */
	  closeModal: PropTypes.func,

	  /**
	   * Provide an optional function to be called when the close button is
	   * clicked
	   */
	  buttonOnClick: PropTypes.func
	});

	_defineProperty$6(ModalHeader, "defaultProps", {
	  iconDescription: 'Close',
	  buttonOnClick: function buttonOnClick() {}
	});

	function ModalBody(props) {
	  var _classNames8;

	  var className = props.className,
	      children = props.children,
	      hasForm = props.hasForm,
	      hasScrollingContent = props.hasScrollingContent,
	      other = _objectWithoutProperties$5(props, ["className", "children", "hasForm", "hasScrollingContent"]);

	  var contentClass = cx((_classNames8 = {}, _defineProperty$6(_classNames8, "".concat(prefix$a, "--modal-content"), true), _defineProperty$6(_classNames8, "".concat(prefix$a, "--modal-content--with-form"), hasForm), _defineProperty$6(_classNames8, className, className), _classNames8));
	  var hasScrollingContentProps = hasScrollingContent ? {
	    tabIndex: 0,
	    role: 'region'
	  } : {};
	  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", _extends$2({
	    className: contentClass
	  }, hasScrollingContentProps, other), children), hasScrollingContent && /*#__PURE__*/React__default.createElement("div", {
	    className: "".concat(prefix$a, "--modal-content--overflow-indicator")
	  }));
	}
	ModalBody.propTypes = _defineProperty$6({
	  /**
	   * Specify an optional className to be added to the Modal Body node
	   */
	  className: PropTypes.string,

	  /**
	   * Specify the content to be placed in the ModalBody
	   */
	  children: PropTypes.node,

	  /**
	   * Provide whether the modal content has a form element.
	   * If `true` is used here, non-form child content should have `bx--modal-content__regular-content` class.
	   */
	  hasForm: PropTypes.bool,

	  /**
	   * Specify whether the modal contains scrolling content
	   */
	  hasScrollingContent: PropTypes.bool
	}, 'aria-label', requiredIfGivenPropIsTruthy('hasScrollingContent', PropTypes.string));
	var ModalFooter = /*#__PURE__*/function (_Component3) {
	  _inherits(ModalFooter, _Component3);

	  var _super3 = _createSuper(ModalFooter);

	  function ModalFooter() {
	    var _this4;

	    _classCallCheck$1(this, ModalFooter);

	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    _this4 = _super3.call.apply(_super3, [this].concat(args));

	    _defineProperty$6(_assertThisInitialized(_this4), "handleRequestClose", function (evt) {
	      _this4.props.closeModal(evt);

	      _this4.props.onRequestClose(evt);
	    });

	    return _this4;
	  }

	  _createClass$1(ModalFooter, [{
	    key: "render",
	    value: function render() {
	      var _classNames9;

	      var _this$props4 = this.props,
	          className = _this$props4.className,
	          primaryClassName = _this$props4.primaryClassName,
	          secondaryClassName = _this$props4.secondaryClassName,
	          secondaryButtonText = _this$props4.secondaryButtonText,
	          primaryButtonText = _this$props4.primaryButtonText,
	          primaryButtonDisabled = _this$props4.primaryButtonDisabled,
	          onRequestSubmit = _this$props4.onRequestSubmit,
	          children = _this$props4.children,
	          danger = _this$props4.danger,
	          inputref = _this$props4.inputref,
	          other = _objectWithoutProperties$5(_this$props4, ["className", "primaryClassName", "secondaryClassName", "secondaryButtonText", "primaryButtonText", "primaryButtonDisabled", "closeModal", "onRequestClose", "onRequestSubmit", "children", "danger", "inputref"]);

	      var footerClass = cx((_classNames9 = {}, _defineProperty$6(_classNames9, "".concat(prefix$a, "--modal-footer"), true), _defineProperty$6(_classNames9, className, className), _classNames9));
	      var primaryClass = cx(_defineProperty$6({}, primaryClassName, primaryClassName));
	      var secondaryClass = cx(_defineProperty$6({}, secondaryClassName, secondaryClassName));
	      return /*#__PURE__*/React__default.createElement("div", _extends$2({
	        className: footerClass
	      }, other), secondaryButtonText && /*#__PURE__*/React__default.createElement(Button, {
	        className: secondaryClass,
	        onClick: this.handleRequestClose,
	        kind: "secondary"
	      }, secondaryButtonText), primaryButtonText && /*#__PURE__*/React__default.createElement(Button, {
	        onClick: onRequestSubmit,
	        className: primaryClass,
	        disabled: primaryButtonDisabled,
	        kind: danger ? 'danger' : 'primary',
	        ref: inputref
	      }, primaryButtonText), children);
	    }
	  }]);

	  return ModalFooter;
	}(React.Component);

	_defineProperty$6(ModalFooter, "propTypes", {
	  /**
	   * Specify a custom className to be applied to the Modal Footer container
	   */
	  className: PropTypes.string,

	  /**
	   * Specify a custom className to be applied to the primary button
	   */
	  primaryClassName: PropTypes.string,

	  /**
	   * Specify the text for the primary button
	   */
	  primaryButtonText: PropTypes.string,

	  /**
	   * Specify whether the primary button should be disabled
	   */
	  primaryButtonDisabled: PropTypes.bool,

	  /**
	   * Specify a custom className to be applied to the secondary button
	   */
	  secondaryClassName: PropTypes.string,

	  /**
	   * Specify the text for the secondary button
	   */
	  secondaryButtonText: PropTypes.string,

	  /**
	   * Specify whether the primary button should be replaced with danger button.
	   * Note that this prop is not applied if you render primary/danger button by yourself
	   */
	  danger: PropTypes.bool,

	  /**
	   * Specify an optional function for when the modal is requesting to be
	   * closed
	   */
	  onRequestClose: PropTypes.func,

	  /**
	   * Specify an optional function for when the modal is requesting to be
	   * submitted
	   */
	  onRequestSubmit: PropTypes.func,

	  /**
	   * Specify an optional function that is called whenever the modal is closed
	   */
	  closeModal: PropTypes.func,

	  /**
	   * Pass in content that will be rendered in the Modal Footer
	   */
	  children: PropTypes.node,

	  /**
	   * The `ref` callback for the primary button.
	   */
	  inputref: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
	    current: PropTypes.any
	  })])
	});

	_defineProperty$6(ModalFooter, "defaultProps", {
	  onRequestClose: function onRequestClose() {},
	  onRequestSubmit: function onRequestSubmit() {}
	});

	var stablePrefix$7 = settings$1.stablePrefix;
	var prefix$b = settings_1.prefix;
	/**
	 * Close button for Expressive Modal.
	 */

	var ExpressiveModalCloseBtn = function ExpressiveModalCloseBtn(_ref) {
	  var btnClassName = _ref.btnClassName,
	      iconDescription = _ref.iconDescription,
	      iconClassName = _ref.iconClassName,
	      props = objectWithoutProperties(_ref, ["btnClassName", "iconDescription", "iconClassName"]);

	  return React__default.createElement("button", _extends_1({
	    "data-autoid": "".concat(stablePrefix$7, "--expressive-modal__close"),
	    className: cx("".concat(prefix$b, "--modal-close"), btnClassName),
	    title: iconDescription,
	    type: "button"
	  }, props), React__default.createElement(Close20, {
	    "aria-label": iconDescription,
	    className: cx("".concat(prefix$b, "--modal-close__icon"), iconClassName)
	  }));
	};

	ExpressiveModalCloseBtn.propTypes = {
	  /**
	   * A custom class name to the button.
	   */
	  btnClassName: PropTypes.string,

	  /**
	   * A custom class name to the icon.
	   */
	  iconClassName: PropTypes.string,

	  /**
	   * Accessible description that describes icon action.
	   */
	  iconDescription: PropTypes.string
	};
	ExpressiveModalCloseBtn.defaultProps = {
	  iconDescription: 'Close'
	};

	var stablePrefix$8 = settings$1.stablePrefix;
	var prefix$c = settings_1.prefix;
	/**
	 * Expressive Modal.
	 */

	var ExpressiveModal = function ExpressiveModal(_ref) {
	  var open = _ref.open,
	      className = _ref.className,
	      children = _ref.children,
	      fullwidth = _ref.fullwidth,
	      onClose = _ref.onClose,
	      props = objectWithoutProperties(_ref, ["open", "className", "children", "fullwidth", "onClose"]);

	  var _useState = React.useState(open),
	      _useState2 = slicedToArray(_useState, 2),
	      isOpen = _useState2[0],
	      setIsOpen = _useState2[1];

	  React.useEffect(manageOpenState, [open]);
	  return React__default.createElement(ComposedModal, _extends_1({
	    onClose: onClose,
	    open: isOpen,
	    "data-autoid": "".concat(stablePrefix$8, "--expressive-modal"),
	    className: cx("".concat(prefix$c, "--modal--expressive"), className, defineProperty({}, "".concat(prefix$c, "--modal--expressive--fullwidth"), fullwidth))
	  }, props), React__default.createElement(ExpressiveModalCloseBtn, {
	    onClick: closeModal
	  }), children);
	  /**
	   * Close modal
	   */

	  function closeModal() {
	    if ((onClose === null || onClose === void 0 ? void 0 : onClose()) !== false) {
	      setIsOpen(false);
	    }
	  }
	  /**
	   * Manage open prop and isOpen state
	   */


	  function manageOpenState() {
	    setIsOpen(open);
	  }
	};

	ExpressiveModal.propTypes = {
	  /**
	   * Sets whether the Modal is fullwidth or not.
	   */
	  fullwidth: PropTypes.bool,

	  /**
	   * Sets whether the Modal is open/close.
	   */
	  open: PropTypes.bool,

	  /**
	   * Custom classname(s) for the Modal.
	   */
	  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),

	  /**
	   * Components/Elements to be rendered within the Modal.
	   */
	  children: PropTypes.node,

	  /**
	   * Function to be triggered on close of Modal.
	   */
	  onClose: PropTypes.func
	};
	ExpressiveModal.defaultProps = {
	  open: false
	};

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Stores the latast id to increment
	 *
	 * @type {number} Number stored for the next ID
	 * @private
	 */
	var _lastId = 0;
	/**
	 * Creates a unique ID to use
	 *
	 * @param {string=} prefix Prefix to set for the id
	 * @returns {string} Unique ID
	 *
	 * @example
	 * import { uniqueid } from '@carbon/ibmdotcom-utilities';
	 *
	 * const id1 = uniqueid(); // id1
	 * const id2 = uniqueid(); // id2
	 * const id3 = uniqueid('prefix'); // prefix3
	 * const id4 = uniqueid('prefix-'); // prefix-4
	 */

	function uniqueid() {
	  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';
	  _lastId++;
	  return "".concat(prefix).concat(_lastId);
	}

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$9 = settings$1.stablePrefix;
	var prefix$d = settings_1.prefix;
	/**
	 *  sorts media query min-widths order to ensure the
	 * browser returns the proper sources and the specified widths
	 *
	 * @param {Array} sources image sources and min-widths
	 *
	 * @returns {Array} sorted array of sources
	 */

	var sortSources = function sortSources(sources) {
	  var images = sources.map(function (elem) {
	    if (typeof elem.breakpoint == 'number') {
	      return elem;
	    } else {
	      return {
	        breakpoint: parseFloat(breakpoints[elem.breakpoint].width) * baseFontSize,
	        src: elem.src
	      };
	    }
	  });
	  return images.sort(function (a, b) {
	    return a.breakpoint > b.breakpoint ? -1 : 1;
	  });
	};
	/**
	 * Picture element.
	 */


	var Image = function Image(_ref) {
	  var classname = _ref.classname,
	      sources = _ref.sources,
	      defaultSrc = _ref.defaultSrc,
	      alt = _ref.alt,
	      longDescription = _ref.longDescription,
	      Icon = _ref.icon;

	  if (!defaultSrc || !alt) {
	    return null;
	  }

	  var sortedImages = sources ? sortSources(sources) : [];
	  var id = uniqueid("".concat(prefix$d, "--image-"));
	  return React__default.createElement("div", {
	    className: "".concat(prefix$d, "--image"),
	    "data-autoid": "".concat(stablePrefix$9, "--image__longdescription")
	  }, React__default.createElement("picture", null, sortedImages.map(function (imgSrc, key) {
	    return React__default.createElement("source", {
	      media: "(min-width: ".concat(imgSrc.breakpoint, "px)"),
	      key: key,
	      srcSet: imgSrc.src
	    });
	  }), React__default.createElement("img", {
	    className: cx("".concat(prefix$d, "--image__img"), classname),
	    src: defaultSrc,
	    alt: alt,
	    "aria-describedby": longDescription ? "".concat(id) : undefined
	  })), longDescription ? React__default.createElement("div", {
	    id: id,
	    className: "".concat(prefix$d, "--image__longdescription")
	  }, longDescription) : null, Icon && React__default.createElement(Icon, {
	    className: "".concat(prefix$d, "--image__icon")
	  }));
	};

	Image.propTypes = {
	  /**
	   * The CSS class names.
	   */
	  classname: PropTypes.string,

	  /**
	   * Array of image objects. Use below object structure for each items:
	   *
	   * | Name         | Data Type     | Description                                  |
	   * | ------------ | ------------- | -------------------------------------------- |
	   * | `src`        | String        | Url of Image.                                |
	   * | `breakpoint` | Num OR String | min-width breakpoint to render the image src |
	   */
	  sources: PropTypes.arrayOf(PropTypes.shape({
	    src: PropTypes.string,
	    breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	  })),

	  /**
	   * Default image (usually image for largest breakpoint).
	   */
	  defaultSrc: PropTypes.string.isRequired,

	  /**
	   * Alternate text for image component.
	   */
	  alt: PropTypes.string.isRequired,

	  /**
	   * Visible to screen readers, hidden from users.
	   */
	  longDescription: PropTypes.string,

	  /**
	   * Icon that overlays the image
	   */
	  icon: PropTypes.func
	};

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var _htmlTagRegex = /<.*?>/g;
	var _cleanStringRegex = /\n|\s{2,}|&([a-zA-Z]+);/g;
	/**
	 * Removes any html tags from a string and keeps inner text if any
	 *
	 * @param {string} str String to be checked for html tags
	 * @returns {string} String with html tags stripped out
	 * @private
	 */

	var _removeHtmlTags = function _removeHtmlTags(str) {
	  return str.replace(_htmlTagRegex, '');
	};
	/**
	 * Cleans string by replacing multiple spaces with a single space
	 * and removing single new lines.
	 *
	 * @param {string} str String to be checked
	 * @returns {string} String with multiple spaces and single new lines removed
	 * @private
	 */


	var _cleanString = function _cleanString(str) {
	  return str.replace(_cleanStringRegex, ' ');
	};
	/**
	 *
	 * @param {string} str html string passed in to remove html tags and entities
	 * @param {object} [options={}] Object with options for the conversion
	 * @param {boolean} [options.removeEntities=true] Defines if should remove html entities
	 * @returns {string} String removed of html tags
	 * @example
	 * import { removeHtmlTagEntities } from '@carbon/ibmdotcom-utilities';
	 *
	 * markdownToHtml('<p>example string</p>&nbsp;<p>here</>')
	 * // 'example string here'
	 */


	function removeHtmlTagEntities(str) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$removeEntities = _ref.removeEntities,
	      removeEntities = _ref$removeEntities === void 0 ? true : _ref$removeEntities;

	  var removedTags = _removeHtmlTags(str);

	  removedTags = removeEntities ? _cleanString(removedTags) : removedTags;
	  return removedTags;
	}

	/**
	 * @constant {boolean} scrollTracker determines whether scroll tracking analytics is enabled
	 * @private
	 */

	var _scrollTracker = process && process.env.SCROLL_TRACKING === 'true' || false;
	/**
	 * Current NODE_ENV
	 *
	 * @type {string | string}
	 * @private
	 */


	var _env = process && "development" || 'development';
	/**
	 * Analytics API class with methods for firing analytics events on
	 * ibm.com
	 */


	var AnalyticsAPI = /*#__PURE__*/function () {
	  function AnalyticsAPI() {
	    classCallCheck(this, AnalyticsAPI);
	  }

	  createClass(AnalyticsAPI, null, [{
	    key: "registerEvent",

	    /**
	     * This method checks that the analytics script has been loaded
	     * and fires an event to Coremetrics
	     *
	     * @param {object} eventData Object with standard IBM metric event properties and values to send to Coremetrics
	     *
	     * @example
	     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function fireEvent() {
	     *    const eventData = {
	     *        type: 'element',
	     *        primaryCategory: 'MASTHEAD',
	     *        eventName: 'CLICK',
	     *        executionPath: 'masthead__profile',
	     *        execPathReturnCode: 'none',
	     *        targetTitle: 'profile'
	     *    }
	     *    AnalyticsAPI.registerEvent(eventData);
	     * }
	     *
	     *
	     */
	    value: function registerEvent(eventData) {
	      if (lib.ibmStats) {
	        lib.ibmStats.event(eventData);
	      }
	    }
	    /**
	     * Initializes all analytics global tracking init functions
	     */

	  }, {
	    key: "initAll",
	    value: function initAll() {
	      this.initScrollTracker();
	      this.initDynamicTabs();
	      this.initModals();
	    }
	    /**
	     *
	     * If scroll tracking is enabled, this method will fire an event for every 400px
	     * user scrolls down the page. Only the deepest depth will fire the event (e.g if
	     * user scrolls back up the page, the event will not be triggered)
	     *
	     * @example
	     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function init() {
	     *   AnalyticsAPI.initScrollTracker();
	     * }
	     **/

	  }, {
	    key: "initScrollTracker",
	    value: function initScrollTracker() {
	      if (_scrollTracker) {
	        var trackingInterval = 400;
	        var trackedMarker = 0;
	        var curMarker = 0;
	        var didScroll = false;
	        var fireEvent = this.registerEvent;
	        lib.addEventListener('scroll', function () {
	          didScroll = true;
	        });
	        setInterval(function () {
	          if (didScroll) {
	            didScroll = false;
	            curMarker = Math.floor(lib.pageYOffset / trackingInterval);

	            if (curMarker > trackedMarker) {
	              trackedMarker = curMarker;
	              fireEvent({
	                type: 'element',
	                primaryCategory: 'SCROLL DISTANCE',
	                eventName: trackingInterval * trackedMarker,
	                executionPath: lib.innerWidth,
	                execPathReturnCode: lib.innerHeight
	              });
	            }
	          }
	        }, 50);
	      }
	    }
	    /**
	     * This instantiates an event listener to trigger an event if the Carbon
	     * Tabs component is being interacted with by the user
	     *
	     * @example
	     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function init() {
	     *   AnalyticsAPI.initDynamicTabs();
	     * }
	     */

	  }, {
	    key: "initDynamicTabs",
	    value: function initDynamicTabs() {
	      var tabSelected = this.triggerTabSelected.bind(this);
	      lib.document.addEventListener('tab-selected', function (evt) {
	        tabSelected(evt.target.id, evt.detail.item.innerText);
	      });
	    }
	    /**
	     * Triggers to CLICK event for the dynamic tabs
	     *
	     * @param {string} executionPath Target ID
	     * @param {string} targetTitle Target innerText
	     */

	  }, {
	    key: "triggerTabSelected",
	    value: function triggerTabSelected(executionPath, targetTitle) {
	      try {
	        this.registerEvent({
	          type: 'element',
	          primaryCategory: 'WIDGET',
	          eventName: 'CLICK',
	          eventCategoryGroup: 'TABS DYNAMIC',
	          executionPath: executionPath,
	          targetTitle: targetTitle
	        });
	      } catch (err) {
	        if (_env !== 'production') {
	          console.error('Error triggering tab event:', err);
	        }
	      }
	    }
	    /**
	     * This instantiates an event listener to trigger an event if the Carbon
	     * Modal component is being interacted with by the user
	     *
	     * @example
	     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function init() {
	     *   AnalyticsAPI.initModals();
	     * }
	     */

	  }, {
	    key: "initModals",
	    value: function initModals() {
	      var modalHide = this.triggerModalHide.bind(this);
	      lib.document.addEventListener('modal-hidden', function (evt) {
	        modalHide(evt.target.id, evt.detail.launchingElement.innerText);
	      });
	      var modalShow = this.triggerModalShow.bind(this);
	      lib.document.addEventListener('modal-shown', function (evt) {
	        modalShow(evt.target.id, evt.detail.launchingElement.innerText);
	      });
	    }
	    /**
	     * Triggers the HIDE event for the modal
	     *
	     * @param {string} executionPath Target ID
	     * @param {string} targetTitle Target innerText
	     */

	  }, {
	    key: "triggerModalHide",
	    value: function triggerModalHide(executionPath, targetTitle) {
	      try {
	        this.registerEvent({
	          type: 'element',
	          primaryCategory: 'WIDGET',
	          eventName: 'HIDE',
	          eventCategoryGroup: 'SHOWHIDE',
	          executionPath: executionPath,
	          targetTitle: targetTitle
	        });
	      } catch (err) {
	        if (_env !== 'production') {
	          console.error('Error triggering modal hide event:', err);
	        }
	      }
	    }
	    /**
	     * Triggers the SHOW event for the modal
	     *
	     * @param {string} executionPath Target ID
	     * @param {string} targetTitle Target innerText
	     */

	  }, {
	    key: "triggerModalShow",
	    value: function triggerModalShow(executionPath, targetTitle) {
	      try {
	        this.registerEvent({
	          type: 'element',
	          primaryCategory: 'WIDGET',
	          eventName: 'SHOW',
	          eventCategoryGroup: 'SHOWHIDE',
	          executionPath: executionPath,
	          targetTitle: targetTitle
	        });
	      } catch (err) {
	        if (_env !== 'production') {
	          console.error('Error triggering modal show event:', err);
	        }
	      }
	    }
	    /**
	     * Sends video player metrics data
	     *
	     * @param {object} data event data from the video player
	     *
	     * @example
	     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
	     *
	     *function init() {
	     *    const data = {
	     *       playerType: 'kaltura',
	     *       title: 'Folgers Coffee',
	     *       currentTime: 1,
	     *       duration: 60,
	     *       playerState: 1,
	     *       videoId: '0_uka1msg4',
	     *    };
	     *
	     *    AnalyticsAPI.videoPlayerStats(data);
	     *}
	     *
	     */

	  }, {
	    key: "videoPlayerStats",
	    value: function videoPlayerStats(data) {
	      var playerState = '',
	          currentTime = Math.floor(data.currentTime),
	          duration = Math.floor(data.duration),
	          percentWatched = Math.floor(currentTime / duration * 100); // Set nicenames for player states for event.

	      switch (data.playerState) {
	        case 0:
	          playerState = 'launched';
	          break;

	        case 1:
	          playerState = 'paused';
	          break;

	        case 2:
	          playerState = 'played';
	          break;

	        case 3:
	          playerState = 'ended';
	          break;

	        case 99:
	          playerState = 'error';
	          break;

	        default:
	      }

	      if (currentTime === 0) {
	        currentTime = 'start';
	        percentWatched = '0';
	      }

	      if (currentTime >= duration || data.playerState === 3) {
	        currentTime = 'end';
	        percentWatched = '100';
	      } // If went to the end of the video, and fired "pause" event, don't fire pause event b/c it's really
	      // the end of the video, so just let "end" event fire and tag metrics.


	      if (currentTime === 'end' && data.playerState === 1) {
	        return;
	      }

	      var eventData = {
	        type: 'video',
	        primaryCategory: 'VIDEO',
	        eventName: data.title,
	        eventCategoryGroup: data.playerType,
	        executionPath: data.videoId,
	        execPathReturnCode: playerState,
	        eventVidStatus: data.playerState,
	        eventVidTimeStamp: currentTime,
	        eventVidLength: duration,
	        eventVidPlayed: percentWatched + '%'
	      };

	      try {
	        this.registerEvent(eventData);
	      } catch (err) {
	        if (_env !== 'production') {
	          console.error('Error firing video metrics:', err);
	        }
	      }
	    }
	  }]);

	  return AnalyticsAPI;
	}();

	/**
	 * Sets the Kaltura Partner ID, set by environment variable "KALTURA_PARTNER_ID"
	 *
	 * @type {number}
	 * @private
	 */

	var _partnerId = process.env.KALTURA_PARTNER_ID || 1773841;
	/**
	 * Sets the Kaltura UIConf ID, set by environment variable "KALTURA_UICONF_ID"
	 *
	 * @type {number}
	 * @private
	 */


	var _uiConfId = process.env.KALTURA_UICONF_ID || 27941801;
	/**
	 * @type {string} _embedUrl The API URL to call
	 * @private
	 */


	var _embedUrl = "https://cdnapisec.kaltura.com/p/".concat(_partnerId, "/sp/").concat(_partnerId, "00/embedIframeJs/uiconf_id/").concat(_uiConfId, "/partner_id/").concat(_partnerId);
	/**
	 * @type {string} _thumbnailUrl
	 * @private
	 */


	var _thumbnailUrl = "https://cdnsecakmi.kaltura.com/p/".concat(_partnerId, "/thumbnail/entry_id/");
	/**
	 * Number of times to retry the script ready loop before failing
	 *
	 * @type {number}
	 * @private
	 */


	var _timeoutRetries = 50;
	/**
	 * Tracks the number of attempts for the script ready loop
	 *
	 * @type {number}
	 * @private
	 */

	var _attempt = 0;
	/**
	 * Tracks the script status
	 *
	 * @type {boolean} _scriptLoading to track the script loading or not
	 * @private
	 */

	var _scriptLoading = false;
	/**
	 * Timeout loop to check script state is the _scriptLoaded state or _scriptLoading state
	 *
	 * @param {Function} resolve Resolve function
	 * @param {Function} reject Reject function
	 * @private
	 */

	function _scriptReady(resolve, reject) {
	  /**
	   *
	   * @param {object} root.kWidget if exists then resolve
	   */
	  if (lib.kWidget) {
	    _scriptLoading = false;
	    resolve();
	  } else if (_scriptLoading) {
	    _attempt++;

	    if (_attempt < _timeoutRetries) {
	      setTimeout(function () {
	        _scriptReady(resolve, reject);
	      }, 100);
	    } else {
	      reject();
	    }
	  } else {
	    _loadScript();

	    _scriptReady(resolve, reject);
	  }
	}
	/**
	 * Returns boolean if the _scriptLoading and _scriptLoaded flag is false
	 *
	 * @private
	 */


	function _loadScript() {
	  _scriptLoading = true;
	  var script = document.createElement('script');
	  script.src = _embedUrl;
	  script.async = true;
	  document.body.appendChild(script);
	}
	/**
	 *
	 * Object to cache video data
	 *
	 * @private
	 */


	var videoData = {};
	/**
	 * VideoPlayerAPI class with methods of checking script state and
	 * embed video meta data and api data
	 *
	 * In order to set the Partner ID/UIConf ID, set the following environment
	 * variables:
	 *
	 * - KALTURA_PARTNER_ID
	 * - KALTURA_UICONF_ID
	 */

	var VideoPlayerAPI = /*#__PURE__*/function () {
	  function VideoPlayerAPI() {
	    classCallCheck(this, VideoPlayerAPI);
	  }

	  createClass(VideoPlayerAPI, null, [{
	    key: "checkScript",

	    /**
	     *
	     * Gets the full _scriptReady state
	     *
	     * @returns {Promise<*>} Promise kaltura video player file
	     */
	    value: function checkScript() {
	      return new Promise(function (resolve, reject) {
	        _scriptReady(resolve, reject);
	      });
	    }
	    /**
	     * Creates thumbnail image url with customizable params
	     *
	     * @param {object} params param object
	     * @param {string} params.videoId video id
	     * @param {string} params.height specify height in pixels
	     * @param {string} params.width specify width in pixels
	     *
	     * @returns {string} url of thumbnail image
	     *
	     * @example
	     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function thumbnail() {
	     *   const thumbnailData = {
	     *      videoId: '0_uka1msg4',
	     *      height: '240',
	     *      width: '320'
	     *   }
	     *   const thumbnailUrl = VideoPlayerAPI.getThumbnailUrl(thumbnailData);
	     * }
	     */

	  }, {
	    key: "getThumbnailUrl",
	    value: function getThumbnailUrl(_ref) {
	      var videoId = _ref.videoId,
	          height = _ref.height,
	          width = _ref.width;
	      var url = _thumbnailUrl + videoId;
	      if (height) url = url + "/height/".concat(height);
	      if (width) url = url + "/width/".concat(width);
	      return url;
	    }
	    /**
	     * Gets the embed meta data
	     *
	     * @param {string} videoId  The videoId we're embedding the placeholder for.
	     * @param {string} targetId The targetId the ID where we're putting the placeholder.
	     * @param {boolean} autoPlay Determine whether to autoplay on load of video.
	     * @returns {object}  object
	     *
	     * @example
	     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function embedMyVideo() {
	     *   const elem = document.getElementById('foo');
	     *   const videoid = '12345';
	     *   VideoPlayerAPI.embedVideo(videoid, elem);
	     * }
	     */

	  }, {
	    key: "embedVideo",
	    value: function () {
	      var _embedVideo = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(videoId, targetId, autoPlay) {
	        var fireEvent;
	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                fireEvent = this.fireEvent;
	                _context.next = 3;
	                return this.checkScript().then(function () {
	                  var promiseKWidget = new Promise(function (resolve) {
	                    lib.kWidget.embed({
	                      targetId: targetId,
	                      wid: '_' + _partnerId,
	                      uiconf_id: _uiConfId,
	                      entry_id: videoId,
	                      flashvars: {
	                        autoPlay: autoPlay,
	                        titleLabel: {
	                          plugin: true,
	                          align: 'left',
	                          text: '{mediaProxy.entry.name}'
	                        }
	                      },
	                      // Ready callback is issued for this player:
	                      readyCallback: function readyCallback(playerId) {
	                        var kdp = document.getElementById(playerId);
	                        kdp.addJsListener('playerPaused', function () {
	                          fireEvent({
	                            playerState: 1,
	                            kdp: kdp,
	                            videoId: videoId
	                          });
	                        });
	                        kdp.addJsListener('playerPlayed', function () {
	                          fireEvent({
	                            playerState: 2,
	                            kdp: kdp,
	                            videoId: videoId
	                          });
	                        });
	                        kdp.addJsListener('playerPlayEnd', function () {
	                          fireEvent({
	                            playerState: 3,
	                            kdp: kdp,
	                            videoId: videoId
	                          });
	                        });
	                        resolve(kdp);
	                      }
	                    });
	                  });
	                  return {
	                    kWidget: function kWidget() {
	                      return promiseKWidget;
	                    }
	                  };
	                });

	              case 3:
	                return _context.abrupt("return", _context.sent);

	              case 4:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function embedVideo(_x, _x2, _x3) {
	        return _embedVideo.apply(this, arguments);
	      }

	      return embedVideo;
	    }()
	    /**
	     * Fires a metrics event when the video was played.
	     * Pass events to common metrics event.
	     *
	     * @param {object} param params
	     * @param {number} param.playerState state detecting different user actions
	     * @param {object} param.kdp video object
	     * @param {string} param.videoId id of the video
	     *
	     */

	  }, {
	    key: "fireEvent",
	    value: function fireEvent(_ref2) {
	      var playerState = _ref2.playerState,
	          kdp = _ref2.kdp,
	          videoId = _ref2.videoId; // If video was played and timestamp is 0, it should be "launched" state.

	      var currentTime = Math.round(kdp.evaluate('{video.player.currentTime}'));

	      if (playerState === 2 && currentTime === 0) {
	        playerState = 0;
	      }

	      var eventData = {
	        playerType: 'kaltura',
	        title: kdp.evaluate('{mediaProxy.entry.name}'),
	        currentTime: currentTime,
	        duration: kdp.evaluate('{mediaProxy.entry.duration}'),
	        playerState: playerState,
	        videoId: videoId
	      };
	      AnalyticsAPI.videoPlayerStats(eventData);
	    }
	    /**
	     * Gets the api data
	     *
	     * @param {string} videoId  The videoId we're embedding the placeholder for.
	     * @returns {object}  object
	     *
	     * @example
	     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
	     *
	     * async function getMyVideoInfo(id) {
	     *   const data = await VideoPlayerAPI.api(id);
	     *   console.log(data);
	     * }
	     */

	  }, {
	    key: "api",
	    value: function () {
	      var _api = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(videoId) {
	        return regenerator.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return this.checkScript().then(function () {
	                  if (videoData && videoData[videoId]) {
	                    return videoData[videoId];
	                  } else {
	                    return new Promise(function (resolve) {
	                      return new lib.kWidget.api({
	                        wid: '_' + _partnerId
	                      }).doRequest({
	                        service: 'media',
	                        action: 'get',
	                        entryId: videoId
	                      }, function (jsonObj) {
	                        videoData[jsonObj.id] = jsonObj;
	                        resolve(jsonObj);
	                      });
	                    });
	                  }
	                });

	              case 2:
	                return _context2.abrupt("return", _context2.sent);

	              case 3:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function api(_x4) {
	        return _api.apply(this, arguments);
	      }

	      return api;
	    }()
	    /**
	     * Convert video duration from milliseconds to HH:MM:SS
	     *
	     * @param {string} duration video duration in milliseconds
	     * @returns {string} converted duration
	     */

	  }, {
	    key: "getVideoDuration",
	    value: function getVideoDuration(duration) {
	      var seconds = Math.floor(duration / 1000 % 60);
	      var minutes = Math.floor(duration / (1000 * 60) % 60);
	      var hours = Math.floor(duration / (1000 * 60 * 60) % 24);
	      hours = hours > 0 ? hours + ':' : '';
	      seconds = seconds < 10 ? '0' + seconds : seconds;
	      return duration && '(' + hours + minutes + ':' + seconds + ')';
	    }
	  }]);

	  return VideoPlayerAPI;
	}();

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var PlayIcon = function PlayIcon(props) {
	  return React__default.createElement("svg", props, React__default.createElement("title", null, "Group 3"), React__default.createElement("g", {
	    fill: "none",
	    fillRule: "evenodd"
	  }, React__default.createElement("circle", {
	    fillOpacity: ".9",
	    fill: "#525252",
	    cx: "32",
	    cy: "32",
	    r: "32"
	  }), React__default.createElement("path", {
	    d: "M26.556 43.111a1 1 0 0 1-1-1v-22a1 1 0 0 1 1.5-.87l19 11a1 1 0 0 1 0 1.74l-19 11a1 1 0 0 1-.5.13z",
	    fill: "#F3F3F3",
	    fillRule: "nonzero"
	  })));
	};

	PlayIcon.defaultProps = {
	  width: "64",
	  height: "64",
	  viewBox: "0 0 64 64",
	  xmlns: "http://www.w3.org/2000/svg"
	};
	var stablePrefix$a = settings$1.stablePrefix;
	var prefix$e = settings_1.prefix;
	/**
	 * VideoPlayer Image Overlay component
	 */

	var VideoImageOverlay = function VideoImageOverlay(_ref) {
	  var videoId = _ref.videoId,
	      videoData = _ref.videoData,
	      embedVideo = _ref.embedVideo;
	  return React__default.createElement("button", {
	    className: "".concat(prefix$e, "--video-player__image-overlay"),
	    "data-autoid": "".concat(stablePrefix$a, "--video-player__image-overlay"),
	    onClick: function onClick() {
	      return _embedPlayer(event, embedVideo);
	    }
	  }, React__default.createElement(Image, {
	    defaultSrc: VideoPlayerAPI.getThumbnailUrl({
	      videoId: videoId,
	      width: '655'
	    }),
	    alt: videoData.name,
	    icon: PlayIcon
	  }));
	};

	var _embedPlayer = function _embedPlayer(e, embedVideo) {
	  var element = e.target;
	  element.remove();
	  embedVideo(true);
	};

	VideoImageOverlay.propTypes = {
	  /**
	   * Video ID from Kaltura video platform.
	   */
	  videoId: PropTypes.string.isRequired,

	  /**
	   * Object containing videoData such as name, description, duration, etc.
	   */
	  videoData: PropTypes.object,

	  /**
	   * Func to set state to trigger embedding of video
	   */
	  embedVideo: PropTypes.func
	};

	var stablePrefix$b = settings$1.stablePrefix;
	var prefix$f = settings_1.prefix;
	/**
	 * VideoPlayer component.
	 */

	var VideoPlayer = function VideoPlayer(_ref) {
	  var showCaption = _ref.showCaption,
	      videoId = _ref.videoId,
	      customClassName = _ref.customClassName,
	      autoPlay = _ref.autoPlay,
	      aspectRatio = _ref.aspectRatio;

	  var _useState = React.useState({
	    description: '',
	    name: ''
	  }),
	      _useState2 = slicedToArray(_useState, 2),
	      videoData = _useState2[0],
	      setVideoData = _useState2[1]; // embedVideo is set to true when overlay thumbnail is clicked


	  var _useState3 = React.useState(false),
	      _useState4 = slicedToArray(_useState3, 2),
	      embedVideo = _useState4[0],
	      setEmbedVideo = _useState4[1];

	  var videoPlayerId = uniqueid("video-player__video-".concat(videoId, "-"));
	  var videoDuration = VideoPlayerAPI.getVideoDuration(videoData.msDuration);
	  React.useEffect(function () {
	    var stale = false;

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var newVideoData;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (!(autoPlay || embedVideo)) {
	                _context.next = 3;
	                break;
	              }

	              _context.next = 3;
	              return VideoPlayerAPI.embedVideo(videoId, "".concat(prefix$f, "--").concat(videoPlayerId), true);

	            case 3:
	              if (!stale) {
	                _context.next = 5;
	                break;
	              }

	              return _context.abrupt("return");

	            case 5:
	              _context.next = 7;
	              return VideoPlayerAPI.api(videoId);

	            case 7:
	              newVideoData = _context.sent;

	              if (!stale) {
	                _context.next = 10;
	                break;
	              }

	              return _context.abrupt("return");

	            case 10:
	              setVideoData(newVideoData);

	            case 11:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))();

	    return function () {
	      stale = true;
	    };
	  }, [autoPlay, videoId, videoPlayerId, embedVideo]);
	  var classnames = cx("".concat(prefix$f, "--video-player"), customClassName);
	  var aspectRatioClass = cx(defineProperty({}, "".concat(prefix$f, "--video-player__aspect-ratio--").concat(aspectRatio), aspectRatio));
	  return React__default.createElement("div", {
	    "aria-label": "".concat(videoData.name, " ").concat(videoDuration),
	    className: classnames
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$f, "--video-player__video-container ").concat(aspectRatioClass),
	    "data-autoid": "".concat(stablePrefix$b, "--video-player__video-").concat(videoId)
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$f, "--video-player__video"),
	    id: "".concat(prefix$f, "--").concat(videoPlayerId)
	  }, !autoPlay && React__default.createElement(VideoImageOverlay, {
	    videoId: videoId,
	    videoData: videoData,
	    embedVideo: setEmbedVideo
	  }))), showCaption && React__default.createElement("div", {
	    className: "".concat(prefix$f, "--video-player__video-caption")
	  }, videoData.name, " ", videoDuration));
	};

	VideoPlayer.propTypes = {
	  /**
	   * `true` to autoplay the video on load
	   */
	  autoPlay: PropTypes.bool,

	  /**
	   * Override default aspect ratio of `16x9`.
	   * Available aspect ratios:
	   *
	   * `16x9`, `9x16`, `2x1`, `1x2`, `4x3`, `3x4`, `1x1`
	   */
	  aspectRatio: PropTypes.string,

	  /**
	   * The CSS class name to apply.
	   */
	  customClassName: PropTypes.string,

	  /**
	   * Video ID from Kaltura video platform.
	   */
	  videoId: PropTypes.string.isRequired,

	  /**
	   * `true` to show the description.
	   */
	  showCaption: PropTypes.bool
	};
	VideoPlayer.defaultProps = {
	  autoPlay: false
	};

	var stablePrefix$c = settings$1.stablePrefix;
	var prefix$g = settings_1.prefix;
	/**
	 * LightboxMediaViewer Component.
	 */

	var LightboxMediaViewer = function LightboxMediaViewer(_ref) {
	  var media = _ref.media,
	      onClose = _ref.onClose,
	      modalProps = objectWithoutProperties(_ref, ["media", "onClose"]);

	  var _useState = React.useState({
	    title: '',
	    alt: '',
	    description: ''
	  }),
	      _useState2 = slicedToArray(_useState, 2),
	      videoData = _useState2[0],
	      setVideoData = _useState2[1];
	  /**
	   * Generates an ID for video title to be used by aria-labelledby.
	   */


	  var titleId = uniqueid('dds-');
	  /**
	   * Generates an ID for video description, to be used by aria-describedby.
	   */

	  var descriptionId = uniqueid('dds-');
	  var containerRef = React.useRef(null);
	  /**
	   * Adds aria-labelledby attribute to dialog container with video title.
	   */

	  React.useEffect(function () {
	    var containerNode = containerRef.current;
	    var dialogNode = containerNode.querySelector('div[role="dialog"]');

	    if (dialogNode && videoData.title) {
	      dialogNode.setAttribute('aria-labelledby', titleId);
	    }
	  }, [titleId, videoData.title]);
	  /**
	   * Adds aria-describedby attribute to dialog container with video description.
	   */

	  React.useEffect(function () {
	    var containerNode = containerRef.current;
	    var dialogNode = containerNode.querySelector('div[role="dialog"]');

	    if (dialogNode && videoData.description) {
	      dialogNode.setAttribute('aria-describedby', descriptionId);
	    }
	  }, [descriptionId, videoData.description]);
	  React.useEffect(function () {
	    var stale = false;

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var data;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (!(media.type === 'video')) {
	                _context.next = 7;
	                break;
	              }

	              _context.next = 3;
	              return VideoPlayerAPI.api(media.src);

	            case 3:
	              data = _context.sent;

	              if (!stale) {
	                setVideoData({
	                  title: data.name,
	                  alt: data.name,
	                  description: data.description
	                });
	              }

	              _context.next = 8;
	              break;

	            case 7:
	              setVideoData({
	                title: media.title,
	                alt: media.alt,
	                description: media.description
	              });

	            case 8:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))();

	    return function () {
	      stale = true;
	    };
	  }, [media]);
	  var videoDesc = removeHtmlTagEntities(videoData.description);
	  return React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$c, "--lightbox-media-viewer"),
	    className: "".concat(prefix$g, "--lightbox-media-viewer"),
	    ref: containerRef
	  }, React__default.createElement(ExpressiveModal, _extends_1({
	    fullwidth: true
	  }, modalProps, {
	    onClose: closeModal
	  }), React__default.createElement(ModalBody, null, React__default.createElement("div", {
	    className: "".concat(prefix$g, "--lightbox-media-viewer__container")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$g, "--lightbox-media-viewer__row")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$g, "--lightbox-media-viewer__media ").concat(prefix$g, "--no-gutter")
	  }, media.type === 'video' ? React__default.createElement(VideoPlayer, {
	    videoId: media.src,
	    autoPlay: true
	  }) : React__default.createElement(Image, {
	    defaultSrc: media.src,
	    alt: videoData.alt
	  })), React__default.createElement("div", {
	    className: "".concat(prefix$g, "--lightbox-media-viewer__media-description ").concat(prefix$g, "--no-gutter")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$g, "--lightbox-media-viewer__content")
	  }, videoData.title && React__default.createElement("div", {
	    id: titleId,
	    "data-autoid": "".concat(stablePrefix$c, "--lightbox-media-viewer__content__title"),
	    className: "".concat(prefix$g, "--lightbox-media-viewer__content__title")
	  }, videoData.title), videoData.description && React__default.createElement("div", {
	    id: descriptionId,
	    "data-autoid": "".concat(stablePrefix$c, "--lightbox-media-viewer__content__desc"),
	    className: "".concat(prefix$g, "--lightbox-media-viewer__content__desc")
	  }, videoDesc))))))));
	  /**
	   * Stop video on modal close
	   */

	  function closeModal() {
	    if ((onClose === null || onClose === void 0 ? void 0 : onClose()) !== false) {
	      lib.kWidget.addReadyCallback(function (videoId) {
	        var kdp = document.getElementById(videoId);
	        kdp.sendNotification('doStop');
	      });
	    }
	  }
	};

	LightboxMediaViewer.propTypes = {
	  /**
	   * Object containing media info. The structure is:
	   *
	   * | Name          | Data Type | Description                                                           |
	   * | ------------- | --------- | --------------------------------------------------------------------- |
	   * | `type`        | String    | Determines whether to render `image` or `video`                       |
	   * | `src`         | String    | Image link or video id                                                |
	   * | `alt`         | String    | Alternate text for image. For video, this is generated from api call. |
	   * | `title`       | String    | Title copy. For video, this is generated from api call.               |
	   * | `description` | String    | Description copy. For video, this is generated from api call.         |
	   */
	  media: PropTypes.shape({
	    type: PropTypes.string,
	    src: PropTypes.string,
	    title: PropTypes.string,
	    alt: PropTypes.string,
	    description: PropTypes.string
	  }).isRequired,

	  /**
	   * Function to be triggered on close of Modal.
	   */
	  onClose: PropTypes.func
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$6 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M16,4A12,12,0,1,1,4,16,12,12,0,0,1,16,4m0-2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Z"
	});

	var _ref3$2 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M12,23a1,1,0,0,1-.51-.14A1,1,0,0,1,11,22V10a1,1,0,0,1,.49-.86,1,1,0,0,1,1,0l11,6a1,1,0,0,1,0,1.76l-11,6A1,1,0,0,1,12,23Zm1-11.32v8.64L20.91,16Z"
	});

	var PlayOutline20 = /*#__PURE__*/React__default.forwardRef(function PlayOutline20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$6, _ref3$2, children);
	});

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Utility handles smoothScroll on the anchor element after onClick
	 *
	 * @example
	 * import { smoothScroll } from '@carbon/ibmdotcom-utilities';
	 *
	 * Here e is event param and seletor is param where you want to apply smoothscroll
	 * <a href="#anchorlinkname" onClick={smoothScroll({ e, selector })}>lorem ipsum</a>
	 *
	 * You can use this for jump to target element by providing event object.
	 * it will scroll into view of target by selecting attribute and assigning to id.
	 *
	 * @param {*} e event object
	 * @param {*} selector menu item selector id
	 * @param {number} offset top offset for the scroll
	 * @returns {null} Returns null if no scroll is needed
	 */
	var smoothScroll = function smoothScroll(e, selector) {
	  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	  var getSelector;

	  if (e !== null) {
	    e.preventDefault();
	    getSelector = e.currentTarget.getAttribute('href');
	  } else if (selector) {
	    getSelector = selector;
	  } else {
	    return null;
	  }

	  window.scroll({
	    top: document.querySelector(getSelector).getBoundingClientRect().top - offset + window.scrollY,
	    behavior: 'smooth'
	  });
	};

	/**
	 * The logic behind the CTA component
	 */

	var CTALogic = /*#__PURE__*/function () {
	  function CTALogic() {
	    classCallCheck(this, CTALogic);
	  }

	  createClass(CTALogic, null, [{
	    key: "getVideoId",

	    /**
	     * extract video id from props
	     *
	     * @param {string} style cta type ( external | jump | local)
	     * @param {object} otherProps cta type ( external | jump | local)
	     * @returns {*} behaviour object
	     */
	    value: function getVideoId(style, otherProps) {
	      switch (style) {
	        case 'text':
	          return [{
	            src: otherProps.media.src
	          }];

	        case 'card':
	          return [{
	            src: otherProps.media.src
	          }];

	        case 'feature':
	          return [{
	            src: otherProps.card.cta.media.src
	          }];

	        case 'button':
	          {
	            var videoIds = otherProps.buttons.map(function (button, key) {
	              if (button.type === 'video' && button.media) return {
	                src: button.media.src,
	                key: key
	              };
	            }).filter(function (id) {
	              return id && id;
	            });
	            return videoIds;
	          }

	        default:
	          return [];
	      }
	    }
	    /**
	     * jump to target element  onClick
	     *
	     * @param {*} e event object
	     * @param {string} type cta type ( external | jump | local)
	     * @returns {*} behaviour object
	     */

	  }, {
	    key: "jump",
	    value: function jump(e, type) {
	      return type === 'jump' ? smoothScroll(e) : null;
	    }
	    /**
	     * sets target
	     *
	     * @param {string} type cta type ( external | jump | local)
	     * @returns {string} target value
	     */

	  }, {
	    key: "external",
	    value: function external(type) {
	      return type === 'external' ? '_blank' : null;
	    }
	    /**
	     * sets icon based on link type
	     *
	     * @param {string} type cta type ( external | jump | local)
	     * @returns {*} cta type component
	     */

	  }, {
	    key: "iconSelector",
	    value: function iconSelector(type, iconPlacement) {
	      switch (type) {
	        case 'download':
	          return Download20;

	        case 'external':
	          return Launch20;

	        case 'jump':
	          return ArrowDown20;

	        case 'video':
	          return PlayOutline20;

	        case 'default':
	          return null;

	        default:
	          return iconPlacement === 'left' ? ArrowLeft20 : ArrowRight20;
	      }
	    }
	    /**
	     * Opens the LightBoxMediaViewer component when CTA is clicked
	     *
	     * @param {boolean} renderLightBox determine whether to render the lightbox
	     * @param {Function} openLightBox func to toggle the lightbox
	     * @param {object} media media object to render within the lightbox
	     * @returns {*} lightbox component
	     */

	  }, {
	    key: "launchLightBox",
	    value: function launchLightBox(renderLightBox, openLightBox, media) {
	      return renderLightBox && React__default.createElement(LightboxMediaViewer, {
	        media: media,
	        open: true,
	        onClose: function onClose() {
	          return openLightBox(false);
	        }
	      });
	    }
	    /**
	     *
	     * @param {*} e event
	     * @param {Function} openLightBox function to toggle lightbox
	     *
	     * @returns {*} set lightbox state
	     */

	  }, {
	    key: "setLightBox",
	    value: function setLightBox(e, openLightBox) {
	      e.preventDefault();
	      return openLightBox(true);
	    }
	  }]);

	  return CTALogic;
	}();

	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	/**
	 * Button subcomponent for CTA.
	 */

	var ButtonCTA = function ButtonCTA(_ref) {
	  var type = _ref.type,
	      openLightBox = _ref.openLightBox,
	      renderLightBox = _ref.renderLightBox,
	      videoTitle = _ref.videoTitle,
	      formatCTAcopy = _ref.formatCTAcopy,
	      otherProps = objectWithoutProperties(_ref, ["type", "openLightBox", "renderLightBox", "videoTitle", "formatCTAcopy"]);

	  var _useState = React.useState({}),
	      _useState2 = slicedToArray(_useState, 2),
	      mediaData = _useState2[0],
	      setMediaData = _useState2[1];

	  return type.includes('video') ? React__default.createElement("div", null, CTALogic.launchLightBox(renderLightBox, openLightBox, mediaData), !renderLightBox && React__default.createElement(ButtonGroup, {
	    buttons: _renderButtons(_objectSpread$2({
	      videoTitle: videoTitle,
	      openLightBox: openLightBox,
	      setMediaData: setMediaData,
	      formatCTAcopy: formatCTAcopy
	    }, otherProps))
	  })) : React__default.createElement(ButtonGroup, {
	    buttons: _renderButtons(_objectSpread$2({}, otherProps))
	  });
	};
	/**
	 * sets button
	 *
	 * @param {object} param param object
	 * @param {Function} param.openLightBox func to set renderLightBox state
	 * @param {Array} param.videoTitle array of video titles
	 * @param {Function} param.setMediaData func to set media data state
	 * @param {Function} param.formatCTAcopy func to format the cta copy
	 * @param {object} param.buttons object with buttons array
	 * @private
	 * @returns {*} object
	 */


	var _renderButtons = function _renderButtons(_ref2) {
	  var openLightBox = _ref2.openLightBox,
	      videoTitle = _ref2.videoTitle,
	      setMediaData = _ref2.setMediaData,
	      formatCTAcopy = _ref2.formatCTAcopy,
	      buttons = _ref2.buttons;
	  return buttons.map(function (button, key) {
	    if (button.type === 'video') {
	      button.onClick = function (e) {
	        e.preventDefault();
	        setMediaData(button.media);
	        return CTALogic.setLightBox(e, openLightBox);
	      };

	      var title = videoTitle.filter(function (name) {
	        return name.key === key;
	      });
	      button.copy = !title[0] ? button.copy : formatCTAcopy({
	        title: title[0].title,
	        duration: title[0].duration
	      });
	      button.href = '#';
	    } else {
	      button.onClick = function (e) {
	        return CTALogic.jump(e, button.type);
	      };

	      button.target = CTALogic.external(button.type);
	    }

	    button.renderIcon = CTALogic.iconSelector(button.type);
	    button.iconDescription = _renderIconDesc(button.type);
	    return button;
	  });
	};
	/**
	 * render the icon description for screen reader
	 *
	 * @param {string} type type of cta
	 *
	 * @private
	 * @returns {string} icon description
	 */


	var _renderIconDesc = function _renderIconDesc(type) {
	  switch (type) {
	    case 'external':
	      return 'external launch icon';

	    case 'jump':
	      return 'down arrow icon';

	    case 'video':
	      return 'play button icon';

	    default:
	      return 'right arrow icon';
	  }
	};

	ButtonCTA.propTypes = {
	  /**
	   * CTA type. Choose from:
	   *
	   * | Type       | SVG element Name | Description                                                      |
	   * | ---------- | ---------------- | ---------------------------------------------------------------- |
	   * | `local`    | ArrowRight20     | Describes right arrow onClick which loads in self page.          |
	   * | `jump`     | ArrowDown20      | Describes down arrow onClick which scrollToView of target.       |
	   * | `external` | Launch20         | Describes launch arrow onClick which loads in new tab.           |
	   * | `download` | Download20       | Describes download arrow onClick for downloading files.          |
	   * | `video`    | PlayOutline20    | Describes play icon onClick which loads the video in a lightbox. |
	   * | `default`  | None             | Describes the default CTA - without icon                         |
	   *
	   * For more details of icons, refer to:
	   *
	   * - [Icons library](https://www.carbondesignsystem.com/guidelines/icons/library/)!👀
	   * - [@carbon/icons-react](https://github.com/carbon-design-system/carbon/tree/master/packages/icons-react)!👀
	   * - [carbon-icons](https://www.npmjs.com/package/carbon-icons)!👀
	   */
	  type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),

	  /**
	   * Array of button objects to render.
	   */
	  buttons: PropTypes.arrayOf(PropTypes.shape({
	    type: PropTypes.oneOf(['local', 'external', 'jump', 'video']),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    mediaData: PropTypes.shape({
	      customClassName: PropTypes.string,
	      videoId: PropTypes.string.isRequired,
	      showCaption: PropTypes.bool,
	      inverse: PropTypes.bool
	    })
	  })).isRequired,

	  /**
	   * Func to set renderLightBox state.
	   */
	  openLightBox: PropTypes.func,

	  /**
	   * Bool to determine whether to open lightbox.
	   */
	  renderLightBox: PropTypes.bool,

	  /**
	   * Array of video titles.
	   */
	  videoTitle: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    duration: PropTypes.string,
	    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
	  })),

	  /**
	   * The function to set media data.
	   */
	  setMediaData: PropTypes.func,

	  /**
	   * Func to format the cta copy
	   */
	  formatCTAcopy: PropTypes.func
	};
	ButtonCTA.defaultProps = {
	  type: 'default',
	  formatCTAcopy: function formatCTAcopy(_ref3) {
	    var title = _ref3.title,
	        duration = _ref3.duration;
	    return "".concat(title, " ").concat(duration);
	  }
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$7 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M8,1C4.1,1,1,4.1,1,8c0,3.9,3.1,7,7,7s7-3.1,7-7C15,4.1,11.9,1,8,1z M7,11L4.3,8.3l0.9-0.8L7,9.3l4-3.9l0.9,0.8L7,11z"
	});

	var _ref3$3 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M7,11L4.3,8.3l0.9-0.8L7,9.3l4-3.9l0.9,0.8L7,11z",
	  "data-icon-path": "inner-path",
	  opacity: "0"
	});

	var CheckmarkFilled16 = /*#__PURE__*/React__default.forwardRef(function CheckmarkFilled16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$7, _ref3$3, children);
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$8 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
	});

	var ChevronDown16 = /*#__PURE__*/React__default.forwardRef(function ChevronDown16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$8, children);
	});

	function _typeof$1(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$1 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$1 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$1(obj);
	}

	function _extends$3() {
	  _extends$3 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$3.apply(this, arguments);
	}

	function _objectWithoutProperties$6(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$6(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$6(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _classCallCheck$2(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$2(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$2(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$2(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$1(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$1(subClass, superClass);
	}

	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$1(o, p);
	}

	function _createSuper$1(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$1(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$1(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$1(this, result);
	  };
	}

	function _possibleConstructorReturn$1(self, call) {
	  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$1(self);
	}

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$1() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$1(o) {
	  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$1(o);
	}

	function _defineProperty$7(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$h = settings_1.prefix;
	var Tile = /*#__PURE__*/function (_Component) {
	  _inherits$1(Tile, _Component);

	  var _super = _createSuper$1(Tile);

	  function Tile() {
	    _classCallCheck$2(this, Tile);

	    return _super.apply(this, arguments);
	  }

	  _createClass$2(Tile, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          className = _this$props.className,
	          light = _this$props.light,
	          other = _objectWithoutProperties$6(_this$props, ["children", "className", "light"]);

	      var tileClasses = cx("".concat(prefix$h, "--tile"), _defineProperty$7({}, "".concat(prefix$h, "--tile--light"), light), className);
	      return /*#__PURE__*/React__default.createElement("div", _extends$3({
	        className: tileClasses
	      }, other), children);
	    }
	  }]);

	  return Tile;
	}(React.Component);

	_defineProperty$7(Tile, "propTypes", {
	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node,

	  /**
	   * The CSS class names.
	   */
	  className: PropTypes.string,

	  /**
	   * `true` to use the light version. For use on $ui-01 backgrounds only.
	   * Don't use this to make tile background color same as container background color.
	   */
	  light: PropTypes.bool
	});

	_defineProperty$7(Tile, "defaultProps", {
	  light: false
	});

	var ClickableTile = /*#__PURE__*/function (_Component2) {
	  _inherits$1(ClickableTile, _Component2);

	  var _super2 = _createSuper$1(ClickableTile);

	  function ClickableTile() {
	    var _this;

	    _classCallCheck$2(this, ClickableTile);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _super2.call.apply(_super2, [this].concat(args));

	    _defineProperty$7(_assertThisInitialized$1(_this), "state", {});

	    _defineProperty$7(_assertThisInitialized$1(_this), "handleClick", function (evt) {
	      evt.persist();

	      _this.setState({
	        clicked: !_this.state.clicked
	      }, function () {
	        _this.props.handleClick(evt);
	      });
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this), "handleKeyDown", function (evt) {
	      evt.persist();

	      if (matches(evt, [Enter, Space])) {
	        _this.setState({
	          clicked: !_this.state.clicked
	        }, function () {
	          _this.props.handleKeyDown(evt);
	        });
	      } else {
	        _this.props.handleKeyDown(evt);
	      }
	    });

	    return _this;
	  }

	  _createClass$2(ClickableTile, [{
	    key: "render",
	    value: function render() {
	      var _classNames2;

	      var _this$props2 = this.props,
	          children = _this$props2.children,
	          href = _this$props2.href,
	          className = _this$props2.className,
	          light = _this$props2.light,
	          other = _objectWithoutProperties$6(_this$props2, ["children", "href", "className", "handleClick", "handleKeyDown", "clicked", "light"]);

	      var classes = cx("".concat(prefix$h, "--tile"), "".concat(prefix$h, "--tile--clickable"), (_classNames2 = {}, _defineProperty$7(_classNames2, "".concat(prefix$h, "--tile--is-clicked"), this.state.clicked), _defineProperty$7(_classNames2, "".concat(prefix$h, "--tile--light"), light), _classNames2), className);
	      return /*#__PURE__*/React__default.createElement("a", _extends$3({
	        href: href,
	        className: classes
	      }, other, {
	        onClick: this.handleClick,
	        onKeyDown: this.handleKeyDown
	      }), children);
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    // eslint-disable-next-line react/prop-types
	    value: function getDerivedStateFromProps(_ref, state) {
	      var clicked = _ref.clicked;
	      var prevClicked = state.prevClicked;
	      return prevClicked === clicked ? null : {
	        clicked: clicked,
	        prevClicked: clicked
	      };
	    }
	  }]);

	  return ClickableTile;
	}(React.Component);

	_defineProperty$7(ClickableTile, "propTypes", {
	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node,

	  /**
	   * The CSS class names.
	   */
	  className: PropTypes.string,

	  /**
	   * The href for the link.
	   */
	  href: PropTypes.string,

	  /**
	   * The rel property for the link.
	   */
	  rel: PropTypes.string,

	  /**
	   * `true` to use the light version. For use on $ui-01 backgrounds only.
	   * Don't use this to make tile background color same as container background color.
	   */
	  light: PropTypes.bool,

	  /**
	   * Specify the function to run when the ClickableTile is clicked
	   */
	  handleClick: PropTypes.func,

	  /**
	   * Specify the function to run when the ClickableTile is interacted with via a keyboard
	   */
	  handleKeyDown: PropTypes.func
	});

	_defineProperty$7(ClickableTile, "defaultProps", {
	  clicked: false,
	  handleClick: function handleClick() {},
	  handleKeyDown: function handleKeyDown() {},
	  light: false
	});

	var SelectableTile = /*#__PURE__*/function (_Component3) {
	  _inherits$1(SelectableTile, _Component3);

	  var _super3 = _createSuper$1(SelectableTile);

	  function SelectableTile() {
	    var _this2;

	    _classCallCheck$2(this, SelectableTile);

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    _this2 = _super3.call.apply(_super3, [this].concat(args));

	    _defineProperty$7(_assertThisInitialized$1(_this2), "state", {
	      selected: _this2.props.selected
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this2), "handleClick", function (evt) {
	      evt.preventDefault();
	      evt.persist();

	      _this2.setState({
	        selected: !_this2.state.selected
	      }, function () {
	        _this2.props.handleClick(evt);

	        _this2.props.onChange(evt);
	      });
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this2), "handleKeyDown", function (evt) {
	      evt.persist();

	      if (matches(evt, [Enter, Space])) {
	        evt.preventDefault();

	        _this2.setState({
	          selected: !_this2.state.selected
	        }, function () {
	          _this2.props.handleKeyDown(evt);

	          _this2.props.onChange(evt);
	        });
	      } else {
	        _this2.props.handleKeyDown(evt);
	      }
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this2), "handleOnChange", function (event) {
	      _this2.setState({
	        selected: event.target.checked
	      });

	      _this2.props.onChange(event);
	    });

	    return _this2;
	  }

	  _createClass$2(SelectableTile, [{
	    key: "render",
	    value: function render() {
	      var _classNames3,
	          _this3 = this;

	      var _this$props3 = this.props,
	          children = _this$props3.children,
	          id = _this$props3.id,
	          tabIndex = _this$props3.tabIndex,
	          value = _this$props3.value,
	          name = _this$props3.name,
	          title = _this$props3.title,
	          className = _this$props3.className,
	          light = _this$props3.light,
	          other = _objectWithoutProperties$6(_this$props3, ["children", "id", "tabIndex", "value", "name", "title", "iconDescription", "className", "handleClick", "handleKeyDown", "onChange", "light"]);

	      var classes = cx("".concat(prefix$h, "--tile"), "".concat(prefix$h, "--tile--selectable"), (_classNames3 = {}, _defineProperty$7(_classNames3, "".concat(prefix$h, "--tile--is-selected"), this.state.selected), _defineProperty$7(_classNames3, "".concat(prefix$h, "--tile--light"), light), _classNames3), className);
	      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("input", {
	        ref: function ref(input) {
	          _this3.input = input;
	        },
	        tabIndex: -1,
	        id: id,
	        className: "".concat(prefix$h, "--tile-input"),
	        value: value,
	        onChange: this.handleOnChange,
	        type: "checkbox",
	        name: name,
	        title: title,
	        checked: this.state.selected
	      }), /*#__PURE__*/React__default.createElement("label", _extends$3({
	        htmlFor: id,
	        className: classes,
	        tabIndex: tabIndex
	      }, other, {
	        onClick: this.handleClick,
	        onKeyDown: this.handleKeyDown
	      }), /*#__PURE__*/React__default.createElement("span", {
	        className: "".concat(prefix$h, "--tile__checkmark")
	      }, /*#__PURE__*/React__default.createElement(CheckmarkFilled16, null)), /*#__PURE__*/React__default.createElement("span", {
	        className: "".concat(prefix$h, "--tile-content")
	      }, children)));
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(_ref2, state) {
	      var selected = _ref2.selected;
	      var prevSelected = state.prevSelected;
	      return prevSelected === selected ? null : {
	        selected: selected,
	        prevSelected: selected
	      };
	    }
	  }]);

	  return SelectableTile;
	}(React.Component);

	_defineProperty$7(SelectableTile, "propTypes", {
	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node,

	  /**
	   * The CSS class names.
	   */
	  className: PropTypes.string,

	  /**
	   * `true` to select this tile.
	   */
	  selected: PropTypes.bool,

	  /**
	   * The ID of the `<input>`.
	   */
	  id: PropTypes.string,

	  /**
	   * The value of the `<input>`.
	   */
	  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,

	  /**
	   * The `name` of the `<input>`.
	   */
	  name: PropTypes.string,

	  /**
	   * The `title` of the `<input>`.
	   */
	  title: PropTypes.string,

	  /**
	   * The empty handler of the `<input>`.
	   */
	  onChange: PropTypes.func,

	  /**
	   * The description of the checkmark icon.
	   */
	  iconDescription: deprecate(PropTypes.string, 'The `iconDescription` prop for `RadioTile` is no longer needed and has ' + 'been deprecated. It will be moved in the next major release.'),

	  /**
	   * Specify the tab index of the wrapper element
	   */
	  tabIndex: PropTypes.number,

	  /**
	   * `true` to use the light version. For use on $ui-01 backgrounds only.
	   * Don't use this to make tile background color same as container background color.
	   */
	  light: PropTypes.bool,

	  /**
	   * Specify the function to run when the SelectableTile is clicked
	   */
	  handleClick: PropTypes.func,

	  /**
	   * Specify the function to run when the SelectableTile is interacted with via a keyboard
	   */
	  handleKeyDown: PropTypes.func
	});

	_defineProperty$7(SelectableTile, "defaultProps", {
	  value: 'value',
	  title: 'title',
	  selected: false,
	  handleClick: function handleClick() {},
	  handleKeyDown: function handleKeyDown() {},
	  onChange: function onChange() {},
	  tabIndex: 0,
	  light: false
	});

	var ExpandableTile = /*#__PURE__*/function (_Component4) {
	  _inherits$1(ExpandableTile, _Component4);

	  var _super4 = _createSuper$1(ExpandableTile);

	  function ExpandableTile() {
	    var _this4;

	    _classCallCheck$2(this, ExpandableTile);

	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    _this4 = _super4.call.apply(_super4, [this].concat(args));

	    _defineProperty$7(_assertThisInitialized$1(_this4), "state", {});

	    _defineProperty$7(_assertThisInitialized$1(_this4), "componentDidMount", function () {
	      if (_this4.tile) {
	        var getStyle = window.getComputedStyle(_this4.tile, null);

	        if (_this4.aboveTheFold) {
	          _this4.setState({
	            tileMaxHeight: _this4.aboveTheFold.getBoundingClientRect().height,
	            tilePadding: parseInt(getStyle.getPropertyValue('padding-top'), 10) + parseInt(getStyle.getPropertyValue('padding-bottom'), 10)
	          });
	        }
	      }
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this4), "componentDidUpdate", function (prevProps) {
	      if (prevProps.expanded !== _this4.props.expanded) _this4.setMaxHeight();
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this4), "setMaxHeight", function () {
	      if (_this4.state.expanded ? _this4.tileContent : _this4.aboveTheFold) {
	        _this4.setState({
	          tileMaxHeight: _this4.state.expanded ? _this4.tileContent.getBoundingClientRect().height : _this4.aboveTheFold.getBoundingClientRect().height
	        });
	      }
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this4), "handleClick", function (evt) {
	      if (!_this4.props.onBeforeClick(evt)) return;
	      evt.persist();

	      _this4.setState({
	        expanded: !_this4.state.expanded
	      }, function () {
	        _this4.setMaxHeight();

	        _this4.props.handleClick(evt);
	      });
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this4), "handleKeyDown", function (evt) {
	      if (matches(evt, [Enter, Space])) {
	        evt.persist();

	        _this4.setState({
	          expanded: !_this4.state.expanded
	        }, function () {
	          _this4.setMaxHeight();

	          _this4.props.handleClick(evt);
	        });
	      }
	    });

	    _defineProperty$7(_assertThisInitialized$1(_this4), "getChildren", function () {
	      return React__default.Children.toArray(_this4.props.children);
	    });

	    return _this4;
	  }

	  _createClass$2(ExpandableTile, [{
	    key: "render",
	    value: function render() {
	      var _classNames4,
	          _this5 = this;

	      var _this$props4 = this.props,
	          tabIndex = _this$props4.tabIndex,
	          className = _this$props4.className,
	          tileCollapsedIconText = _this$props4.tileCollapsedIconText,
	          tileExpandedIconText = _this$props4.tileExpandedIconText,
	          light = _this$props4.light,
	          other = _objectWithoutProperties$6(_this$props4, ["tabIndex", "className", "expanded", "tileMaxHeight", "tilePadding", "handleClick", "tileCollapsedIconText", "tileExpandedIconText", "onBeforeClick", "light"]);

	      var isExpanded = this.state.expanded;
	      var classes = cx("".concat(prefix$h, "--tile"), "".concat(prefix$h, "--tile--expandable"), (_classNames4 = {}, _defineProperty$7(_classNames4, "".concat(prefix$h, "--tile--is-expanded"), isExpanded), _defineProperty$7(_classNames4, "".concat(prefix$h, "--tile--light"), light), _classNames4), className);
	      var tileStyle = {
	        maxHeight: isExpanded ? null : this.state.tileMaxHeight + this.state.tilePadding
	      };
	      var childrenAsArray = this.getChildren();
	      return (
	        /*#__PURE__*/
	        // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
	        React__default.createElement("button", _extends$3({
	          type: "button",
	          ref: function ref(tile) {
	            _this5.tile = tile;
	          },
	          style: tileStyle,
	          className: classes,
	          "aria-expanded": isExpanded,
	          title: isExpanded ? tileExpandedIconText : tileCollapsedIconText
	        }, other, {
	          onClick: this.handleClick,
	          tabIndex: tabIndex
	        }), /*#__PURE__*/React__default.createElement("div", {
	          ref: function ref(tileContent) {
	            _this5.tileContent = tileContent;
	          }
	        }, /*#__PURE__*/React__default.createElement("div", {
	          ref: function ref(aboveTheFold) {
	            _this5.aboveTheFold = aboveTheFold;
	          },
	          className: "".concat(prefix$h, "--tile-content")
	        }, childrenAsArray[0]), /*#__PURE__*/React__default.createElement("div", {
	          className: "".concat(prefix$h, "--tile__chevron")
	        }, /*#__PURE__*/React__default.createElement(ChevronDown16, null)), /*#__PURE__*/React__default.createElement("div", {
	          className: "".concat(prefix$h, "--tile-content")
	        }, childrenAsArray[1])))
	      );
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps( // eslint-disable-next-line react/prop-types
	    _ref3, state) {
	      var expanded = _ref3.expanded,
	          tileMaxHeight = _ref3.tileMaxHeight,
	          tilePadding = _ref3.tilePadding;
	      var prevExpanded = state.prevExpanded,
	          prevTileMaxHeight = state.prevTileMaxHeight,
	          prevTilePadding = state.prevTilePadding,
	          currentExpanded = state.expanded,
	          currentTileMaxHeight = state.tileMaxHeight,
	          currentTilePadding = state.tilePadding;
	      var expandedChanged = prevExpanded !== expanded;
	      var tileMaxHeightChanged = prevTileMaxHeight !== tileMaxHeight;
	      var tilePaddingChanged = prevTilePadding !== tilePadding;
	      return !expandedChanged && !tileMaxHeightChanged && !tilePaddingChanged ? null : {
	        expanded: !expandedChanged ? currentExpanded : expanded,
	        tileMaxHeight: !tileMaxHeightChanged ? currentTileMaxHeight : tileMaxHeight,
	        tilePadding: !tilePaddingChanged ? currentTilePadding : tilePadding,
	        prevExpanded: expanded,
	        prevTileMaxHeight: tileMaxHeight,
	        prevTilePadding: tilePadding
	      };
	    }
	  }]);

	  return ExpandableTile;
	}(React.Component);

	_defineProperty$7(ExpandableTile, "propTypes", {
	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node,

	  /**
	   * The CSS class names.
	   */
	  className: PropTypes.string,

	  /**
	   * `true` if the tile is expanded.
	   */
	  expanded: PropTypes.bool,

	  /**
	   * optional handler to decide whether to ignore a click. returns false if click should be ignored
	   */
	  onBeforeClick: PropTypes.func,

	  /**
	   * The `tabindex` attribute.
	   */
	  tabIndex: PropTypes.number,

	  /**
	   * The description of the "collapsed" icon that can be read by screen readers.
	   */
	  tileCollapsedIconText: PropTypes.string,

	  /**
	   * The description of the "expanded" icon that can be read by screen readers.
	   */
	  tileExpandedIconText: PropTypes.string,

	  /**
	   * An ID that can be provided to aria-labelledby
	   */
	  id: PropTypes.string,

	  /**
	   * `true` to use the light version. For use on $ui-01 backgrounds only.
	   * Don't use this to make tile background color same as container background color.
	   */
	  light: PropTypes.bool,

	  /**
	   * Specify the function to run when the ExpandableTile is clicked
	   */
	  handleClick: PropTypes.func
	});

	_defineProperty$7(ExpandableTile, "defaultProps", {
	  tabIndex: 0,
	  expanded: false,
	  tileMaxHeight: 0,
	  tilePadding: 0,
	  onBeforeClick: function onBeforeClick() {
	    return true;
	  },
	  handleClick: function handleClick() {},
	  tileCollapsedIconText: 'Interact to expand Tile',
	  tileExpandedIconText: 'Interact to collapse Tile',
	  light: false
	});

	var TileAboveTheFoldContent = /*#__PURE__*/function (_Component5) {
	  _inherits$1(TileAboveTheFoldContent, _Component5);

	  var _super5 = _createSuper$1(TileAboveTheFoldContent);

	  function TileAboveTheFoldContent() {
	    _classCallCheck$2(this, TileAboveTheFoldContent);

	    return _super5.apply(this, arguments);
	  }

	  _createClass$2(TileAboveTheFoldContent, [{
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return /*#__PURE__*/React__default.createElement("span", {
	        className: "".concat(prefix$h, "--tile-content__above-the-fold")
	      }, children);
	    }
	  }]);

	  return TileAboveTheFoldContent;
	}(React.Component);

	_defineProperty$7(TileAboveTheFoldContent, "propTypes", {
	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node
	});

	var TileBelowTheFoldContent = /*#__PURE__*/function (_Component6) {
	  _inherits$1(TileBelowTheFoldContent, _Component6);

	  var _super6 = _createSuper$1(TileBelowTheFoldContent);

	  function TileBelowTheFoldContent() {
	    _classCallCheck$2(this, TileBelowTheFoldContent);

	    return _super6.apply(this, arguments);
	  }

	  _createClass$2(TileBelowTheFoldContent, [{
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return /*#__PURE__*/React__default.createElement("span", {
	        className: "".concat(prefix$h, "--tile-content__below-the-fold")
	      }, children);
	    }
	  }]);

	  return TileBelowTheFoldContent;
	}(React.Component);

	_defineProperty$7(TileBelowTheFoldContent, "propTypes", {
	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node
	});

	var purify = createCommonjsModule(function (module, exports) {
	  /*! @license DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.0.8/LICENSE */
	  (function (global, factory) {
	     module.exports = factory() ;
	  })(commonjsGlobal, function () {

	    function _toConsumableArray(arr) {
	      if (Array.isArray(arr)) {
	        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	          arr2[i] = arr[i];
	        }

	        return arr2;
	      } else {
	        return Array.from(arr);
	      }
	    }

	    var hasOwnProperty = Object.hasOwnProperty,
	        setPrototypeOf = Object.setPrototypeOf,
	        isFrozen = Object.isFrozen,
	        objectKeys = Object.keys;
	    var freeze = Object.freeze,
	        seal = Object.seal; // eslint-disable-line import/no-mutable-exports

	    var _ref = typeof Reflect !== 'undefined' && Reflect,
	        apply = _ref.apply,
	        construct = _ref.construct;

	    if (!apply) {
	      apply = function apply(fun, thisValue, args) {
	        return fun.apply(thisValue, args);
	      };
	    }

	    if (!freeze) {
	      freeze = function freeze(x) {
	        return x;
	      };
	    }

	    if (!seal) {
	      seal = function seal(x) {
	        return x;
	      };
	    }

	    if (!construct) {
	      construct = function construct(Func, args) {
	        return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
	      };
	    }

	    var arrayForEach = unapply(Array.prototype.forEach);
	    var arrayIndexOf = unapply(Array.prototype.indexOf);
	    var arrayJoin = unapply(Array.prototype.join);
	    var arrayPop = unapply(Array.prototype.pop);
	    var arrayPush = unapply(Array.prototype.push);
	    var arraySlice = unapply(Array.prototype.slice);
	    var stringToLowerCase = unapply(String.prototype.toLowerCase);
	    var stringMatch = unapply(String.prototype.match);
	    var stringReplace = unapply(String.prototype.replace);
	    var stringIndexOf = unapply(String.prototype.indexOf);
	    var stringTrim = unapply(String.prototype.trim);
	    var regExpTest = unapply(RegExp.prototype.test);
	    var regExpCreate = unconstruct(RegExp);
	    var typeErrorCreate = unconstruct(TypeError);

	    function unapply(func) {
	      return function (thisArg) {
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }

	        return apply(func, thisArg, args);
	      };
	    }

	    function unconstruct(func) {
	      return function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        return construct(func, args);
	      };
	    }
	    /* Add properties to a lookup table */


	    function addToSet(set, array) {
	      if (setPrototypeOf) {
	        // Make 'in' and truthy checks like Boolean(set.constructor)
	        // independent of any properties defined on Object.prototype.
	        // Prevent prototype setters from intercepting set as a this value.
	        setPrototypeOf(set, null);
	      }

	      var l = array.length;

	      while (l--) {
	        var element = array[l];

	        if (typeof element === 'string') {
	          var lcElement = stringToLowerCase(element);

	          if (lcElement !== element) {
	            // Config presets (e.g. tags.js, attrs.js) are immutable.
	            if (!isFrozen(array)) {
	              array[l] = lcElement;
	            }

	            element = lcElement;
	          }
	        }

	        set[element] = true;
	      }

	      return set;
	    }
	    /* Shallow clone an object */


	    function clone(object) {
	      var newObject = {};
	      var property = void 0;

	      for (property in object) {
	        if (apply(hasOwnProperty, object, [property])) {
	          newObject[property] = object[property];
	        }
	      }

	      return newObject;
	    }

	    var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

	    var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern']);
	    var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);
	    var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);
	    var text = freeze(['#text']);
	    var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);
	    var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
	    var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
	    var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']); // eslint-disable-next-line unicorn/better-regex

	    var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

	    var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
	    var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

	    var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

	    var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
	    );
	    var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
	    var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g // eslint-disable-line no-control-regex
	    );

	    var _typeof = typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol" ? function (obj) {
	      return _typeof_1(obj);
	    } : function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };

	    function _toConsumableArray$1(arr) {
	      if (Array.isArray(arr)) {
	        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	          arr2[i] = arr[i];
	        }

	        return arr2;
	      } else {
	        return Array.from(arr);
	      }
	    }

	    var getGlobal = function getGlobal() {
	      return typeof window === 'undefined' ? null : window;
	    };
	    /**
	     * Creates a no-op policy for internal use only.
	     * Don't export this function outside this module!
	     * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
	     * @param {Document} document The document object (to determine policy name suffix)
	     * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
	     * are not supported).
	     */


	    var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
	      if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
	        return null;
	      } // Allow the callers to control the unique policy name
	      // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
	      // Policy creation with duplicate names throws in Trusted Types.


	      var suffix = null;
	      var ATTR_NAME = 'data-tt-policy-suffix';

	      if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
	        suffix = document.currentScript.getAttribute(ATTR_NAME);
	      }

	      var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

	      try {
	        return trustedTypes.createPolicy(policyName, {
	          createHTML: function createHTML(html$$1) {
	            return html$$1;
	          }
	        });
	      } catch (_) {
	        // Policy creation failed (most likely another DOMPurify script has
	        // already run). Skip creating the policy, as this will only cause errors
	        // if TT are enforced.
	        console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
	        return null;
	      }
	    };

	    function createDOMPurify() {
	      var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

	      var DOMPurify = function DOMPurify(root) {
	        return createDOMPurify(root);
	      };
	      /**
	       * Version label, exposed for easier checks
	       * if DOMPurify is up to date or not
	       */


	      DOMPurify.version = '2.0.12';
	      /**
	       * Array of elements that DOMPurify removed during sanitation.
	       * Empty if nothing was removed.
	       */

	      DOMPurify.removed = [];

	      if (!window || !window.document || window.document.nodeType !== 9) {
	        // Not running in a browser, provide a factory function
	        // so that you can pass your own Window
	        DOMPurify.isSupported = false;
	        return DOMPurify;
	      }

	      var originalDocument = window.document;
	      var removeTitle = false;
	      var document = window.document;
	      var DocumentFragment = window.DocumentFragment,
	          HTMLTemplateElement = window.HTMLTemplateElement,
	          Node = window.Node,
	          NodeFilter = window.NodeFilter,
	          _window$NamedNodeMap = window.NamedNodeMap,
	          NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
	          Text = window.Text,
	          Comment = window.Comment,
	          DOMParser = window.DOMParser,
	          trustedTypes = window.trustedTypes; // As per issue #47, the web-components registry is inherited by a
	      // new document created via createHTMLDocument. As per the spec
	      // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
	      // a new empty registry is used when creating a template contents owner
	      // document, so we use that as our parent document to ensure nothing
	      // is inherited.

	      if (typeof HTMLTemplateElement === 'function') {
	        var template = document.createElement('template');

	        if (template.content && template.content.ownerDocument) {
	          document = template.content.ownerDocument;
	        }
	      }

	      var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);

	      var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';
	      var _document = document,
	          implementation = _document.implementation,
	          createNodeIterator = _document.createNodeIterator,
	          getElementsByTagName = _document.getElementsByTagName,
	          createDocumentFragment = _document.createDocumentFragment;
	      var importNode = originalDocument.importNode;
	      var hooks = {};
	      /**
	       * Expose whether this browser supports running the full DOMPurify.
	       */

	      DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;
	      var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
	          ERB_EXPR$$1 = ERB_EXPR,
	          DATA_ATTR$$1 = DATA_ATTR,
	          ARIA_ATTR$$1 = ARIA_ATTR,
	          IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
	          ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
	      var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;
	      /**
	       * We consider the elements and attributes below to be safe. Ideally
	       * don't add any new ones but feel free to remove unwanted ones.
	       */

	      /* allowed element names */

	      var ALLOWED_TAGS = null;
	      var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));
	      /* Allowed attribute names */

	      var ALLOWED_ATTR = null;
	      var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));
	      /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

	      var FORBID_TAGS = null;
	      /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

	      var FORBID_ATTR = null;
	      /* Decide if ARIA attributes are okay */

	      var ALLOW_ARIA_ATTR = true;
	      /* Decide if custom data attributes are okay */

	      var ALLOW_DATA_ATTR = true;
	      /* Decide if unknown protocols are okay */

	      var ALLOW_UNKNOWN_PROTOCOLS = false;
	      /* Output should be safe for jQuery's $() factory? */

	      var SAFE_FOR_JQUERY = false;
	      /* Output should be safe for common template engines.
	       * This means, DOMPurify removes data attributes, mustaches and ERB
	       */

	      var SAFE_FOR_TEMPLATES = false;
	      /* Decide if document with <html>... should be returned */

	      var WHOLE_DOCUMENT = false;
	      /* Track whether config is already set on this instance of DOMPurify. */

	      var SET_CONFIG = false;
	      /* Decide if all elements (e.g. style, script) must be children of
	       * document.body. By default, browsers might move them to document.head */

	      var FORCE_BODY = false;
	      /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
	       * string (or a TrustedHTML object if Trusted Types are supported).
	       * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
	       */

	      var RETURN_DOM = false;
	      /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
	       * string  (or a TrustedHTML object if Trusted Types are supported) */

	      var RETURN_DOM_FRAGMENT = false;
	      /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
	       * `Node` is imported into the current `Document`. If this flag is not enabled the
	       * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
	       * DOMPurify. */

	      var RETURN_DOM_IMPORT = false;
	      /* Try to return a Trusted Type object instead of a string, retrun a string in
	       * case Trusted Types are not supported  */

	      var RETURN_TRUSTED_TYPE = false;
	      /* Output should be free from DOM clobbering attacks? */

	      var SANITIZE_DOM = true;
	      /* Keep element content when removing element? */

	      var KEEP_CONTENT = true;
	      /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
	       * of importing it into a new Document and returning a sanitized copy */

	      var IN_PLACE = false;
	      /* Allow usage of profiles like html, svg and mathMl */

	      var USE_PROFILES = {};
	      /* Tags to ignore content of when KEEP_CONTENT is true */

	      var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
	      /* Tags that are safe for data: URIs */

	      var DATA_URI_TAGS = null;
	      var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
	      /* Attributes safe for values like "javascript:" */

	      var URI_SAFE_ATTRIBUTES = null;
	      var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);
	      /* Keep a reference to config to pass to hooks */

	      var CONFIG = null;
	      /* Ideally, do not touch anything below this line */

	      /* ______________________________________________ */

	      var formElement = document.createElement('form');
	      /**
	       * _parseConfig
	       *
	       * @param  {Object} cfg optional config literal
	       */
	      // eslint-disable-next-line complexity

	      var _parseConfig = function _parseConfig(cfg) {
	        if (CONFIG && CONFIG === cfg) {
	          return;
	        }
	        /* Shield configuration object from tampering */


	        if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
	          cfg = {};
	        }
	        /* Set configuration parameters */


	        ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
	        ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
	        URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
	        DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
	        FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
	        FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
	        USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
	        ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

	        ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

	        ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

	        SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false

	        SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

	        WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

	        RETURN_DOM = cfg.RETURN_DOM || false; // Default false

	        RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

	        RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false

	        RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

	        FORCE_BODY = cfg.FORCE_BODY || false; // Default false

	        SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

	        KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

	        IN_PLACE = cfg.IN_PLACE || false; // Default false

	        IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;

	        if (SAFE_FOR_TEMPLATES) {
	          ALLOW_DATA_ATTR = false;
	        }

	        if (RETURN_DOM_FRAGMENT) {
	          RETURN_DOM = true;
	        }
	        /* Parse profile info */


	        if (USE_PROFILES) {
	          ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
	          ALLOWED_ATTR = [];

	          if (USE_PROFILES.html === true) {
	            addToSet(ALLOWED_TAGS, html);
	            addToSet(ALLOWED_ATTR, html$1);
	          }

	          if (USE_PROFILES.svg === true) {
	            addToSet(ALLOWED_TAGS, svg);
	            addToSet(ALLOWED_ATTR, svg$1);
	            addToSet(ALLOWED_ATTR, xml);
	          }

	          if (USE_PROFILES.svgFilters === true) {
	            addToSet(ALLOWED_TAGS, svgFilters);
	            addToSet(ALLOWED_ATTR, svg$1);
	            addToSet(ALLOWED_ATTR, xml);
	          }

	          if (USE_PROFILES.mathMl === true) {
	            addToSet(ALLOWED_TAGS, mathMl);
	            addToSet(ALLOWED_ATTR, mathMl$1);
	            addToSet(ALLOWED_ATTR, xml);
	          }
	        }
	        /* Merge configuration parameters */


	        if (cfg.ADD_TAGS) {
	          if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
	            ALLOWED_TAGS = clone(ALLOWED_TAGS);
	          }

	          addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
	        }

	        if (cfg.ADD_ATTR) {
	          if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
	            ALLOWED_ATTR = clone(ALLOWED_ATTR);
	          }

	          addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
	        }

	        if (cfg.ADD_URI_SAFE_ATTR) {
	          addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
	        }
	        /* Add #text in case KEEP_CONTENT is set to true */


	        if (KEEP_CONTENT) {
	          ALLOWED_TAGS['#text'] = true;
	        }
	        /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


	        if (WHOLE_DOCUMENT) {
	          addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
	        }
	        /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


	        if (ALLOWED_TAGS.table) {
	          addToSet(ALLOWED_TAGS, ['tbody']);
	          delete FORBID_TAGS.tbody;
	        } // Prevent further manipulation of configuration.
	        // Not available in IE8, Safari 5, etc.


	        if (freeze) {
	          freeze(cfg);
	        }

	        CONFIG = cfg;
	      };
	      /**
	       * _forceRemove
	       *
	       * @param  {Node} node a DOM node
	       */


	      var _forceRemove = function _forceRemove(node) {
	        arrayPush(DOMPurify.removed, {
	          element: node
	        });

	        try {
	          // eslint-disable-next-line unicorn/prefer-node-remove
	          node.parentNode.removeChild(node);
	        } catch (_) {
	          node.outerHTML = emptyHTML;
	        }
	      };
	      /**
	       * _removeAttribute
	       *
	       * @param  {String} name an Attribute name
	       * @param  {Node} node a DOM node
	       */


	      var _removeAttribute = function _removeAttribute(name, node) {
	        try {
	          arrayPush(DOMPurify.removed, {
	            attribute: node.getAttributeNode(name),
	            from: node
	          });
	        } catch (_) {
	          arrayPush(DOMPurify.removed, {
	            attribute: null,
	            from: node
	          });
	        }

	        node.removeAttribute(name);
	      };
	      /**
	       * _initDocument
	       *
	       * @param  {String} dirty a string of dirty markup
	       * @return {Document} a DOM, filled with the dirty markup
	       */


	      var _initDocument = function _initDocument(dirty) {
	        /* Create a HTML document */
	        var doc = void 0;
	        var leadingWhitespace = void 0;

	        if (FORCE_BODY) {
	          dirty = '<remove></remove>' + dirty;
	        } else {
	          /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
	          var matches = stringMatch(dirty, /^[\r\n\t ]+/);
	          leadingWhitespace = matches && matches[0];
	        }

	        var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
	        /* Use the DOMParser API by default, fallback later if needs be */

	        try {
	          doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');
	        } catch (_) {}
	        /* Remove title to fix a mXSS bug in older MS Edge */


	        if (removeTitle) {
	          addToSet(FORBID_TAGS, ['title']);
	        }
	        /* Use createHTMLDocument in case DOMParser is not available */


	        if (!doc || !doc.documentElement) {
	          doc = implementation.createHTMLDocument('');
	          var _doc = doc,
	              body = _doc.body;
	          body.parentNode.removeChild(body.parentNode.firstElementChild);
	          body.outerHTML = dirtyPayload;
	        }

	        if (dirty && leadingWhitespace) {
	          doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);
	        }
	        /* Work on whole document or just its body */


	        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
	      };
	      /* Here we test for a broken feature in Edge that might cause mXSS */


	      if (DOMPurify.isSupported) {
	        (function () {
	          try {
	            var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');

	            if (regExpTest(/<\/title/, doc.querySelector('title').innerHTML)) {
	              removeTitle = true;
	            }
	          } catch (_) {}
	        })();
	      }
	      /**
	       * _createIterator
	       *
	       * @param  {Document} root document/fragment to create iterator for
	       * @return {Iterator} iterator instance
	       */


	      var _createIterator = function _createIterator(root) {
	        return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {
	          return NodeFilter.FILTER_ACCEPT;
	        }, false);
	      };
	      /**
	       * _isClobbered
	       *
	       * @param  {Node} elm element to check for clobbering attacks
	       * @return {Boolean} true if clobbered, false if safe
	       */


	      var _isClobbered = function _isClobbered(elm) {
	        if (elm instanceof Text || elm instanceof Comment) {
	          return false;
	        }

	        if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string') {
	          return true;
	        }

	        return false;
	      };
	      /**
	       * _isNode
	       *
	       * @param  {Node} obj object to check whether it's a DOM node
	       * @return {Boolean} true is object is a DOM node
	       */


	      var _isNode = function _isNode(object) {
	        return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
	      };
	      /**
	       * _executeHook
	       * Execute user configurable hooks
	       *
	       * @param  {String} entryPoint  Name of the hook's entry point
	       * @param  {Node} currentNode node to work on with the hook
	       * @param  {Object} data additional hook parameters
	       */


	      var _executeHook = function _executeHook(entryPoint, currentNode, data) {
	        if (!hooks[entryPoint]) {
	          return;
	        }

	        arrayForEach(hooks[entryPoint], function (hook) {
	          hook.call(DOMPurify, currentNode, data, CONFIG);
	        });
	      };
	      /**
	       * _sanitizeElements
	       *
	       * @protect nodeName
	       * @protect textContent
	       * @protect removeChild
	       *
	       * @param   {Node} currentNode to check for permission to exist
	       * @return  {Boolean} true if node was killed, false if left alive
	       */
	      // eslint-disable-next-line complexity


	      var _sanitizeElements = function _sanitizeElements(currentNode) {
	        var content = void 0;
	        /* Execute a hook if present */

	        _executeHook('beforeSanitizeElements', currentNode, null);
	        /* Check if element is clobbered or can clobber */


	        if (_isClobbered(currentNode)) {
	          _forceRemove(currentNode);

	          return true;
	        }
	        /* Now let's check the element's type and name */


	        var tagName = stringToLowerCase(currentNode.nodeName);
	        /* Execute a hook if present */

	        _executeHook('uponSanitizeElement', currentNode, {
	          tagName: tagName,
	          allowedTags: ALLOWED_TAGS
	        });
	        /* Take care of an mXSS pattern using p, br inside svg, math */


	        if ((tagName === 'svg' || tagName === 'math') && currentNode.querySelectorAll('p, br').length !== 0) {
	          _forceRemove(currentNode);

	          return true;
	        }
	        /* Remove element if anything forbids its presence */


	        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
	          /* Keep content except for bad-listed elements */
	          if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {
	            try {
	              var htmlToInsert = currentNode.innerHTML;
	              currentNode.insertAdjacentHTML('AfterEnd', trustedTypesPolicy ? trustedTypesPolicy.createHTML(htmlToInsert) : htmlToInsert);
	            } catch (_) {}
	          }

	          _forceRemove(currentNode);

	          return true;
	        }
	        /* Remove in case a noscript/noembed XSS is suspected */


	        if (tagName === 'noscript' && regExpTest(/<\/noscript/i, currentNode.innerHTML)) {
	          _forceRemove(currentNode);

	          return true;
	        }

	        if (tagName === 'noembed' && regExpTest(/<\/noembed/i, currentNode.innerHTML)) {
	          _forceRemove(currentNode);

	          return true;
	        }
	        /* Convert markup to cover jQuery behavior */


	        if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && regExpTest(/</g, currentNode.textContent)) {
	          arrayPush(DOMPurify.removed, {
	            element: currentNode.cloneNode()
	          });

	          if (currentNode.innerHTML) {
	            currentNode.innerHTML = stringReplace(currentNode.innerHTML, /</g, '&lt;');
	          } else {
	            currentNode.innerHTML = stringReplace(currentNode.textContent, /</g, '&lt;');
	          }
	        }
	        /* Sanitize element content to be template-safe */


	        if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
	          /* Get the element's text content */
	          content = currentNode.textContent;
	          content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
	          content = stringReplace(content, ERB_EXPR$$1, ' ');

	          if (currentNode.textContent !== content) {
	            arrayPush(DOMPurify.removed, {
	              element: currentNode.cloneNode()
	            });
	            currentNode.textContent = content;
	          }
	        }
	        /* Execute a hook if present */


	        _executeHook('afterSanitizeElements', currentNode, null);

	        return false;
	      };
	      /**
	       * _isValidAttribute
	       *
	       * @param  {string} lcTag Lowercase tag name of containing element.
	       * @param  {string} lcName Lowercase attribute name.
	       * @param  {string} value Attribute value.
	       * @return {Boolean} Returns true if `value` is valid, otherwise false.
	       */
	      // eslint-disable-next-line complexity


	      var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
	        /* Make sure attribute cannot clobber */
	        if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
	          return false;
	        }
	        /* Allow valid data-* attributes: At least one character after "-"
	            (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
	            XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
	            We don't need to check the value; it's always URI safe. */


	        if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) ;else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ;else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
	          return false;
	          /* Check value is safe. First, is attr inert? If so, is safe */
	        } else if (URI_SAFE_ATTRIBUTES[lcName]) ;else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ;else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ;else if (!value) ;else {
	          return false;
	        }
	        return true;
	      };
	      /**
	       * _sanitizeAttributes
	       *
	       * @protect attributes
	       * @protect nodeName
	       * @protect removeAttribute
	       * @protect setAttribute
	       *
	       * @param  {Node} currentNode to sanitize
	       */
	      // eslint-disable-next-line complexity


	      var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
	        var attr = void 0;
	        var value = void 0;
	        var lcName = void 0;
	        var idAttr = void 0;
	        var l = void 0;
	        /* Execute a hook if present */

	        _executeHook('beforeSanitizeAttributes', currentNode, null);

	        var attributes = currentNode.attributes;
	        /* Check if we have attributes; if not we might have a text node */

	        if (!attributes) {
	          return;
	        }

	        var hookEvent = {
	          attrName: '',
	          attrValue: '',
	          keepAttr: true,
	          allowedAttributes: ALLOWED_ATTR
	        };
	        l = attributes.length;
	        /* Go backwards over all attributes; safely remove bad ones */

	        while (l--) {
	          attr = attributes[l];
	          var _attr = attr,
	              name = _attr.name,
	              namespaceURI = _attr.namespaceURI;
	          value = stringTrim(attr.value);
	          lcName = stringToLowerCase(name);
	          /* Execute a hook if present */

	          hookEvent.attrName = lcName;
	          hookEvent.attrValue = value;
	          hookEvent.keepAttr = true;
	          hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

	          _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

	          value = hookEvent.attrValue;
	          /* Did the hooks approve of the attribute? */

	          if (hookEvent.forceKeepAttr) {
	            continue;
	          }
	          /* Remove attribute */
	          // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to
	          // remove a "name" attribute from an <img> tag that has an "id"
	          // attribute at the time.


	          if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {
	            idAttr = attributes.id;
	            attributes = arraySlice(attributes, []);

	            _removeAttribute('id', currentNode);

	            _removeAttribute(name, currentNode);

	            if (arrayIndexOf(attributes, idAttr) > l) {
	              currentNode.setAttribute('id', idAttr.value);
	            }
	          } else if ( // This works around a bug in Safari, where input[type=file]
	          // cannot be dynamically set after type has been removed
	          currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && hookEvent.keepAttr && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {
	            continue;
	          } else {
	            // This avoids a crash in Safari v9.0 with double-ids.
	            // The trick is to first set the id to be empty and then to
	            // remove the attribute
	            if (name === 'id') {
	              currentNode.setAttribute(name, '');
	            }

	            _removeAttribute(name, currentNode);
	          }
	          /* Did the hooks approve of the attribute? */


	          if (!hookEvent.keepAttr) {
	            continue;
	          }
	          /* Work around a security issue in jQuery 3.0 */


	          if (SAFE_FOR_JQUERY && regExpTest(/\/>/i, value)) {
	            _removeAttribute(name, currentNode);

	            continue;
	          }
	          /* Take care of an mXSS pattern using namespace switches */


	          if (regExpTest(/svg|math/i, currentNode.namespaceURI) && regExpTest(regExpCreate('</(' + arrayJoin(objectKeys(FORBID_CONTENTS), '|') + ')', 'i'), value)) {
	            _removeAttribute(name, currentNode);

	            continue;
	          }
	          /* Sanitize attribute content to be template-safe */


	          if (SAFE_FOR_TEMPLATES) {
	            value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
	            value = stringReplace(value, ERB_EXPR$$1, ' ');
	          }
	          /* Is `value` valid for this attribute? */


	          var lcTag = currentNode.nodeName.toLowerCase();

	          if (!_isValidAttribute(lcTag, lcName, value)) {
	            continue;
	          }
	          /* Handle invalid data-* attribute set by try-catching it */


	          try {
	            if (namespaceURI) {
	              currentNode.setAttributeNS(namespaceURI, name, value);
	            } else {
	              /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
	              currentNode.setAttribute(name, value);
	            }

	            arrayPop(DOMPurify.removed);
	          } catch (_) {}
	        }
	        /* Execute a hook if present */


	        _executeHook('afterSanitizeAttributes', currentNode, null);
	      };
	      /**
	       * _sanitizeShadowDOM
	       *
	       * @param  {DocumentFragment} fragment to iterate over recursively
	       */


	      var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
	        var shadowNode = void 0;

	        var shadowIterator = _createIterator(fragment);
	        /* Execute a hook if present */


	        _executeHook('beforeSanitizeShadowDOM', fragment, null);

	        while (shadowNode = shadowIterator.nextNode()) {
	          /* Execute a hook if present */
	          _executeHook('uponSanitizeShadowNode', shadowNode, null);
	          /* Sanitize tags and elements */


	          if (_sanitizeElements(shadowNode)) {
	            continue;
	          }
	          /* Deep shadow DOM detected */


	          if (shadowNode.content instanceof DocumentFragment) {
	            _sanitizeShadowDOM(shadowNode.content);
	          }
	          /* Check attributes, sanitize if necessary */


	          _sanitizeAttributes(shadowNode);
	        }
	        /* Execute a hook if present */


	        _executeHook('afterSanitizeShadowDOM', fragment, null);
	      };
	      /**
	       * Sanitize
	       * Public method providing core sanitation functionality
	       *
	       * @param {String|Node} dirty string or DOM node
	       * @param {Object} configuration object
	       */
	      // eslint-disable-next-line complexity


	      DOMPurify.sanitize = function (dirty, cfg) {
	        var body = void 0;
	        var importedNode = void 0;
	        var currentNode = void 0;
	        var oldNode = void 0;
	        var returnNode = void 0;
	        /* Make sure we have a string to sanitize.
	          DO NOT return early, as this will return the wrong type if
	          the user has requested a DOM object rather than a string */

	        if (!dirty) {
	          dirty = '<!-->';
	        }
	        /* Stringify, in case dirty is an object */


	        if (typeof dirty !== 'string' && !_isNode(dirty)) {
	          // eslint-disable-next-line no-negated-condition
	          if (typeof dirty.toString !== 'function') {
	            throw typeErrorCreate('toString is not a function');
	          } else {
	            dirty = dirty.toString();

	            if (typeof dirty !== 'string') {
	              throw typeErrorCreate('dirty is not a string, aborting');
	            }
	          }
	        }
	        /* Check we can run. Otherwise fall back or ignore */


	        if (!DOMPurify.isSupported) {
	          if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
	            if (typeof dirty === 'string') {
	              return window.toStaticHTML(dirty);
	            }

	            if (_isNode(dirty)) {
	              return window.toStaticHTML(dirty.outerHTML);
	            }
	          }

	          return dirty;
	        }
	        /* Assign config vars */


	        if (!SET_CONFIG) {
	          _parseConfig(cfg);
	        }
	        /* Clean up removed elements */


	        DOMPurify.removed = [];
	        /* Check if dirty is correctly typed for IN_PLACE */

	        if (typeof dirty === 'string') {
	          IN_PLACE = false;
	        }

	        if (IN_PLACE) ;else if (dirty instanceof Node) {
	          /* If dirty is a DOM element, append to an empty document to avoid
	             elements being stripped by the parser */
	          body = _initDocument('<!-->');
	          importedNode = body.ownerDocument.importNode(dirty, true);

	          if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
	            /* Node is already a body, use as is */
	            body = importedNode;
	          } else if (importedNode.nodeName === 'HTML') {
	            body = importedNode;
	          } else {
	            // eslint-disable-next-line unicorn/prefer-node-append
	            body.appendChild(importedNode);
	          }
	        } else {
	          /* Exit directly if we have nothing to do */
	          if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
	          dirty.indexOf('<') === -1) {
	            return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
	          }
	          /* Initialize the document to work on */


	          body = _initDocument(dirty);
	          /* Check we have a DOM node from the data */

	          if (!body) {
	            return RETURN_DOM ? null : emptyHTML;
	          }
	        }
	        /* Remove first element node (ours) if FORCE_BODY is set */

	        if (body && FORCE_BODY) {
	          _forceRemove(body.firstChild);
	        }
	        /* Get node iterator */


	        var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
	        /* Now start iterating over the created document */


	        while (currentNode = nodeIterator.nextNode()) {
	          /* Fix IE's strange behavior with manipulated textNodes #89 */
	          if (currentNode.nodeType === 3 && currentNode === oldNode) {
	            continue;
	          }
	          /* Sanitize tags and elements */


	          if (_sanitizeElements(currentNode)) {
	            continue;
	          }
	          /* Shadow DOM detected, sanitize it */


	          if (currentNode.content instanceof DocumentFragment) {
	            _sanitizeShadowDOM(currentNode.content);
	          }
	          /* Check attributes, sanitize if necessary */


	          _sanitizeAttributes(currentNode);

	          oldNode = currentNode;
	        }

	        oldNode = null;
	        /* If we sanitized `dirty` in-place, return it. */

	        if (IN_PLACE) {
	          return dirty;
	        }
	        /* Return sanitized string or DOM */


	        if (RETURN_DOM) {
	          if (RETURN_DOM_FRAGMENT) {
	            returnNode = createDocumentFragment.call(body.ownerDocument);

	            while (body.firstChild) {
	              // eslint-disable-next-line unicorn/prefer-node-append
	              returnNode.appendChild(body.firstChild);
	            }
	          } else {
	            returnNode = body;
	          }

	          if (RETURN_DOM_IMPORT) {
	            /*
	              AdoptNode() is not used because internal state is not reset
	              (e.g. the past names map of a HTMLFormElement), this is safe
	              in theory but we would rather not risk another attack vector.
	              The state that is cloned by importNode() is explicitly defined
	              by the specs.
	            */
	            returnNode = importNode.call(originalDocument, returnNode, true);
	          }

	          return returnNode;
	        }

	        var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
	        /* Sanitize final string template-safe */

	        if (SAFE_FOR_TEMPLATES) {
	          serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
	          serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
	        }

	        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
	      };
	      /**
	       * Public method to set the configuration once
	       * setConfig
	       *
	       * @param {Object} cfg configuration object
	       */


	      DOMPurify.setConfig = function (cfg) {
	        _parseConfig(cfg);

	        SET_CONFIG = true;
	      };
	      /**
	       * Public method to remove the configuration
	       * clearConfig
	       *
	       */


	      DOMPurify.clearConfig = function () {
	        CONFIG = null;
	        SET_CONFIG = false;
	      };
	      /**
	       * Public method to check if an attribute value is valid.
	       * Uses last set config, if any. Otherwise, uses config defaults.
	       * isValidAttribute
	       *
	       * @param  {string} tag Tag name of containing element.
	       * @param  {string} attr Attribute name.
	       * @param  {string} value Attribute value.
	       * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
	       */


	      DOMPurify.isValidAttribute = function (tag, attr, value) {
	        /* Initialize shared config vars if necessary. */
	        if (!CONFIG) {
	          _parseConfig({});
	        }

	        var lcTag = stringToLowerCase(tag);
	        var lcName = stringToLowerCase(attr);
	        return _isValidAttribute(lcTag, lcName, value);
	      };
	      /**
	       * AddHook
	       * Public method to add DOMPurify hooks
	       *
	       * @param {String} entryPoint entry point for the hook to add
	       * @param {Function} hookFunction function to execute
	       */


	      DOMPurify.addHook = function (entryPoint, hookFunction) {
	        if (typeof hookFunction !== 'function') {
	          return;
	        }

	        hooks[entryPoint] = hooks[entryPoint] || [];
	        arrayPush(hooks[entryPoint], hookFunction);
	      };
	      /**
	       * RemoveHook
	       * Public method to remove a DOMPurify hook at a given entryPoint
	       * (pops it from the stack of hooks if more are present)
	       *
	       * @param {String} entryPoint entry point for the hook to remove
	       */


	      DOMPurify.removeHook = function (entryPoint) {
	        if (hooks[entryPoint]) {
	          arrayPop(hooks[entryPoint]);
	        }
	      };
	      /**
	       * RemoveHooks
	       * Public method to remove all DOMPurify hooks at a given entryPoint
	       *
	       * @param  {String} entryPoint entry point for the hooks to remove
	       */


	      DOMPurify.removeHooks = function (entryPoint) {
	        if (hooks[entryPoint]) {
	          hooks[entryPoint] = [];
	        }
	      };
	      /**
	       * RemoveAllHooks
	       * Public method to remove all DOMPurify hooks
	       *
	       */


	      DOMPurify.removeAllHooks = function () {
	        hooks = {};
	      };

	      return DOMPurify;
	    }

	    var purify = createDOMPurify();
	    return purify;
	  });
	});

	var browser$1 = window.DOMPurify || (window.DOMPurify = purify.default || purify);

	var marked = createCommonjsModule(function (module, exports) {
	  /**
	   * marked - a markdown parser
	   * Copyright (c) 2011-2020, Christopher Jeffrey. (MIT Licensed)
	   * https://github.com/markedjs/marked
	   */

	  /**
	   * DO NOT EDIT THIS FILE
	   * The code in this file is generated from files in ./src/
	   */
	  (function (global, factory) {
	     module.exports = factory() ;
	  })(commonjsGlobal, function () {

	    function _defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    function _createClass(Constructor, protoProps, staticProps) {
	      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) _defineProperties(Constructor, staticProps);
	      return Constructor;
	    }

	    function _unsupportedIterableToArray(o, minLen) {
	      if (!o) return;
	      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	      var n = Object.prototype.toString.call(o).slice(8, -1);
	      if (n === "Object" && o.constructor) n = o.constructor.name;
	      if (n === "Map" || n === "Set") return Array.from(o);
	      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	    }

	    function _arrayLikeToArray(arr, len) {
	      if (len == null || len > arr.length) len = arr.length;

	      for (var i = 0, arr2 = new Array(len); i < len; i++) {
	        arr2[i] = arr[i];
	      }

	      return arr2;
	    }

	    function _createForOfIteratorHelperLoose(o) {
	      var i = 0;

	      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
	        if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        };
	        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	      }

	      i = o[Symbol.iterator]();
	      return i.next.bind(i);
	    }

	    function createCommonjsModule(fn, module) {
	      return module = {
	        exports: {}
	      }, fn(module, module.exports), module.exports;
	    }

	    var defaults = createCommonjsModule(function (module) {
	      function getDefaults() {
	        return {
	          baseUrl: null,
	          breaks: false,
	          gfm: true,
	          headerIds: true,
	          headerPrefix: '',
	          highlight: null,
	          langPrefix: 'language-',
	          mangle: true,
	          pedantic: false,
	          renderer: null,
	          sanitize: false,
	          sanitizer: null,
	          silent: false,
	          smartLists: false,
	          smartypants: false,
	          tokenizer: null,
	          walkTokens: null,
	          xhtml: false
	        };
	      }

	      function changeDefaults(newDefaults) {
	        module.exports.defaults = newDefaults;
	      }

	      module.exports = {
	        defaults: getDefaults(),
	        getDefaults: getDefaults,
	        changeDefaults: changeDefaults
	      };
	    });
	    /**
	     * Helpers
	     */

	    var escapeTest = /[&<>"']/;
	    var escapeReplace = /[&<>"']/g;
	    var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
	    var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
	    var escapeReplacements = {
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      "'": '&#39;'
	    };

	    var getEscapeReplacement = function getEscapeReplacement(ch) {
	      return escapeReplacements[ch];
	    };

	    function escape(html, encode) {
	      if (encode) {
	        if (escapeTest.test(html)) {
	          return html.replace(escapeReplace, getEscapeReplacement);
	        }
	      } else {
	        if (escapeTestNoEncode.test(html)) {
	          return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
	        }
	      }

	      return html;
	    }

	    var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

	    function unescape(html) {
	      // explicitly match decimal, hex, and named HTML entities
	      return html.replace(unescapeTest, function (_, n) {
	        n = n.toLowerCase();
	        if (n === 'colon') return ':';

	        if (n.charAt(0) === '#') {
	          return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
	        }

	        return '';
	      });
	    }

	    var caret = /(^|[^\[])\^/g;

	    function edit(regex, opt) {
	      regex = regex.source || regex;
	      opt = opt || '';
	      var obj = {
	        replace: function replace(name, val) {
	          val = val.source || val;
	          val = val.replace(caret, '$1');
	          regex = regex.replace(name, val);
	          return obj;
	        },
	        getRegex: function getRegex() {
	          return new RegExp(regex, opt);
	        }
	      };
	      return obj;
	    }

	    var nonWordAndColonTest = /[^\w:]/g;
	    var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

	    function cleanUrl(sanitize, base, href) {
	      if (sanitize) {
	        var prot;

	        try {
	          prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
	        } catch (e) {
	          return null;
	        }

	        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
	          return null;
	        }
	      }

	      if (base && !originIndependentUrl.test(href)) {
	        href = resolveUrl(base, href);
	      }

	      try {
	        href = encodeURI(href).replace(/%25/g, '%');
	      } catch (e) {
	        return null;
	      }

	      return href;
	    }

	    var baseUrls = {};
	    var justDomain = /^[^:]+:\/*[^/]*$/;
	    var protocol = /^([^:]+:)[\s\S]*$/;
	    var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

	    function resolveUrl(base, href) {
	      if (!baseUrls[' ' + base]) {
	        // we can ignore everything in base after the last slash of its path component,
	        // but we might need to add _that_
	        // https://tools.ietf.org/html/rfc3986#section-3
	        if (justDomain.test(base)) {
	          baseUrls[' ' + base] = base + '/';
	        } else {
	          baseUrls[' ' + base] = rtrim(base, '/', true);
	        }
	      }

	      base = baseUrls[' ' + base];
	      var relativeBase = base.indexOf(':') === -1;

	      if (href.substring(0, 2) === '//') {
	        if (relativeBase) {
	          return href;
	        }

	        return base.replace(protocol, '$1') + href;
	      } else if (href.charAt(0) === '/') {
	        if (relativeBase) {
	          return href;
	        }

	        return base.replace(domain, '$1') + href;
	      } else {
	        return base + href;
	      }
	    }

	    var noopTest = {
	      exec: function noopTest() {}
	    };

	    function merge(obj) {
	      var i = 1,
	          target,
	          key;

	      for (; i < arguments.length; i++) {
	        target = arguments[i];

	        for (key in target) {
	          if (Object.prototype.hasOwnProperty.call(target, key)) {
	            obj[key] = target[key];
	          }
	        }
	      }

	      return obj;
	    }

	    function splitCells(tableRow, count) {
	      // ensure that every cell-delimiting pipe has a space
	      // before it to distinguish it from an escaped pipe
	      var row = tableRow.replace(/\|/g, function (match, offset, str) {
	        var escaped = false,
	            curr = offset;

	        while (--curr >= 0 && str[curr] === '\\') {
	          escaped = !escaped;
	        }

	        if (escaped) {
	          // odd number of slashes means | is escaped
	          // so we leave it alone
	          return '|';
	        } else {
	          // add space before unescaped |
	          return ' |';
	        }
	      }),
	          cells = row.split(/ \|/);
	      var i = 0;

	      if (cells.length > count) {
	        cells.splice(count);
	      } else {
	        while (cells.length < count) {
	          cells.push('');
	        }
	      }

	      for (; i < cells.length; i++) {
	        // leading or trailing whitespace is ignored per the gfm spec
	        cells[i] = cells[i].trim().replace(/\\\|/g, '|');
	      }

	      return cells;
	    } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
	    // /c*$/ is vulnerable to REDOS.
	    // invert: Remove suffix of non-c chars instead. Default falsey.


	    function rtrim(str, c, invert) {
	      var l = str.length;

	      if (l === 0) {
	        return '';
	      } // Length of suffix matching the invert condition.


	      var suffLen = 0; // Step left until we fail to match the invert condition.

	      while (suffLen < l) {
	        var currChar = str.charAt(l - suffLen - 1);

	        if (currChar === c && !invert) {
	          suffLen++;
	        } else if (currChar !== c && invert) {
	          suffLen++;
	        } else {
	          break;
	        }
	      }

	      return str.substr(0, l - suffLen);
	    }

	    function findClosingBracket(str, b) {
	      if (str.indexOf(b[1]) === -1) {
	        return -1;
	      }

	      var l = str.length;
	      var level = 0,
	          i = 0;

	      for (; i < l; i++) {
	        if (str[i] === '\\') {
	          i++;
	        } else if (str[i] === b[0]) {
	          level++;
	        } else if (str[i] === b[1]) {
	          level--;

	          if (level < 0) {
	            return i;
	          }
	        }
	      }

	      return -1;
	    }

	    function checkSanitizeDeprecation(opt) {
	      if (opt && opt.sanitize && !opt.silent) {
	        console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
	      }
	    }

	    var helpers = {
	      escape: escape,
	      unescape: unescape,
	      edit: edit,
	      cleanUrl: cleanUrl,
	      resolveUrl: resolveUrl,
	      noopTest: noopTest,
	      merge: merge,
	      splitCells: splitCells,
	      rtrim: rtrim,
	      findClosingBracket: findClosingBracket,
	      checkSanitizeDeprecation: checkSanitizeDeprecation
	    };
	    var defaults$1 = defaults.defaults;
	    var rtrim$1 = helpers.rtrim,
	        splitCells$1 = helpers.splitCells,
	        _escape = helpers.escape,
	        findClosingBracket$1 = helpers.findClosingBracket;

	    function outputLink(cap, link, raw) {
	      var href = link.href;
	      var title = link.title ? _escape(link.title) : null;

	      if (cap[0].charAt(0) !== '!') {
	        return {
	          type: 'link',
	          raw: raw,
	          href: href,
	          title: title,
	          text: cap[1]
	        };
	      } else {
	        return {
	          type: 'image',
	          raw: raw,
	          text: _escape(cap[1]),
	          href: href,
	          title: title
	        };
	      }
	    }

	    function indentCodeCompensation(raw, text) {
	      var matchIndentToCode = raw.match(/^(\s+)(?:```)/);

	      if (matchIndentToCode === null) {
	        return text;
	      }

	      var indentToCode = matchIndentToCode[1];
	      return text.split('\n').map(function (node) {
	        var matchIndentInNode = node.match(/^\s+/);

	        if (matchIndentInNode === null) {
	          return node;
	        }

	        var indentInNode = matchIndentInNode[0];

	        if (indentInNode.length >= indentToCode.length) {
	          return node.slice(indentToCode.length);
	        }

	        return node;
	      }).join('\n');
	    }
	    /**
	     * Tokenizer
	     */


	    var Tokenizer_1 = /*#__PURE__*/function () {
	      function Tokenizer(options) {
	        this.options = options || defaults$1;
	      }

	      var _proto = Tokenizer.prototype;

	      _proto.space = function space(src) {
	        var cap = this.rules.block.newline.exec(src);

	        if (cap) {
	          if (cap[0].length > 1) {
	            return {
	              type: 'space',
	              raw: cap[0]
	            };
	          }

	          return {
	            raw: '\n'
	          };
	        }
	      };

	      _proto.code = function code(src, tokens) {
	        var cap = this.rules.block.code.exec(src);

	        if (cap) {
	          var lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.

	          if (lastToken && lastToken.type === 'paragraph') {
	            return {
	              raw: cap[0],
	              text: cap[0].trimRight()
	            };
	          }

	          var text = cap[0].replace(/^ {4}/gm, '');
	          return {
	            type: 'code',
	            raw: cap[0],
	            codeBlockStyle: 'indented',
	            text: !this.options.pedantic ? rtrim$1(text, '\n') : text
	          };
	        }
	      };

	      _proto.fences = function fences(src) {
	        var cap = this.rules.block.fences.exec(src);

	        if (cap) {
	          var raw = cap[0];
	          var text = indentCodeCompensation(raw, cap[3] || '');
	          return {
	            type: 'code',
	            raw: raw,
	            lang: cap[2] ? cap[2].trim() : cap[2],
	            text: text
	          };
	        }
	      };

	      _proto.heading = function heading(src) {
	        var cap = this.rules.block.heading.exec(src);

	        if (cap) {
	          return {
	            type: 'heading',
	            raw: cap[0],
	            depth: cap[1].length,
	            text: cap[2]
	          };
	        }
	      };

	      _proto.nptable = function nptable(src) {
	        var cap = this.rules.block.nptable.exec(src);

	        if (cap) {
	          var item = {
	            type: 'table',
	            header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
	            align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	            cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : [],
	            raw: cap[0]
	          };

	          if (item.header.length === item.align.length) {
	            var l = item.align.length;
	            var i;

	            for (i = 0; i < l; i++) {
	              if (/^ *-+: *$/.test(item.align[i])) {
	                item.align[i] = 'right';
	              } else if (/^ *:-+: *$/.test(item.align[i])) {
	                item.align[i] = 'center';
	              } else if (/^ *:-+ *$/.test(item.align[i])) {
	                item.align[i] = 'left';
	              } else {
	                item.align[i] = null;
	              }
	            }

	            l = item.cells.length;

	            for (i = 0; i < l; i++) {
	              item.cells[i] = splitCells$1(item.cells[i], item.header.length);
	            }

	            return item;
	          }
	        }
	      };

	      _proto.hr = function hr(src) {
	        var cap = this.rules.block.hr.exec(src);

	        if (cap) {
	          return {
	            type: 'hr',
	            raw: cap[0]
	          };
	        }
	      };

	      _proto.blockquote = function blockquote(src) {
	        var cap = this.rules.block.blockquote.exec(src);

	        if (cap) {
	          var text = cap[0].replace(/^ *> ?/gm, '');
	          return {
	            type: 'blockquote',
	            raw: cap[0],
	            text: text
	          };
	        }
	      };

	      _proto.list = function list(src) {
	        var cap = this.rules.block.list.exec(src);

	        if (cap) {
	          var raw = cap[0];
	          var bull = cap[2];
	          var isordered = bull.length > 1;
	          var list = {
	            type: 'list',
	            raw: raw,
	            ordered: isordered,
	            start: isordered ? +bull : '',
	            loose: false,
	            items: []
	          }; // Get each top-level item.

	          var itemMatch = cap[0].match(this.rules.block.item);
	          var next = false,
	              item,
	              space,
	              b,
	              addBack,
	              loose,
	              istask,
	              ischecked;
	          var l = itemMatch.length;

	          for (var i = 0; i < l; i++) {
	            item = itemMatch[i];
	            raw = item; // Remove the list item's bullet
	            // so it is seen as the next token.

	            space = item.length;
	            item = item.replace(/^ *([*+-]|\d+\.) */, ''); // Outdent whatever the
	            // list item contains. Hacky.

	            if (~item.indexOf('\n ')) {
	              space -= item.length;
	              item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
	            } // Determine whether the next list item belongs here.
	            // Backpedal if it does not belong in this list.


	            if (i !== l - 1) {
	              b = this.rules.block.bullet.exec(itemMatch[i + 1])[0];

	              if (bull.length > 1 ? b.length === 1 : b.length > 1 || this.options.smartLists && b !== bull) {
	                addBack = itemMatch.slice(i + 1).join('\n');
	                list.raw = list.raw.substring(0, list.raw.length - addBack.length);
	                i = l - 1;
	              }
	            } // Determine whether item is loose or not.
	            // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	            // for discount behavior.


	            loose = next || /\n\n(?!\s*$)/.test(item);

	            if (i !== l - 1) {
	              next = item.charAt(item.length - 1) === '\n';
	              if (!loose) loose = next;
	            }

	            if (loose) {
	              list.loose = true;
	            } // Check for task list items


	            istask = /^\[[ xX]\] /.test(item);
	            ischecked = undefined;

	            if (istask) {
	              ischecked = item[1] !== ' ';
	              item = item.replace(/^\[[ xX]\] +/, '');
	            }

	            list.items.push({
	              type: 'list_item',
	              raw: raw,
	              task: istask,
	              checked: ischecked,
	              loose: loose,
	              text: item
	            });
	          }

	          return list;
	        }
	      };

	      _proto.html = function html(src) {
	        var cap = this.rules.block.html.exec(src);

	        if (cap) {
	          return {
	            type: this.options.sanitize ? 'paragraph' : 'html',
	            raw: cap[0],
	            pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	            text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
	          };
	        }
	      };

	      _proto.def = function def(src) {
	        var cap = this.rules.block.def.exec(src);

	        if (cap) {
	          if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
	          var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
	          return {
	            tag: tag,
	            raw: cap[0],
	            href: cap[2],
	            title: cap[3]
	          };
	        }
	      };

	      _proto.table = function table(src) {
	        var cap = this.rules.block.table.exec(src);

	        if (cap) {
	          var item = {
	            type: 'table',
	            header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
	            align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	            cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
	          };

	          if (item.header.length === item.align.length) {
	            item.raw = cap[0];
	            var l = item.align.length;
	            var i;

	            for (i = 0; i < l; i++) {
	              if (/^ *-+: *$/.test(item.align[i])) {
	                item.align[i] = 'right';
	              } else if (/^ *:-+: *$/.test(item.align[i])) {
	                item.align[i] = 'center';
	              } else if (/^ *:-+ *$/.test(item.align[i])) {
	                item.align[i] = 'left';
	              } else {
	                item.align[i] = null;
	              }
	            }

	            l = item.cells.length;

	            for (i = 0; i < l; i++) {
	              item.cells[i] = splitCells$1(item.cells[i].replace(/^ *\| *| *\| *$/g, ''), item.header.length);
	            }

	            return item;
	          }
	        }
	      };

	      _proto.lheading = function lheading(src) {
	        var cap = this.rules.block.lheading.exec(src);

	        if (cap) {
	          return {
	            type: 'heading',
	            raw: cap[0],
	            depth: cap[2].charAt(0) === '=' ? 1 : 2,
	            text: cap[1]
	          };
	        }
	      };

	      _proto.paragraph = function paragraph(src) {
	        var cap = this.rules.block.paragraph.exec(src);

	        if (cap) {
	          return {
	            type: 'paragraph',
	            raw: cap[0],
	            text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
	          };
	        }
	      };

	      _proto.text = function text(src, tokens) {
	        var cap = this.rules.block.text.exec(src);

	        if (cap) {
	          var lastToken = tokens[tokens.length - 1];

	          if (lastToken && lastToken.type === 'text') {
	            return {
	              raw: cap[0],
	              text: cap[0]
	            };
	          }

	          return {
	            type: 'text',
	            raw: cap[0],
	            text: cap[0]
	          };
	        }
	      };

	      _proto.escape = function escape(src) {
	        var cap = this.rules.inline.escape.exec(src);

	        if (cap) {
	          return {
	            type: 'escape',
	            raw: cap[0],
	            text: _escape(cap[1])
	          };
	        }
	      };

	      _proto.tag = function tag(src, inLink, inRawBlock) {
	        var cap = this.rules.inline.tag.exec(src);

	        if (cap) {
	          if (!inLink && /^<a /i.test(cap[0])) {
	            inLink = true;
	          } else if (inLink && /^<\/a>/i.test(cap[0])) {
	            inLink = false;
	          }

	          if (!inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	            inRawBlock = true;
	          } else if (inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	            inRawBlock = false;
	          }

	          return {
	            type: this.options.sanitize ? 'text' : 'html',
	            raw: cap[0],
	            inLink: inLink,
	            inRawBlock: inRawBlock,
	            text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
	          };
	        }
	      };

	      _proto.link = function link(src) {
	        var cap = this.rules.inline.link.exec(src);

	        if (cap) {
	          var lastParenIndex = findClosingBracket$1(cap[2], '()');

	          if (lastParenIndex > -1) {
	            var start = cap[0].indexOf('!') === 0 ? 5 : 4;
	            var linkLen = start + cap[1].length + lastParenIndex;
	            cap[2] = cap[2].substring(0, lastParenIndex);
	            cap[0] = cap[0].substring(0, linkLen).trim();
	            cap[3] = '';
	          }

	          var href = cap[2];
	          var title = '';

	          if (this.options.pedantic) {
	            var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

	            if (link) {
	              href = link[1];
	              title = link[3];
	            } else {
	              title = '';
	            }
	          } else {
	            title = cap[3] ? cap[3].slice(1, -1) : '';
	          }

	          href = href.trim().replace(/^<([\s\S]*)>$/, '$1');
	          var token = outputLink(cap, {
	            href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
	            title: title ? title.replace(this.rules.inline._escapes, '$1') : title
	          }, cap[0]);
	          return token;
	        }
	      };

	      _proto.reflink = function reflink(src, links) {
	        var cap;

	        if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
	          var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	          link = links[link.toLowerCase()];

	          if (!link || !link.href) {
	            var text = cap[0].charAt(0);
	            return {
	              type: 'text',
	              raw: text,
	              text: text
	            };
	          }

	          var token = outputLink(cap, link, cap[0]);
	          return token;
	        }
	      };

	      _proto.strong = function strong(src) {
	        var cap = this.rules.inline.strong.exec(src);

	        if (cap) {
	          return {
	            type: 'strong',
	            raw: cap[0],
	            text: cap[4] || cap[3] || cap[2] || cap[1]
	          };
	        }
	      };

	      _proto.em = function em(src) {
	        var cap = this.rules.inline.em.exec(src);

	        if (cap) {
	          return {
	            type: 'em',
	            raw: cap[0],
	            text: cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]
	          };
	        }
	      };

	      _proto.codespan = function codespan(src) {
	        var cap = this.rules.inline.code.exec(src);

	        if (cap) {
	          var text = cap[2].replace(/\n/g, ' ');
	          var hasNonSpaceChars = /[^ ]/.test(text);
	          var hasSpaceCharsOnBothEnds = text.startsWith(' ') && text.endsWith(' ');

	          if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
	            text = text.substring(1, text.length - 1);
	          }

	          text = _escape(text, true);
	          return {
	            type: 'codespan',
	            raw: cap[0],
	            text: text
	          };
	        }
	      };

	      _proto.br = function br(src) {
	        var cap = this.rules.inline.br.exec(src);

	        if (cap) {
	          return {
	            type: 'br',
	            raw: cap[0]
	          };
	        }
	      };

	      _proto.del = function del(src) {
	        var cap = this.rules.inline.del.exec(src);

	        if (cap) {
	          return {
	            type: 'del',
	            raw: cap[0],
	            text: cap[1]
	          };
	        }
	      };

	      _proto.autolink = function autolink(src, mangle) {
	        var cap = this.rules.inline.autolink.exec(src);

	        if (cap) {
	          var text, href;

	          if (cap[2] === '@') {
	            text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
	            href = 'mailto:' + text;
	          } else {
	            text = _escape(cap[1]);
	            href = text;
	          }

	          return {
	            type: 'link',
	            raw: cap[0],
	            text: text,
	            href: href,
	            tokens: [{
	              type: 'text',
	              raw: text,
	              text: text
	            }]
	          };
	        }
	      };

	      _proto.url = function url(src, mangle) {
	        var cap;

	        if (cap = this.rules.inline.url.exec(src)) {
	          var text, href;

	          if (cap[2] === '@') {
	            text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
	            href = 'mailto:' + text;
	          } else {
	            // do extended autolink path validation
	            var prevCapZero;

	            do {
	              prevCapZero = cap[0];
	              cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
	            } while (prevCapZero !== cap[0]);

	            text = _escape(cap[0]);

	            if (cap[1] === 'www.') {
	              href = 'http://' + text;
	            } else {
	              href = text;
	            }
	          }

	          return {
	            type: 'link',
	            raw: cap[0],
	            text: text,
	            href: href,
	            tokens: [{
	              type: 'text',
	              raw: text,
	              text: text
	            }]
	          };
	        }
	      };

	      _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {
	        var cap = this.rules.inline.text.exec(src);

	        if (cap) {
	          var text;

	          if (inRawBlock) {
	            text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
	          } else {
	            text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
	          }

	          return {
	            type: 'text',
	            raw: cap[0],
	            text: text
	          };
	        }
	      };

	      return Tokenizer;
	    }();

	    var noopTest$1 = helpers.noopTest,
	        edit$1 = helpers.edit,
	        merge$1 = helpers.merge;
	    /**
	     * Block-Level Grammar
	     */

	    var block = {
	      newline: /^\n+/,
	      code: /^( {4}[^\n]+\n*)+/,
	      fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
	      hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
	      heading: /^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,
	      blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
	      list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	      html: '^ {0,3}(?:' // optional indentation
	      + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
	      + '|comment[^\\n]*(\\n+|$)' // (2)
	      + '|<\\?[\\s\\S]*?\\?>\\n*' // (3)
	      + '|<![A-Z][\\s\\S]*?>\\n*' // (4)
	      + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*' // (5)
	      + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
	      + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
	      + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
	      + ')',
	      def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
	      nptable: noopTest$1,
	      table: noopTest$1,
	      lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
	      // regex template, placeholders will be replaced according to different paragraph
	      // interruption rules of commonmark and the original markdown spec:
	      _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,
	      text: /^[^\n]+/
	    };
	    block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
	    block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
	    block.def = edit$1(block.def).replace('label', block._label).replace('title', block._title).getRegex();
	    block.bullet = /(?:[*+-]|\d{1,9}\.)/;
	    block.item = /^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/;
	    block.item = edit$1(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();
	    block.list = edit$1(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
	    block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
	    block._comment = /<!--(?!-?>)[\s\S]*?-->/;
	    block.html = edit$1(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
	    block.paragraph = edit$1(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
	    .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	    .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
	    .getRegex();
	    block.blockquote = edit$1(block.blockquote).replace('paragraph', block.paragraph).getRegex();
	    /**
	     * Normal Block Grammar
	     */

	    block.normal = merge$1({}, block);
	    /**
	     * GFM Block Grammar
	     */

	    block.gfm = merge$1({}, block.normal, {
	      nptable: '^ *([^|\\n ].*\\|.*)\\n' // Header
	      + ' *([-:]+ *\\|[-| :]*)' // Align
	      + '(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)',
	      // Cells
	      table: '^ *\\|(.+)\\n' // Header
	      + ' *\\|?( *[-:]+[-| :]*)' // Align
	      + '(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells

	    });
	    block.gfm.nptable = edit$1(block.gfm.nptable).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	    .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	    .getRegex();
	    block.gfm.table = edit$1(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	    .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	    .getRegex();
	    /**
	     * Pedantic grammar (original John Gruber's loose markdown specification)
	     */

	    block.pedantic = merge$1({}, block.normal, {
	      html: edit$1('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
	      + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
	      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
	      heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
	      fences: noopTest$1,
	      // fences not supported
	      paragraph: edit$1(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
	    });
	    /**
	     * Inline-Level Grammar
	     */

	    var inline = {
	      escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
	      autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
	      url: noopTest$1,
	      tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
	      + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
	      + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
	      + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
	      + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
	      // CDATA section
	      link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
	      reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
	      nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
	      strong: /^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,
	      em: /^_([^\s_])_(?!_)|^_([^\s_<][\s\S]*?[^\s_])_(?!_|[^\s,punctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\s,punctuation])|^\*([^\s*<\[])\*(?!\*)|^\*([^\s<"][\s\S]*?[^\s\[\*])\*(?![\]`punctuation])|^\*([^\s*"<\[][\s\S]*[^\s])\*(?!\*)/,
	      code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
	      br: /^( {2,}|\\)\n(?!\s*$)/,
	      del: noopTest$1,
	      text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/
	    }; // list of punctuation marks from common mark spec
	    // without ` and ] to workaround Rule 17 (inline code blocks/links)
	    // without , to work around example 393

	    inline._punctuation = '!"#$%&\'()*+\\-./:;<=>?@\\[^_{|}~';
	    inline.em = edit$1(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();
	    inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
	    inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
	    inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
	    inline.autolink = edit$1(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
	    inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
	    inline.tag = edit$1(inline.tag).replace('comment', block._comment).replace('attribute', inline._attribute).getRegex();
	    inline._label = /(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
	    inline._href = /<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/;
	    inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
	    inline.link = edit$1(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
	    inline.reflink = edit$1(inline.reflink).replace('label', inline._label).getRegex();
	    /**
	     * Normal Inline Grammar
	     */

	    inline.normal = merge$1({}, inline);
	    /**
	     * Pedantic Inline Grammar
	     */

	    inline.pedantic = merge$1({}, inline.normal, {
	      strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	      em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
	      link: edit$1(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
	      reflink: edit$1(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
	    });
	    /**
	     * GFM Inline Grammar
	     */

	    inline.gfm = merge$1({}, inline.normal, {
	      escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),
	      _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
	      url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
	      _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
	      del: /^~+(?=\S)([\s\S]*?\S)~+/,
	      text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
	    });
	    inline.gfm.url = edit$1(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
	    /**
	     * GFM + Line Breaks Inline Grammar
	     */

	    inline.breaks = merge$1({}, inline.gfm, {
	      br: edit$1(inline.br).replace('{2,}', '*').getRegex(),
	      text: edit$1(inline.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
	    });
	    var rules = {
	      block: block,
	      inline: inline
	    };
	    var defaults$2 = defaults.defaults;
	    var block$1 = rules.block,
	        inline$1 = rules.inline;
	    /**
	     * smartypants text replacement
	     */

	    function smartypants(text) {
	      return text // em-dashes
	      .replace(/---/g, "\u2014") // en-dashes
	      .replace(/--/g, "\u2013") // opening singles
	      .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
	      .replace(/'/g, "\u2019") // opening doubles
	      .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
	      .replace(/"/g, "\u201D") // ellipses
	      .replace(/\.{3}/g, "\u2026");
	    }
	    /**
	     * mangle email addresses
	     */


	    function mangle(text) {
	      var out = '',
	          i,
	          ch;
	      var l = text.length;

	      for (i = 0; i < l; i++) {
	        ch = text.charCodeAt(i);

	        if (Math.random() > 0.5) {
	          ch = 'x' + ch.toString(16);
	        }

	        out += '&#' + ch + ';';
	      }

	      return out;
	    }
	    /**
	     * Block Lexer
	     */


	    var Lexer_1 = /*#__PURE__*/function () {
	      function Lexer(options) {
	        this.tokens = [];
	        this.tokens.links = Object.create(null);
	        this.options = options || defaults$2;
	        this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();
	        this.tokenizer = this.options.tokenizer;
	        this.tokenizer.options = this.options;
	        var rules = {
	          block: block$1.normal,
	          inline: inline$1.normal
	        };

	        if (this.options.pedantic) {
	          rules.block = block$1.pedantic;
	          rules.inline = inline$1.pedantic;
	        } else if (this.options.gfm) {
	          rules.block = block$1.gfm;

	          if (this.options.breaks) {
	            rules.inline = inline$1.breaks;
	          } else {
	            rules.inline = inline$1.gfm;
	          }
	        }

	        this.tokenizer.rules = rules;
	      }
	      /**
	       * Expose Rules
	       */

	      /**
	       * Static Lex Method
	       */


	      Lexer.lex = function lex(src, options) {
	        var lexer = new Lexer(options);
	        return lexer.lex(src);
	      }
	      /**
	       * Preprocessing
	       */
	      ;

	      var _proto = Lexer.prototype;

	      _proto.lex = function lex(src) {
	        src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ');
	        this.blockTokens(src, this.tokens, true);
	        this.inline(this.tokens);
	        return this.tokens;
	      }
	      /**
	       * Lexing
	       */
	      ;

	      _proto.blockTokens = function blockTokens(src, tokens, top) {
	        if (tokens === void 0) {
	          tokens = [];
	        }

	        if (top === void 0) {
	          top = true;
	        }

	        src = src.replace(/^ +$/gm, '');
	        var token, i, l, lastToken;

	        while (src) {
	          // newline
	          if (token = this.tokenizer.space(src)) {
	            src = src.substring(token.raw.length);

	            if (token.type) {
	              tokens.push(token);
	            }

	            continue;
	          } // code


	          if (token = this.tokenizer.code(src, tokens)) {
	            src = src.substring(token.raw.length);

	            if (token.type) {
	              tokens.push(token);
	            } else {
	              lastToken = tokens[tokens.length - 1];
	              lastToken.raw += '\n' + token.raw;
	              lastToken.text += '\n' + token.text;
	            }

	            continue;
	          } // fences


	          if (token = this.tokenizer.fences(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // heading


	          if (token = this.tokenizer.heading(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // table no leading pipe (gfm)


	          if (token = this.tokenizer.nptable(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // hr


	          if (token = this.tokenizer.hr(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // blockquote


	          if (token = this.tokenizer.blockquote(src)) {
	            src = src.substring(token.raw.length);
	            token.tokens = this.blockTokens(token.text, [], top);
	            tokens.push(token);
	            continue;
	          } // list


	          if (token = this.tokenizer.list(src)) {
	            src = src.substring(token.raw.length);
	            l = token.items.length;

	            for (i = 0; i < l; i++) {
	              token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);
	            }

	            tokens.push(token);
	            continue;
	          } // html


	          if (token = this.tokenizer.html(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // def


	          if (top && (token = this.tokenizer.def(src))) {
	            src = src.substring(token.raw.length);

	            if (!this.tokens.links[token.tag]) {
	              this.tokens.links[token.tag] = {
	                href: token.href,
	                title: token.title
	              };
	            }

	            continue;
	          } // table (gfm)


	          if (token = this.tokenizer.table(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // lheading


	          if (token = this.tokenizer.lheading(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // top-level paragraph


	          if (top && (token = this.tokenizer.paragraph(src))) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // text


	          if (token = this.tokenizer.text(src, tokens)) {
	            src = src.substring(token.raw.length);

	            if (token.type) {
	              tokens.push(token);
	            } else {
	              lastToken = tokens[tokens.length - 1];
	              lastToken.raw += '\n' + token.raw;
	              lastToken.text += '\n' + token.text;
	            }

	            continue;
	          }

	          if (src) {
	            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

	            if (this.options.silent) {
	              console.error(errMsg);
	              break;
	            } else {
	              throw new Error(errMsg);
	            }
	          }
	        }

	        return tokens;
	      };

	      _proto.inline = function inline(tokens) {
	        var i, j, k, l2, row, token;
	        var l = tokens.length;

	        for (i = 0; i < l; i++) {
	          token = tokens[i];

	          switch (token.type) {
	            case 'paragraph':
	            case 'text':
	            case 'heading':
	              {
	                token.tokens = [];
	                this.inlineTokens(token.text, token.tokens);
	                break;
	              }

	            case 'table':
	              {
	                token.tokens = {
	                  header: [],
	                  cells: []
	                }; // header

	                l2 = token.header.length;

	                for (j = 0; j < l2; j++) {
	                  token.tokens.header[j] = [];
	                  this.inlineTokens(token.header[j], token.tokens.header[j]);
	                } // cells


	                l2 = token.cells.length;

	                for (j = 0; j < l2; j++) {
	                  row = token.cells[j];
	                  token.tokens.cells[j] = [];

	                  for (k = 0; k < row.length; k++) {
	                    token.tokens.cells[j][k] = [];
	                    this.inlineTokens(row[k], token.tokens.cells[j][k]);
	                  }
	                }

	                break;
	              }

	            case 'blockquote':
	              {
	                this.inline(token.tokens);
	                break;
	              }

	            case 'list':
	              {
	                l2 = token.items.length;

	                for (j = 0; j < l2; j++) {
	                  this.inline(token.items[j].tokens);
	                }

	                break;
	              }
	          }
	        }

	        return tokens;
	      }
	      /**
	       * Lexing/Compiling
	       */
	      ;

	      _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock) {
	        if (tokens === void 0) {
	          tokens = [];
	        }

	        if (inLink === void 0) {
	          inLink = false;
	        }

	        if (inRawBlock === void 0) {
	          inRawBlock = false;
	        }

	        var token;

	        while (src) {
	          // escape
	          if (token = this.tokenizer.escape(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // tag


	          if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {
	            src = src.substring(token.raw.length);
	            inLink = token.inLink;
	            inRawBlock = token.inRawBlock;
	            tokens.push(token);
	            continue;
	          } // link


	          if (token = this.tokenizer.link(src)) {
	            src = src.substring(token.raw.length);

	            if (token.type === 'link') {
	              token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
	            }

	            tokens.push(token);
	            continue;
	          } // reflink, nolink


	          if (token = this.tokenizer.reflink(src, this.tokens.links)) {
	            src = src.substring(token.raw.length);

	            if (token.type === 'link') {
	              token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
	            }

	            tokens.push(token);
	            continue;
	          } // strong


	          if (token = this.tokenizer.strong(src)) {
	            src = src.substring(token.raw.length);
	            token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	            tokens.push(token);
	            continue;
	          } // em


	          if (token = this.tokenizer.em(src)) {
	            src = src.substring(token.raw.length);
	            token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	            tokens.push(token);
	            continue;
	          } // code


	          if (token = this.tokenizer.codespan(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // br


	          if (token = this.tokenizer.br(src)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // del (gfm)


	          if (token = this.tokenizer.del(src)) {
	            src = src.substring(token.raw.length);
	            token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	            tokens.push(token);
	            continue;
	          } // autolink


	          if (token = this.tokenizer.autolink(src, mangle)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // url (gfm)


	          if (!inLink && (token = this.tokenizer.url(src, mangle))) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          } // text


	          if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            continue;
	          }

	          if (src) {
	            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

	            if (this.options.silent) {
	              console.error(errMsg);
	              break;
	            } else {
	              throw new Error(errMsg);
	            }
	          }
	        }

	        return tokens;
	      };

	      _createClass(Lexer, null, [{
	        key: "rules",
	        get: function get() {
	          return {
	            block: block$1,
	            inline: inline$1
	          };
	        }
	      }]);

	      return Lexer;
	    }();

	    var defaults$3 = defaults.defaults;
	    var cleanUrl$1 = helpers.cleanUrl,
	        escape$1 = helpers.escape;
	    /**
	     * Renderer
	     */

	    var Renderer_1 = /*#__PURE__*/function () {
	      function Renderer(options) {
	        this.options = options || defaults$3;
	      }

	      var _proto = Renderer.prototype;

	      _proto.code = function code(_code, infostring, escaped) {
	        var lang = (infostring || '').match(/\S*/)[0];

	        if (this.options.highlight) {
	          var out = this.options.highlight(_code, lang);

	          if (out != null && out !== _code) {
	            escaped = true;
	            _code = out;
	          }
	        }

	        if (!lang) {
	          return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
	        }

	        return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
	      };

	      _proto.blockquote = function blockquote(quote) {
	        return '<blockquote>\n' + quote + '</blockquote>\n';
	      };

	      _proto.html = function html(_html) {
	        return _html;
	      };

	      _proto.heading = function heading(text, level, raw, slugger) {
	        if (this.options.headerIds) {
	          return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
	        } // ignore IDs


	        return '<h' + level + '>' + text + '</h' + level + '>\n';
	      };

	      _proto.hr = function hr() {
	        return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	      };

	      _proto.list = function list(body, ordered, start) {
	        var type = ordered ? 'ol' : 'ul',
	            startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
	        return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
	      };

	      _proto.listitem = function listitem(text) {
	        return '<li>' + text + '</li>\n';
	      };

	      _proto.checkbox = function checkbox(checked) {
	        return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
	      };

	      _proto.paragraph = function paragraph(text) {
	        return '<p>' + text + '</p>\n';
	      };

	      _proto.table = function table(header, body) {
	        if (body) body = '<tbody>' + body + '</tbody>';
	        return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
	      };

	      _proto.tablerow = function tablerow(content) {
	        return '<tr>\n' + content + '</tr>\n';
	      };

	      _proto.tablecell = function tablecell(content, flags) {
	        var type = flags.header ? 'th' : 'td';
	        var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
	        return tag + content + '</' + type + '>\n';
	      } // span level renderer
	      ;

	      _proto.strong = function strong(text) {
	        return '<strong>' + text + '</strong>';
	      };

	      _proto.em = function em(text) {
	        return '<em>' + text + '</em>';
	      };

	      _proto.codespan = function codespan(text) {
	        return '<code>' + text + '</code>';
	      };

	      _proto.br = function br() {
	        return this.options.xhtml ? '<br/>' : '<br>';
	      };

	      _proto.del = function del(text) {
	        return '<del>' + text + '</del>';
	      };

	      _proto.link = function link(href, title, text) {
	        href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

	        if (href === null) {
	          return text;
	        }

	        var out = '<a href="' + escape$1(href) + '"';

	        if (title) {
	          out += ' title="' + title + '"';
	        }

	        out += '>' + text + '</a>';
	        return out;
	      };

	      _proto.image = function image(href, title, text) {
	        href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

	        if (href === null) {
	          return text;
	        }

	        var out = '<img src="' + href + '" alt="' + text + '"';

	        if (title) {
	          out += ' title="' + title + '"';
	        }

	        out += this.options.xhtml ? '/>' : '>';
	        return out;
	      };

	      _proto.text = function text(_text) {
	        return _text;
	      };

	      return Renderer;
	    }();
	    /**
	     * TextRenderer
	     * returns only the textual part of the token
	     */


	    var TextRenderer_1 = /*#__PURE__*/function () {
	      function TextRenderer() {}

	      var _proto = TextRenderer.prototype; // no need for block level renderers

	      _proto.strong = function strong(text) {
	        return text;
	      };

	      _proto.em = function em(text) {
	        return text;
	      };

	      _proto.codespan = function codespan(text) {
	        return text;
	      };

	      _proto.del = function del(text) {
	        return text;
	      };

	      _proto.html = function html(text) {
	        return text;
	      };

	      _proto.text = function text(_text) {
	        return _text;
	      };

	      _proto.link = function link(href, title, text) {
	        return '' + text;
	      };

	      _proto.image = function image(href, title, text) {
	        return '' + text;
	      };

	      _proto.br = function br() {
	        return '';
	      };

	      return TextRenderer;
	    }();
	    /**
	     * Slugger generates header id
	     */


	    var Slugger_1 = /*#__PURE__*/function () {
	      function Slugger() {
	        this.seen = {};
	      }
	      /**
	       * Convert string to unique id
	       */


	      var _proto = Slugger.prototype;

	      _proto.slug = function slug(value) {
	        var slug = value.toLowerCase().trim() // remove html tags
	        .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
	        .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');

	        if (this.seen.hasOwnProperty(slug)) {
	          var originalSlug = slug;

	          do {
	            this.seen[originalSlug]++;
	            slug = originalSlug + '-' + this.seen[originalSlug];
	          } while (this.seen.hasOwnProperty(slug));
	        }

	        this.seen[slug] = 0;
	        return slug;
	      };

	      return Slugger;
	    }();

	    var defaults$4 = defaults.defaults;
	    var unescape$1 = helpers.unescape;
	    /**
	     * Parsing & Compiling
	     */

	    var Parser_1 = /*#__PURE__*/function () {
	      function Parser(options) {
	        this.options = options || defaults$4;
	        this.options.renderer = this.options.renderer || new Renderer_1();
	        this.renderer = this.options.renderer;
	        this.renderer.options = this.options;
	        this.textRenderer = new TextRenderer_1();
	        this.slugger = new Slugger_1();
	      }
	      /**
	       * Static Parse Method
	       */


	      Parser.parse = function parse(tokens, options) {
	        var parser = new Parser(options);
	        return parser.parse(tokens);
	      }
	      /**
	       * Parse Loop
	       */
	      ;

	      var _proto = Parser.prototype;

	      _proto.parse = function parse(tokens, top) {
	        if (top === void 0) {
	          top = true;
	        }

	        var out = '',
	            i,
	            j,
	            k,
	            l2,
	            l3,
	            row,
	            cell,
	            header,
	            body,
	            token,
	            ordered,
	            start,
	            loose,
	            itemBody,
	            item,
	            checked,
	            task,
	            checkbox;
	        var l = tokens.length;

	        for (i = 0; i < l; i++) {
	          token = tokens[i];

	          switch (token.type) {
	            case 'space':
	              {
	                continue;
	              }

	            case 'hr':
	              {
	                out += this.renderer.hr();
	                continue;
	              }

	            case 'heading':
	              {
	                out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape$1(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
	                continue;
	              }

	            case 'code':
	              {
	                out += this.renderer.code(token.text, token.lang, token.escaped);
	                continue;
	              }

	            case 'table':
	              {
	                header = ''; // header

	                cell = '';
	                l2 = token.header.length;

	                for (j = 0; j < l2; j++) {
	                  cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {
	                    header: true,
	                    align: token.align[j]
	                  });
	                }

	                header += this.renderer.tablerow(cell);
	                body = '';
	                l2 = token.cells.length;

	                for (j = 0; j < l2; j++) {
	                  row = token.tokens.cells[j];
	                  cell = '';
	                  l3 = row.length;

	                  for (k = 0; k < l3; k++) {
	                    cell += this.renderer.tablecell(this.parseInline(row[k]), {
	                      header: false,
	                      align: token.align[k]
	                    });
	                  }

	                  body += this.renderer.tablerow(cell);
	                }

	                out += this.renderer.table(header, body);
	                continue;
	              }

	            case 'blockquote':
	              {
	                body = this.parse(token.tokens);
	                out += this.renderer.blockquote(body);
	                continue;
	              }

	            case 'list':
	              {
	                ordered = token.ordered;
	                start = token.start;
	                loose = token.loose;
	                l2 = token.items.length;
	                body = '';

	                for (j = 0; j < l2; j++) {
	                  item = token.items[j];
	                  checked = item.checked;
	                  task = item.task;
	                  itemBody = '';

	                  if (item.task) {
	                    checkbox = this.renderer.checkbox(checked);

	                    if (loose) {
	                      if (item.tokens.length > 0 && item.tokens[0].type === 'text') {
	                        item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;

	                        if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
	                          item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
	                        }
	                      } else {
	                        item.tokens.unshift({
	                          type: 'text',
	                          text: checkbox
	                        });
	                      }
	                    } else {
	                      itemBody += checkbox;
	                    }
	                  }

	                  itemBody += this.parse(item.tokens, loose);
	                  body += this.renderer.listitem(itemBody, task, checked);
	                }

	                out += this.renderer.list(body, ordered, start);
	                continue;
	              }

	            case 'html':
	              {
	                // TODO parse inline content if parameter markdown=1
	                out += this.renderer.html(token.text);
	                continue;
	              }

	            case 'paragraph':
	              {
	                out += this.renderer.paragraph(this.parseInline(token.tokens));
	                continue;
	              }

	            case 'text':
	              {
	                body = token.tokens ? this.parseInline(token.tokens) : token.text;

	                while (i + 1 < l && tokens[i + 1].type === 'text') {
	                  token = tokens[++i];
	                  body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
	                }

	                out += top ? this.renderer.paragraph(body) : body;
	                continue;
	              }

	            default:
	              {
	                var errMsg = 'Token with "' + token.type + '" type was not found.';

	                if (this.options.silent) {
	                  console.error(errMsg);
	                  return;
	                } else {
	                  throw new Error(errMsg);
	                }
	              }
	          }
	        }

	        return out;
	      }
	      /**
	       * Parse Inline Tokens
	       */
	      ;

	      _proto.parseInline = function parseInline(tokens, renderer) {
	        renderer = renderer || this.renderer;
	        var out = '',
	            i,
	            token;
	        var l = tokens.length;

	        for (i = 0; i < l; i++) {
	          token = tokens[i];

	          switch (token.type) {
	            case 'escape':
	              {
	                out += renderer.text(token.text);
	                break;
	              }

	            case 'html':
	              {
	                out += renderer.html(token.text);
	                break;
	              }

	            case 'link':
	              {
	                out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
	                break;
	              }

	            case 'image':
	              {
	                out += renderer.image(token.href, token.title, token.text);
	                break;
	              }

	            case 'strong':
	              {
	                out += renderer.strong(this.parseInline(token.tokens, renderer));
	                break;
	              }

	            case 'em':
	              {
	                out += renderer.em(this.parseInline(token.tokens, renderer));
	                break;
	              }

	            case 'codespan':
	              {
	                out += renderer.codespan(token.text);
	                break;
	              }

	            case 'br':
	              {
	                out += renderer.br();
	                break;
	              }

	            case 'del':
	              {
	                out += renderer.del(this.parseInline(token.tokens, renderer));
	                break;
	              }

	            case 'text':
	              {
	                out += renderer.text(token.text);
	                break;
	              }

	            default:
	              {
	                var errMsg = 'Token with "' + token.type + '" type was not found.';

	                if (this.options.silent) {
	                  console.error(errMsg);
	                  return;
	                } else {
	                  throw new Error(errMsg);
	                }
	              }
	          }
	        }

	        return out;
	      };

	      return Parser;
	    }();

	    var merge$2 = helpers.merge,
	        checkSanitizeDeprecation$1 = helpers.checkSanitizeDeprecation,
	        escape$2 = helpers.escape;
	    var getDefaults = defaults.getDefaults,
	        changeDefaults = defaults.changeDefaults,
	        defaults$5 = defaults.defaults;
	    /**
	     * Marked
	     */

	    function marked(src, opt, callback) {
	      // throw error in case of non string input
	      if (typeof src === 'undefined' || src === null) {
	        throw new Error('marked(): input parameter is undefined or null');
	      }

	      if (typeof src !== 'string') {
	        throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
	      }

	      if (typeof opt === 'function') {
	        callback = opt;
	        opt = null;
	      }

	      opt = merge$2({}, marked.defaults, opt || {});
	      checkSanitizeDeprecation$1(opt);

	      if (callback) {
	        var highlight = opt.highlight;
	        var tokens;

	        try {
	          tokens = Lexer_1.lex(src, opt);
	        } catch (e) {
	          return callback(e);
	        }

	        var done = function done(err) {
	          var out;

	          if (!err) {
	            try {
	              out = Parser_1.parse(tokens, opt);
	            } catch (e) {
	              err = e;
	            }
	          }

	          opt.highlight = highlight;
	          return err ? callback(err) : callback(null, out);
	        };

	        if (!highlight || highlight.length < 3) {
	          return done();
	        }

	        delete opt.highlight;
	        if (!tokens.length) return done();
	        var pending = 0;
	        marked.walkTokens(tokens, function (token) {
	          if (token.type === 'code') {
	            pending++;
	            highlight(token.text, token.lang, function (err, code) {
	              if (err) {
	                return done(err);
	              }

	              if (code != null && code !== token.text) {
	                token.text = code;
	                token.escaped = true;
	              }

	              pending--;

	              if (pending === 0) {
	                done();
	              }
	            });
	          }
	        });

	        if (pending === 0) {
	          done();
	        }

	        return;
	      }

	      try {
	        var _tokens = Lexer_1.lex(src, opt);

	        if (opt.walkTokens) {
	          marked.walkTokens(_tokens, opt.walkTokens);
	        }

	        return Parser_1.parse(_tokens, opt);
	      } catch (e) {
	        e.message += '\nPlease report this to https://github.com/markedjs/marked.';

	        if (opt.silent) {
	          return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';
	        }

	        throw e;
	      }
	    }
	    /**
	     * Options
	     */


	    marked.options = marked.setOptions = function (opt) {
	      merge$2(marked.defaults, opt);
	      changeDefaults(marked.defaults);
	      return marked;
	    };

	    marked.getDefaults = getDefaults;
	    marked.defaults = defaults$5;
	    /**
	     * Use Extension
	     */

	    marked.use = function (extension) {
	      var opts = merge$2({}, extension);

	      if (extension.renderer) {
	        (function () {
	          var renderer = marked.defaults.renderer || new Renderer_1();

	          var _loop = function _loop(prop) {
	            var prevRenderer = renderer[prop];

	            renderer[prop] = function () {
	              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	              }

	              var ret = extension.renderer[prop].apply(renderer, args);

	              if (ret === false) {
	                ret = prevRenderer.apply(renderer, args);
	              }

	              return ret;
	            };
	          };

	          for (var prop in extension.renderer) {
	            _loop(prop);
	          }

	          opts.renderer = renderer;
	        })();
	      }

	      if (extension.tokenizer) {
	        (function () {
	          var tokenizer = marked.defaults.tokenizer || new Tokenizer_1();

	          var _loop2 = function _loop2(prop) {
	            var prevTokenizer = tokenizer[prop];

	            tokenizer[prop] = function () {
	              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                args[_key2] = arguments[_key2];
	              }

	              var ret = extension.tokenizer[prop].apply(tokenizer, args);

	              if (ret === false) {
	                ret = prevTokenizer.apply(tokenizer, args);
	              }

	              return ret;
	            };
	          };

	          for (var prop in extension.tokenizer) {
	            _loop2(prop);
	          }

	          opts.tokenizer = tokenizer;
	        })();
	      }

	      if (extension.walkTokens) {
	        var walkTokens = marked.defaults.walkTokens;

	        opts.walkTokens = function (token) {
	          extension.walkTokens(token);

	          if (walkTokens) {
	            walkTokens(token);
	          }
	        };
	      }

	      marked.setOptions(opts);
	    };
	    /**
	     * Run callback for every token
	     */


	    marked.walkTokens = function (tokens, callback) {
	      for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {
	        var token = _step.value;
	        callback(token);

	        switch (token.type) {
	          case 'table':
	            {
	              for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {
	                var cell = _step2.value;
	                marked.walkTokens(cell, callback);
	              }

	              for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {
	                var row = _step3.value;

	                for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {
	                  var _cell = _step4.value;
	                  marked.walkTokens(_cell, callback);
	                }
	              }

	              break;
	            }

	          case 'list':
	            {
	              marked.walkTokens(token.items, callback);
	              break;
	            }

	          default:
	            {
	              if (token.tokens) {
	                marked.walkTokens(token.tokens, callback);
	              }
	            }
	        }
	      }
	    };
	    /**
	     * Expose
	     */


	    marked.Parser = Parser_1;
	    marked.parser = Parser_1.parse;
	    marked.Renderer = Renderer_1;
	    marked.TextRenderer = TextRenderer_1;
	    marked.Lexer = Lexer_1;
	    marked.lexer = Lexer_1.lex;
	    marked.Tokenizer = Tokenizer_1;
	    marked.Slugger = Slugger_1;
	    marked.parse = marked;
	    var marked_1 = marked;
	    return marked_1;
	  });
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Settings.
	 * @exports CarbonComponents.settings
	 * @type Object
	 * @property {boolean} [disableAutoInit]
	 *   Disables automatic instantiation of components.
	 *   By default (`CarbonComponents.disableAutoInit` is `false`),
	 *   carbon-components attempts to instantiate components automatically
	 *   by searching for elements with `data-component-name` (e.g. `data-loading`) attribute
	 *   or upon DOM events (e.g. clicking) on such elements.
	 *   See each components' static `.init()` methods for details.
	 * @property {string} [prefix=bx]
	 *   Brand prefix. Should be in sync with `$prefix` Sass variable in carbon-components/src/globals/scss/_vars.scss.
	 * // @todo given that the default value is so long, is it appropriate to put in the JSDoc?
	 * @property {string} [selectorTabbable]
	 *   A selector selecting tabbable/focusable nodes.
	 *   By default selectorTabbable references links, areas, inputs, buttons, selects, textareas,
	 *   iframes, objects, embeds, or elements explicitly using tabindex or contenteditable attributes
	 *   as long as the element is not `disabled` or the `tabindex="-1"`.
	 * @property {string} [selectorFocusable]
	 *   CSS selector that selects major nodes that are click focusable
	 *   This property is identical to selectorTabbable with the exception of
	 *   the `:not([tabindex='-1'])` pseudo class
	 */
	var settings$2 = {
	  prefix: 'bx',
	  selectorTabbable: "\n    a[href], area[href], input:not([disabled]):not([tabindex='-1']),\n    button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),\n    textarea:not([disabled]):not([tabindex='-1']),\n    iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]\n  ",
	  selectorFocusable: "\n    a[href], area[href], input:not([disabled]),\n    button:not([disabled]),select:not([disabled]),\n    textarea:not([disabled]),\n    iframe, object, embed, *[tabindex], *[contenteditable=true]\n  "
	};
	var settings_1$1 = settings$2;

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var prefix$i = settings_1$1.prefix;
	var _htmlTagRegex$1 = /<.*?>/g;
	var _cleanStringRegex$1 = /\n|\s{2,}|&([a-zA-Z]+);/g;
	/**
	 * Removes any html tags from a string and keeps inner text if any
	 *
	 * @param {string} str String to be checked for html tags
	 * @returns {string} String with html tags stripped out
	 * @private
	 */

	var _removeHtmlTags$1 = function _removeHtmlTags(str) {
	  return str.replace(_htmlTagRegex$1, '');
	};
	/**
	 * Cleans string by replacing multiple spaces with a single space
	 * and removing single new lines.
	 *
	 * @param {string} str String to be checked
	 * @returns {string} String with multiple spaces and single new lines removed
	 * @private
	 */


	var _cleanString$1 = function _cleanString(str) {
	  return str.replace(_cleanStringRegex$1, ' ');
	};
	/**
	 * Converts markdown syntaxes into html
	 *
	 * @param {string} str String to convert to html
	 * @param {object} [options={}] Object with options for the conversion
	 * @param {boolean} [options.allowHtml=false] Defines if should allow or remove html tags
	 * @returns {string} String converted to html
	 * @example
	 * import { markdownToHtml } from '@carbon/ibmdotcom-utilities';
	 *
	 * markdownToHtml('Lorem *ipsum* dolor __sit__.')
	 * // 'Lorem <em class="bx--type-light">ipsum</em> dolor <strong class="bx--type-semibold">sit</strong>.'
	 */


	function markdownToHtml(str) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$allowHtml = _ref.allowHtml,
	      allowHtml = _ref$allowHtml === void 0 ? false : _ref$allowHtml;

	  var converted = allowHtml ? str : _removeHtmlTags$1(str);
	  /**
	   * Custom rendering options to add Carbon styles
	   *
	   */

	  var renderer = {
	    link: function link(href, title, text) {
	      var linkTitle = title ? "title=\"".concat(title, "\"") : null;
	      return "<a class=\"".concat(prefix$i, "--link\" href=\"").concat(href, "\" ").concat(linkTitle, ">").concat(text, "</a>");
	    },
	    list: function list(body, ordered) {
	      var listType = ordered ? 'ol' : 'ul';
	      var listClass = ordered ? "".concat(prefix$i, "--list--ordered") : "".concat(prefix$i, "--list--unordered");
	      return "<".concat(listType, " class=\"").concat(listClass, "\">").concat(body, "</").concat(listType, ">");
	    },
	    listitem: function listitem(text) {
	      return "<li class=\"".concat(prefix$i, "--list__item\">").concat(text, "</li>");
	    }
	  };
	  marked.use({
	    renderer: renderer
	  });
	  var convertedMarkdown = browser$1.sanitize(marked(converted));
	  return _cleanString$1(convertedMarkdown);
	}

	var stablePrefix$d = settings$1.stablePrefix;
	var prefix$j = settings_1.prefix;
	/**
	 * Card Link Component.
	 */

	var Card = function Card(_ref) {
	  var _classNames;

	  var inverse = _ref.inverse,
	      image = _ref.image,
	      eyebrow = _ref.eyebrow,
	      heading = _ref.heading,
	      customClassName = _ref.customClassName,
	      copy = _ref.copy,
	      cta = _ref.cta,
	      props = objectWithoutProperties(_ref, ["inverse", "image", "eyebrow", "heading", "customClassName", "copy", "cta"]);

	  var TileType = props.disabled ? Tile : ClickableTile;
	  return React__default.createElement(TileType, _extends_1({
	    "data-autoid": "".concat(stablePrefix$d, "--card"),
	    className: cx("".concat(prefix$j, "--card"), (_classNames = {}, defineProperty(_classNames, "".concat(prefix$j, "--card--inverse"), inverse), defineProperty(_classNames, "".concat(prefix$j, "--card__CTA--disabled"), props.disabled), _classNames), customClassName),
	    href: cta === null || cta === void 0 ? void 0 : cta.href,
	    target: CTALogic.external(cta === null || cta === void 0 ? void 0 : cta.type),
	    onClick: function onClick(e) {
	      (cta === null || cta === void 0 ? void 0 : cta.type) === 'jump' ? CTALogic.jump(e, cta.type) : false;
	    }
	  }, props), image && React__default.createElement(Image, _extends_1({}, image, {
	    classname: "".concat(prefix$j, "--card__img")
	  })), React__default.createElement("div", {
	    className: "".concat(prefix$j, "--card__wrapper")
	  }, eyebrow && React__default.createElement("p", {
	    className: "".concat(prefix$j, "--card__eyebrow")
	  }, eyebrow), heading && React__default.createElement("h3", {
	    className: "".concat(prefix$j, "--card__heading")
	  }, heading), optionalContent(copy), renderFooter(cta)));
	};
	/**
	 * Card Link optional content
	 *
	 * @param {string} copy paragraph of text
	 * @returns {object} JSX object
	 */

	function optionalContent(copy) {
	  return !copy ? null : React__default.createElement("div", {
	    className: "".concat(prefix$j, "--card__copy"),
	    dangerouslySetInnerHTML: {
	      __html: markdownToHtml(copy, {
	        bold: false
	      })
	    }
	  });
	}
	/**
	 * Render footer with icon
	 *
	 * @param {object} cta cta object
	 * @returns {object} JSX object
	 */


	function renderFooter(cta) {
	  var _classNames2, _cta$icon;

	  return cta && React__default.createElement("div", {
	    className: cx("".concat(prefix$j, "--card__footer"), (_classNames2 = {}, defineProperty(_classNames2, "".concat(prefix$j, "--card__footer__icon-left"), cta.iconPlacement === 'left'), defineProperty(_classNames2, "".concat(prefix$j, "--card__footer__copy"), cta.copy), _classNames2))
	  }, cta.copy && React__default.createElement("span", {
	    className: "".concat(prefix$j, "--card__cta__copy")
	  }, cta.copy), ((_cta$icon = cta.icon) === null || _cta$icon === void 0 ? void 0 : _cta$icon.src) && React__default.createElement(cta.icon.src, _extends_1({
	    className: "".concat(prefix$j, "--card__cta")
	  }, cta.icon)));
	}

	var cardPropTypes = {
	  /**
	   * Concise yet descriptive string of text describing the linked resource.
	   */
	  heading: PropTypes.string,

	  /**
	   * Eyebrow text to be passed as a property to the Card component.
	   * Style for Card component has been set to "text".
	   */
	  eyebrow: PropTypes.string,

	  /**
	   * Paragraph of text that further describing the resource with added detail.
	   */
	  copy: PropTypes.string,

	  /**
	   * Disable card link
	   */
	  disabled: PropTypes.bool,

	  /**
	   * CTA options. Has the following structure in summary:
	   *
	   * | Name            | Data Type | Description                                                                                                                      |
	   * | --------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------- |
	   * | `href`          | String    | Valid URL for a the location of an internal or external resource                                                                 |
	   * | `icon`          | String    | Provide an optional icon to the footer from [Carbon's icon library](https://www.carbondesignsystem.com/guidelines/icons/library) |
	   * | `iconPlacement` | String    | Option to place icon left or right of cta text                                                                                   |
	   * | `copy`          | String    | Optional text for CTA                                                                                                            |
	   * | `type`          | String    | type of CTA (local or external) when Card type is static                                                                         |
	   *
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    type: PropTypes.oneOf(['jump', 'local', 'external', 'download']),
	    icon: PropTypes.shape({
	      src: PropTypes.elementType
	    }),
	    iconPlacement: PropTypes.oneOf(['left', 'right'])
	  }),

	  /**
	   * Contains source and alt text properties.
	   * See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details.
	   */
	  image: PropTypes.shape({
	    classname: PropTypes.string,
	    sources: PropTypes.arrayOf(PropTypes.shape({
	      src: PropTypes.string,
	      breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	    })),
	    defaultSrc: PropTypes.string.isRequired,
	    alt: PropTypes.string.isRequired,
	    longDescription: PropTypes.string
	  }),

	  /**
	   * `true` to sets the high contrast for Card.
	   */
	  inverse: PropTypes.bool,

	  /**
	   * Classname to be assigned to the Card component.
	   */
	  customClassName: PropTypes.string
	};
	Card.propTypes = cardPropTypes;

	var prefix$k = settings_1.prefix;
	/**
	 * CardLink component
	 */

	var CardLink = function CardLink(_ref) {
	  var card = _ref.card,
	      customClassName = _ref.customClassName;
	  var cardLinkClassname = cx("".concat(prefix$k, "--card__CTA"), customClassName);
	  return React__default.createElement(Card, _extends_1({
	    customClassName: cardLinkClassname
	  }, card));
	};

	CardLink.propTypes = {
	  /**
	   * Card options.
	   * See [`<Card>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-card--link-clickable#props) for full usage details.
	   */
	  card: PropTypes.shape(Card.propTypes).isRequired,

	  /**
	   * Custom className
	   */
	  customClassName: PropTypes.string
	};
	CardLink.defaultProps = {
	  disabled: false
	};

	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var PlayIcon$1 = function PlayIcon(props) {
	  return React__default.createElement("svg", props, React__default.createElement("title", null, "Group 3"), React__default.createElement("g", {
	    fill: "none",
	    fillRule: "evenodd"
	  }, React__default.createElement("circle", {
	    fillOpacity: ".9",
	    fill: "#525252",
	    cx: "32",
	    cy: "32",
	    r: "32"
	  }), React__default.createElement("path", {
	    d: "M26.556 43.111a1 1 0 0 1-1-1v-22a1 1 0 0 1 1.5-.87l19 11a1 1 0 0 1 0 1.74l-19 11a1 1 0 0 1-.5.13z",
	    fill: "#F3F3F3",
	    fillRule: "nonzero"
	  })));
	};

	PlayIcon$1.defaultProps = {
	  width: "64",
	  height: "64",
	  viewBox: "0 0 64 64",
	  xmlns: "http://www.w3.org/2000/svg"
	};
	var prefix$l = settings_1.prefix;
	/**
	 * Card subcomponent for CTA.
	 */

	var CardCTA = function CardCTA(_ref) {
	  var type = _ref.type,
	      openLightBox = _ref.openLightBox,
	      renderLightBox = _ref.renderLightBox,
	      videoTitle = _ref.videoTitle,
	      disableImage = _ref.disableImage,
	      otherProps = objectWithoutProperties(_ref, ["type", "openLightBox", "renderLightBox", "videoTitle", "disableImage"]);

	  // eslint-disable-next-line no-unused-vars
	  var cardProps = objectWithoutProperties(otherProps, ["style"]);

	  if (type === 'video') {
	    var _videoTitle$0$duratio;

	    var image;

	    if (!disableImage) {
	      var _cardProps$media;

	      // use image src if passed in through props, otherwise use Kaltura's generated thumbnail image
	      image = cardProps.image ? cardProps.image : {
	        defaultSrc: VideoPlayerAPI.getThumbnailUrl({
	          videoId: (_cardProps$media = cardProps.media) === null || _cardProps$media === void 0 ? void 0 : _cardProps$media.src,
	          width: '320'
	        }),
	        alt: videoTitle[0].title
	      };
	      image = _objectSpread$3({}, image, {
	        icon: PlayIcon$1
	      });
	    }

	    return React__default.createElement(React__default.Fragment, null, CTALogic.launchLightBox(renderLightBox, openLightBox, otherProps.media), !renderLightBox && React__default.createElement(CardLink, {
	      customClassName: "".concat(prefix$l, "--card__video"),
	      card: _objectSpread$3({}, cardProps, {
	        cta: {
	          href: '#',
	          icon: {
	            src: CTALogic.iconSelector(type)
	          },
	          iconPlacement: 'left',
	          copy: (_videoTitle$0$duratio = videoTitle[0].duration) === null || _videoTitle$0$duratio === void 0 ? void 0 : _videoTitle$0$duratio.replace(/\(|\)/g, '')
	        },
	        image: image,
	        copy: videoTitle[0].title,
	        handleClick: function handleClick(e) {
	          return CTALogic.setLightBox(e, openLightBox);
	        }
	      })
	    }));
	  } else {
	    return React__default.createElement(CardLink, {
	      card: _objectSpread$3({}, cardProps, {
	        cta: {
	          type: type,
	          href: otherProps.cta.href,
	          icon: {
	            src: CTALogic.iconSelector(type)
	          }
	        },
	        copy: otherProps.copy,
	        target: CTALogic.external(type),
	        href: otherProps.cta.href
	      })
	    });
	  }
	};

	CardCTA.propTypes = {
	  /**
	   * CTA type. Choose from:
	   *
	   * | Type       | SVG element Name | Description                                                      |
	   * | ---------- | ---------------- | ---------------------------------------------------------------- |
	   * | `local`    | ArrowRight20     | Describes right arrow onClick which loads in self page.          |
	   * | `jump`     | ArrowDown20      | Describes down arrow onClick which scrollToView of target.       |
	   * | `external` | Launch20         | Describes launch arrow onClick which loads in new tab.           |
	   * | `download` | Download20       | Describes download arrow onClick for downloading files.          |
	   * | `video`    | PlayOutline20    | Describes play icon onClick which loads the video in a lightbox. |
	   * | `default`  | None             | Describes the default CTA - without icon                         |
	   *
	   * For more details of icons, refer to:
	   *
	   * - [Icons library](https://www.carbondesignsystem.com/guidelines/icons/library/)!👀
	   * - [@carbon/icons-react](https://github.com/carbon-design-system/carbon/tree/master/packages/icons-react)!👀
	   * - [carbon-icons](https://www.npmjs.com/package/carbon-icons)!👀
	   */
	  type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),

	  /**
	   * Boolean to determine whether to disable image for card
	   */
	  disableImage: PropTypes.bool,

	  /**
	   * Func to set renderLightBox state.
	   */
	  openLightBox: PropTypes.func,

	  /**
	   * Bool to determine whether to open lightbox.
	   */
	  renderLightBox: PropTypes.bool,

	  /**
	   * Array of video titles.
	   */
	  videoTitle: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    duration: PropTypes.string,
	    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
	  }))
	};
	CardCTA.defaultProps = {
	  type: 'default',
	  copy: '',
	  cta: null,
	  disableImage: false,
	  media: null
	};

	var stablePrefix$e = settings$1.stablePrefix;
	var prefix$m = settings_1.prefix;
	/**
	 * Featured Card Component
	 *
	 * @param {object} props props object
	 * @param {object} props.card section card object
	 * @param {Function} props.onClick onClick function
	 * @returns {*} FeatureCard JSX component
	 */

	var FeatureCard = function FeatureCard(_ref) {
	  var card = _ref.card,
	      onClick = _ref.onClick;
	  return card.cta && React__default.createElement("div", {
	    className: "".concat(prefix$m, "--feature-card"),
	    "data-autoid": "".concat(stablePrefix$e, "--feature-card")
	  }, React__default.createElement(Card, _extends_1({
	    customClassName: "".concat(prefix$m, "--feature-card__card"),
	    inverse: true,
	    handleClick: onClick
	  }, card)));
	};

	FeatureCard.propTypes = {
	  /**
	   * Object containing Feature Card details.
	   * In summary, has the following structure.
	   *
	   * | Name      | Data Type | Description                                                                                                                                                                        |
	   * | --------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
	   * | `heading` | String    | Title of the Card item.                                                                                                                                                            |
	   * | `image`   | Object    | Image object used in the FeatureCard component. See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details. |
	   * | `cta`     | Object    | Object containing target and href of link. See below.                                                                                                                              |
	   *
	   * CTA object has the following structure in summary:
	   *
	   * | Name   | Data Type | Description                       |
	   * | ------ | --------- | --------------------------------- |
	   * | `href` | String    | Url of the FeatureCard component. |
	   *
	   * See [`<Card>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-card--static#props) for full usage details.
	   */
	  card: PropTypes.shape({
	    heading: PropTypes.string,
	    eyebrow: PropTypes.string,
	    copy: PropTypes.string,
	    cta: PropTypes.shape({
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      type: PropTypes.oneOf(['jump', 'local', 'external', 'download'])
	    }),
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }),
	    inverse: PropTypes.bool,
	    customClassName: PropTypes.string,
	    type: PropTypes.oneOf(['link'])
	  }).isRequired,

	  /**
	   * The handler for `onclick` event.
	   */
	  onClick: PropTypes.func
	};

	var stablePrefix$f = settings$1.stablePrefix;
	var prefix$n = settings_1.prefix;
	/**
	 * Featured Card Component.
	 */

	var FeatureCardBlockMedium = function FeatureCardBlockMedium(_ref) {
	  var heading = _ref.heading,
	      card = _ref.card,
	      otherProps = objectWithoutProperties(_ref, ["heading", "card"]);

	  return heading && card.cta && React__default.createElement("section", {
	    className: "".concat(prefix$n, "--feature-card-block-medium"),
	    "data-autoid": "".concat(stablePrefix$f, "--feature-card-block-medium")
	  }, React__default.createElement("h3", {
	    className: "".concat(prefix$n, "--feature-card-block-medium__heading")
	  }, heading), React__default.createElement(FeatureCard, _extends_1({
	    card: card
	  }, otherProps)));
	};

	FeatureCardBlockMedium.propTypes = {
	  /**
	   * Main title of the pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Object containing Feature Card details. Has the following structure in summary:
	   *
	   * | Name      | Data Type | Description                                                                                                                                                                        |
	   * | --------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
	   * | `heading` | String    | Title of the Card item.                                                                                                                                                            |
	   * | `image`   | Object    | Image object used in the FeatureCard component. See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details. |
	   * | `cta`     | Object    | Object containing target and href of link. See `cta` below.                                                                                                                        |
	   *
	   * `cta`:
	   *
	   * | Name   | Data Type | Description                       |
	   * | ------ | --------- | --------------------------------- |
	   * | `href` | String    | Url of the FeatureCard component. |
	   *
	   * See [`<FeatureCard>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/patterns-blocks-featurecard--default#props) for full usage details.
	   */
	  card: PropTypes.shape({
	    heading: PropTypes.string,
	    eyebrow: PropTypes.string,
	    copy: PropTypes.string,
	    cta: PropTypes.shape({
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))])
	    }).isRequired,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }),
	    inverse: PropTypes.bool,
	    customClassName: PropTypes.string,
	    type: PropTypes.oneOf(['link'])
	  }).isRequired
	};

	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	/**
	 * FeatureCard subcomponent for CTA.
	 */

	var FeatureCTA = function FeatureCTA(_ref) {
	  var type = _ref.type,
	      openLightBox = _ref.openLightBox,
	      renderLightBox = _ref.renderLightBox,
	      videoTitle = _ref.videoTitle,
	      formatCTAcopy = _ref.formatCTAcopy,
	      otherProps = objectWithoutProperties(_ref, ["type", "openLightBox", "renderLightBox", "videoTitle", "formatCTAcopy"]);

	  return type === 'video' ? React__default.createElement("div", null, CTALogic.launchLightBox(renderLightBox, openLightBox, otherProps.card.cta.media), !renderLightBox && React__default.createElement(FeatureCardBlockMedium, {
	    heading: otherProps.heading,
	    card: _renderFeatureCard({
	      card: _objectSpread$4({}, otherProps.card, {
	        heading: formatCTAcopy({
	          title: videoTitle[0].title,
	          duration: videoTitle[0].duration
	        })
	      })
	    }),
	    onClick: function onClick(e) {
	      return CTALogic.setLightBox(e, openLightBox);
	    }
	  })) : React__default.createElement(FeatureCardBlockMedium, {
	    heading: otherProps.heading,
	    card: _renderFeatureCard({
	      card: _objectSpread$4({}, otherProps.card)
	    })
	  });
	};
	/**
	 * sets featureCard
	 *
	 * @param {object} param param object
	 * @param {object} param.card card object
	 *
	 * @private
	 * @returns {*} object
	 */


	var _renderFeatureCard = function _renderFeatureCard(_ref2) {
	  var card = _ref2.card;
	  if (card.type === 'jump') card.cta.type = 'jump';else if (card.type === 'video') card.cta.href = '#';
	  card.cta.icon.src = CTALogic.iconSelector(card.type);
	  card.target = CTALogic.external(card.type);
	  card.type = 'link';
	  return card;
	};

	FeatureCTA.propTypes = {
	  /**
	   * CTA type. Choose from:
	   *
	   * | Type       | SVG element Name | Description                                                      |
	   * | ---------- | ---------------- | ---------------------------------------------------------------- |
	   * | `local`    | ArrowRight20     | Describes right arrow onClick which loads in self page.          |
	   * | `jump`     | ArrowDown20      | Describes down arrow onClick which scrollToView of target.       |
	   * | `external` | Launch20         | Describes launch arrow onClick which loads in new tab.           |
	   * | `download` | Download20       | Describes download arrow onClick for downloading files.          |
	   * | `video`    | PlayOutline20    | Describes play icon onClick which loads the video in a lightbox. |
	   * | `default`  | None             | Describes the default CTA - without icon                         |
	   *
	   * For more details of icons, refer to:
	   *
	   * - [Icons library](https://www.carbondesignsystem.com/guidelines/icons/library/)!👀
	   * - [@carbon/icons-react](https://github.com/carbon-design-system/carbon/tree/master/packages/icons-react)!👀
	   * - [carbon-icons](https://www.npmjs.com/package/carbon-icons)!👀
	   */
	  type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),

	  /**
	   * Func to set renderLightBox state.
	   */
	  openLightBox: PropTypes.func,

	  /**
	   * Bool to determine whether to open lightbox.
	   */
	  renderLightBox: PropTypes.bool,

	  /**
	   * Array of video titles.
	   */
	  videoTitle: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    duration: PropTypes.string,
	    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
	  })),

	  /**
	   * Func to format the cta copy
	   */
	  formatCTAcopy: PropTypes.func
	};
	FeatureCTA.defaultProps = {
	  type: 'default',
	  formatCTAcopy: function formatCTAcopy(_ref3) {
	    var title = _ref3.title,
	        duration = _ref3.duration;
	    return "".concat(title, " ").concat(duration);
	  }
	};

	/**
	 * Link subcomponent for CTA.
	 */

	var TextCTA = function TextCTA(_ref) {
	  var _otherProps$cta;

	  var type = _ref.type,
	      openLightBox = _ref.openLightBox,
	      renderLightBox = _ref.renderLightBox,
	      videoTitle = _ref.videoTitle,
	      formatCTAcopy = _ref.formatCTAcopy,
	      iconPlacement = _ref.iconPlacement,
	      otherProps = objectWithoutProperties(_ref, ["type", "openLightBox", "renderLightBox", "videoTitle", "formatCTAcopy", "iconPlacement"]);

	  var Icon = CTALogic.iconSelector(type, iconPlacement);
	  var href = type !== 'video' ? otherProps.href ? otherProps.href : (_otherProps$cta = otherProps.cta) === null || _otherProps$cta === void 0 ? void 0 : _otherProps$cta.href : null;
	  return type === 'video' ? React__default.createElement("div", null, CTALogic.launchLightBox(renderLightBox, openLightBox, otherProps.media), !renderLightBox && React__default.createElement(LinkWithIcon, _extends_1({
	    href: "#",
	    onClick: function onClick(e) {
	      return CTALogic.setLightBox(e, openLightBox);
	    }
	  }, iconPlacement && {
	    iconPlacement: iconPlacement
	  }), React__default.createElement("span", null, formatCTAcopy({
	    title: videoTitle[0].title,
	    duration: videoTitle[0].duration
	  })), React__default.createElement(Icon, null))) : React__default.createElement(LinkWithIcon, _extends_1({
	    href: href,
	    target: CTALogic.external(type),
	    onClick: function onClick(e) {
	      return CTALogic.jump(e, type);
	    }
	  }, iconPlacement && {
	    iconPlacement: iconPlacement
	  }), React__default.createElement("span", null, otherProps.copy), type !== 'default' && React__default.createElement(Icon, null));
	};

	TextCTA.propTypes = {
	  /**
	   * CTA type. Choose from:
	   *
	   * | Type       | SVG element Name | Description                                                      |
	   * | ---------- | ---------------- | ---------------------------------------------------------------- |
	   * | `local`    | ArrowRight20     | Describes right arrow onClick which loads in self page.          |
	   * | `jump`     | ArrowDown20      | Describes down arrow onClick which scrollToView of target.       |
	   * | `external` | Launch20         | Describes launch arrow onClick which loads in new tab.           |
	   * | `download` | Download20       | Describes download arrow onClick for downloading files.          |
	   * | `video`    | PlayOutline20    | Describes play icon onClick which loads the video in a lightbox. |
	   * | `default`  | None             | Describes the default CTA - without icon                         |
	   *
	   * For more details of icons, refer to:
	   *
	   * - [Icons library](https://www.carbondesignsystem.com/guidelines/icons/library/)!👀
	   * - [@carbon/icons-react](https://github.com/carbon-design-system/carbon/tree/master/packages/icons-react)!👀
	   * - [carbon-icons](https://www.npmjs.com/package/carbon-icons)!👀
	   */
	  type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),

	  /**
	   * Icon placement.
	   */
	  iconPlacement: PropTypes.oneOf(['left', 'right']),

	  /**
	   * Func to set renderLightBox state.
	   */
	  openLightBox: PropTypes.func,

	  /**
	   * Bool to determine whether to open lightbox.
	   */
	  renderLightBox: PropTypes.bool,

	  /**
	   * Array of video titles.
	   */
	  videoTitle: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    duration: PropTypes.string,
	    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
	  })),

	  /**
	   * Func to format the cta copy
	   */
	  formatCTAcopy: PropTypes.func
	};
	TextCTA.defaultProps = {
	  type: 'default',
	  formatCTAcopy: function formatCTAcopy(_ref2) {
	    var title = _ref2.title,
	        duration = _ref2.duration;
	    return "".concat(title, " ").concat(duration);
	  },
	  iconPlacement: 'right'
	};

	/**
	 * utilizes the videoplayerAPI to extract video data and
	 * returns video title with duration for CTA
	 *
	 * @param {string} type type of CTA
	 * @param {Array} videoId array of video ids
	 * @returns {*} JSX Object
	 */

	function useVideoData(type, videoId) {
	  var _useState = React.useState([{
	    title: '',
	    duration: '',
	    key: 0
	  }]),
	      _useState2 = slicedToArray(_useState, 2),
	      videoTitle = _useState2[0],
	      setVideoTitle = _useState2[1];

	  var getVideoData;
	  React.useEffect(function () {
	    getVideoData();
	  }, [getVideoData, type]);
	  /**
	   * retrieve duration and title information from the video if
	   * the type of the CTA is `video`
	   *
	   * sets the `videoTitle` state with an array of title objects
	   *
	   */

	  getVideoData = React.useCallback( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	    var title;
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            if (!(type === 'video' || type.includes('video'))) {
	              _context2.next = 5;
	              break;
	            }

	            _context2.next = 3;
	            return Promise.all(videoId.map( /*#__PURE__*/function () {
	              var _ref2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(vidId) {
	                var video, time;
	                return regenerator.wrap(function _callee$(_context) {
	                  while (1) {
	                    switch (_context.prev = _context.next) {
	                      case 0:
	                        _context.next = 2;
	                        return VideoPlayerAPI.api(vidId.src);

	                      case 2:
	                        video = _context.sent;
	                        time = VideoPlayerAPI.getVideoDuration(video.msDuration);
	                        return _context.abrupt("return", {
	                          title: video.name,
	                          duration: time,
	                          key: vidId.key
	                        });

	                      case 5:
	                      case "end":
	                        return _context.stop();
	                    }
	                  }
	                }, _callee);
	              }));

	              return function (_x) {
	                return _ref2.apply(this, arguments);
	              };
	            }()));

	          case 3:
	            title = _context2.sent;
	            setVideoTitle(title);

	          case 5:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  })), [type, videoId]);
	  return videoTitle;
	}

	function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	/**
	 * CTA component.
	 */

	var CTA = function CTA(_ref) {
	  var _otherProps$copy;

	  var style = _ref.style,
	      type = _ref.type,
	      customClassName = _ref.customClassName,
	      otherProps = objectWithoutProperties(_ref, ["style", "type", "customClassName"]);

	  var _useState = React.useState(false),
	      _useState2 = slicedToArray(_useState, 2),
	      renderLightBox = _useState2[0],
	      openLightBox = _useState2[1];

	  var videoId = type && (type === 'video' || type.includes('video')) ? CTALogic.getVideoId(style, otherProps) : [];
	  var videoTitle = useVideoData(type, videoId);
	  var CTAComponent = style === 'card' ? CardCTA : style === 'button' ? ButtonCTA : style === 'feature' ? FeatureCTA : TextCTA;

	  var ctaProps = _objectSpread$5({
	    style: style,
	    type: type,
	    renderLightBox: renderLightBox,
	    openLightBox: openLightBox,
	    videoTitle: videoTitle
	  }, otherProps);

	  var ariaLabel = (_otherProps$copy = otherProps === null || otherProps === void 0 ? void 0 : otherProps.copy) !== null && _otherProps$copy !== void 0 ? _otherProps$copy : videoTitle[0].title;
	  var ariaProps = style === 'card' && {
	    'aria-label': ariaLabel,
	    role: 'region'
	  };
	  return React__default.createElement("div", _extends_1({
	    className: customClassName
	  }, ariaProps), React__default.createElement(CTAComponent, ctaProps));
	};

	CTA.propTypes = {
	  /**
	   * CTA style. Choose from:
	   *
	   * | Style     | Component Name | Description                                                                                                                                 |
	   * | --------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------- |
	   * | `text`    | LinkWithIcon   | For more details [see here](https://ibmdotcom-react.mybluemix.net/?path=/story/components-link-with-icon--default)!👀 |
	   * | `button`  | ButtonGroup    | For more details [see here](https://ibmdotcom-react.mybluemix.net/?path=/story/components-buttongroup--default)!👀    |
	   * | `card`    | Card           | For more details [see here](https://ibmdotcom-react.mybluemix.net/?path=/story/components-card--link)!👀              |
	   * | `feature` | FeatureCard    | For more details [see here](https://ibmdotcom-react.mybluemix.net/?path=/story/components-card--link)!👀              |
	   */
	  style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),

	  /**
	   * CTA type. Choose from:
	   *
	   * | Type       | SVG element Name | Description                                                      |
	   * | ---------- | ---------------- | ---------------------------------------------------------------- |
	   * | `local`    | ArrowRight20     | Describes right arrow onClick which loads in self page.          |
	   * | `jump`     | ArrowDown20      | Describes down arrow onClick which scrollToView of target.       |
	   * | `external` | Launch20         | Describes launch arrow onClick which loads in new tab.           |
	   * | `download` | Download20       | Describes download arrow onClick for downloading files.          |
	   * | `video`    | PlayOutline20    | Describes play icon onClick which loads the video in a lightbox. |
	   * | `default`  | None             | Describes the default CTA - without icon                         |
	   *
	   * For more details of icons, refer to:
	   *
	   * - [Icons library](https://www.carbondesignsystem.com/guidelines/icons/library/)!👀
	   * - [@carbon/icons-react](https://github.com/carbon-design-system/carbon/tree/master/packages/icons-react)!👀
	   * - [carbon-icons](https://www.npmjs.com/package/carbon-icons)!👀
	   */
	  type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),

	  /**
	   * Optional text for CTA.
	   * Used for ones except `style="feature"`.
	   */
	  copy: PropTypes.string,

	  /**
	   * Valid URL for a the location of an internal or external resource.
	   * Used for `style="text"`.
	   */
	  href: PropTypes.string,

	  /**
	   * Custom classname from parent.
	   */
	  customClassName: PropTypes.string
	};
	CTA.defaultProps = {
	  style: 'text',
	  type: 'default',
	  copy: '',
	  href: ''
	};

	var stablePrefix$g = settings$1.stablePrefix;
	var prefix$o = settings_1.prefix;
	/**
	 * Layout types
	 *
	 * @type {{'1-3': string[]}}
	 * @private
	 */

	var _types = {
	  '1-3': ["".concat(prefix$o, "--col-lg-4"), "".concat(prefix$o, "--col-lg-12")],
	  // 1/4 - 3/4
	  '2-1': ["".concat(prefix$o, "--layout-2-3"), "".concat(prefix$o, "--layout-1-3")] // 2/3 - 1/3

	};
	/**
	 * Returns the child classes with the proper column class names
	 *
	 * @param {string} type layout type
	 * @param {number} stickyOffset Sticky offset amount (in pixels)
	 * @param {object} children child nodes
	 * @returns {*} modified child content
	 * @private
	 */

	function _updateChild(type, stickyOffset, children) {
	  var final = [];
	  children.map(function (child, i) {
	    if (child.props['data-sticky'] === 'true') {
	      final.push(React__default.createElement("div", {
	        className: cx(_types[type] && _types[type][i] ? "".concat(_types[type][i], " ").concat(prefix$o, "--layout--sticky-mobile") : "".concat(prefix$o, "--col")),
	        key: i,
	        style: {
	          top: stickyOffset ? "".concat(stickyOffset, "px") : 0
	        }
	      }, React__default.cloneElement(child, {
	        className: cx(child.props.className, "".concat(prefix$o, "--layout--sticky-desktop")),
	        style: {
	          top: stickyOffset ? "".concat(stickyOffset, "px") : 0
	        }
	      })));
	    } else {
	      final.push(React__default.cloneElement(child, {
	        className: cx(child.props.className, _types[type] && _types[type][i] ? _types[type][i] : "".concat(prefix$o, "--col")),
	        key: i
	      }));
	    }
	  });
	  return final;
	}
	/**
	 * Returns the spacing modifier class
	 *
	 * @param {string} position top or bottom position of the layout
	 * @param {string} modifier layout modifier from the layout scale
	 * @returns {*|string} spacing class
	 * @private
	 */


	function _spacingClass(position, modifier) {
	  return modifier && "".concat(prefix$o, "--layout--").concat(position, "-").concat(modifier);
	}
	/**
	 * Layout component
	 * This is an abstract layout component that can be reutilized for multiple
	 * patterns. This autocreates the proper grid classes, along with the optional
	 * sticky attribute to the child elements (columns).
	 */


	var Layout = function Layout(_ref) {
	  var _classnames;

	  var type = _ref.type,
	      marginTop = _ref.marginTop,
	      marginBottom = _ref.marginBottom,
	      stickyOffset = _ref.stickyOffset,
	      border = _ref.border,
	      nested = _ref.nested,
	      children = _ref.children;
	  return React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$g, "--layout"),
	    className: cx(nested ? "" : "".concat(prefix$o, "--grid"), (_classnames = {}, defineProperty(_classnames, _spacingClass('top', marginTop), marginTop), defineProperty(_classnames, _spacingClass('bottom', marginBottom), marginBottom), _classnames))
	  }, React__default.createElement("div", {
	    className: cx("".concat(prefix$o, "--row"), defineProperty({}, "".concat(prefix$o, "--layout--border"), border))
	  }, _updateChild(type, stickyOffset, children)));
	};

	Layout.propTypes = {
	  /**
	   * Layout type. Choose from:
	   *
	   * | Name  | Description             |
	   * | ----- | ----------------------- |
	   * | `1-3` | 1/4 - 3/4 column layout |
	   * | `2-1` | 2/3 - 1/3 column layout |
	   */
	  type: PropTypes.oneOf(['1-3', '2-1']).isRequired,

	  /**
	   * Top Margin value for Layout. Choose from:
	   *
	   * | Name                    | Description                            |
	   * | ----------------------- | -------------------------------------- |
	   * | `layout-01 - layout-07` | Layout token values for the top margin |
	   */
	  marginTop: PropTypes.oneOf(['layout-01', 'layout-02', 'layout-03', 'layout-04', 'layout-05', 'layout-06', 'layout-07']),

	  /**
	   * Bottom Margin value for Layout. Choose from:
	   *
	   * | Name                    | Description                               |
	   * | ----------------------- | ----------------------------------------- |
	   * | `layout-01 - layout-07` | Layout token values for the bottom margin |
	   */
	  marginBottom: PropTypes.oneOf(['layout-01', 'layout-02', 'layout-03', 'layout-04', 'layout-05', 'layout-06', 'layout-07']),

	  /**
	   * Component/Element to render within `<Layout>`.
	   */
	  children: PropTypes.node,

	  /**
	   * Defines the offset for the sticky column(s).
	   */
	  stickyOffset: PropTypes.number,

	  /**
	   * `true` to use the optional border at the bottom of pattern.
	   */
	  border: PropTypes.bool,

	  /**
	   * `true` to make the pattern fits inside a grid.
	   */
	  nested: PropTypes.bool
	};
	Layout.defaultProps = {
	  marginTop: null,
	  marginBottom: null,
	  stickyOffset: null,
	  border: false,
	  nested: false
	};

	var stablePrefix$h = settings$1.stablePrefix;
	var prefix$p = settings_1.prefix;
	/**
	 * ContentBlock internal component
	 */

	var ContentBlock = function ContentBlock(_ref) {
	  var heading = _ref.heading,
	      copy = _ref.copy,
	      children = _ref.children,
	      customClassName = _ref.customClassName,
	      cta = _ref.cta,
	      aside = _ref.aside,
	      border = _ref.border;
	  var classnames = cx("".concat(prefix$p, "--content-block"), customClassName);
	  var setborder = aside ? false : border;
	  var content = React__default.createElement(React__default.Fragment, null, copy && React__default.createElement("div", {
	    className: "".concat(prefix$p, "--content-block__copy"),
	    dangerouslySetInnerHTML: {
	      __html: markdownToHtml(copy, {
	        bold: false
	      })
	    }
	  }), React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$h, "--content-block__children"),
	    className: "".concat(prefix$p, "--content-block__children")
	  }, children), cta && _renderCTA(cta));
	  var title = React__default.createElement("div", null, heading && React__default.createElement("h2", {
	    "data-autoid": "".concat(stablePrefix$h, "--content-block__heading"),
	    className: "".concat(prefix$p, "--content-block__heading")
	  }, heading));
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$h, "--content-block"),
	    className: classnames
	  }, aside && aside.items ? _layoutWrap(React__default.createElement(React__default.Fragment, null, title, React__default.createElement("div", null))) : title, aside && aside.items ? _layoutWrap(React__default.createElement(React__default.Fragment, null, React__default.createElement("div", null, content), React__default.createElement("aside", null, aside.items)), aside.border) : content, setborder ? React__default.createElement(HorizontalRule, null) : '');
	};
	/**
	 * wraps content in layout component
	 *
	 * @private
	 * @param {Element} content content elements
	 * @param {boolean} border set border or not
	 * @returns {*} jsx cta component
	 */


	var _layoutWrap = function _layoutWrap(content, border) {
	  return React__default.createElement(Layout, {
	    type: "2-1",
	    nested: true,
	    border: border
	  }, content.props.children);
	};
	/**
	 * sets the class name based on theme type
	 *
	 * @private
	 * @param {object} cta a cta object
	 * @returns {*} jsx cta component
	 */


	function _renderCTA(cta) {
	  if (cta.style === 'feature') {
	    return React__default.createElement(CTA, _extends_1({
	      customClassName: cx("".concat(prefix$p, "--content-block__cta"))
	    }, cta));
	  }

	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$h, "--content-block__cta"),
	    className: "".concat(prefix$p, "--content-block__cta-row")
	  }, React__default.createElement(CTA, _extends_1({
	    customClassName: "".concat(prefix$p, "--content-block__cta ").concat(prefix$p, "--content-block__cta-col")
	  }, cta)));
	}

	ContentBlock.propTypes = {
	  /**
	   * Heading text.
	   */
	  heading: PropTypes.string,

	  /**
	   * Copy text.
	   */
	  copy: PropTypes.string,

	  /**
	   * Children elements passed into `ContentBlock` to be rendered.
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),

	  /**
	   * CTA object.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Custom className to wrap the `<ContentBlock>` component.
	   */
	  customClassName: PropTypes.string,

	  /**
	   * Object containing elements to be rendered within `<aside>` html element on right panel.
	   * The structure is:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `items`  | Element   | Elements/Components to be rendered on the right panel.     |
	   * | `border` | Boolean   | Determines whether bottom border of `ContentBlock` is set. |
	   */
	  aside: PropTypes.shape({
	    items: PropTypes.element,
	    border: PropTypes.bool
	  }),

	  /**
	   * border for content block.
	   */
	  border: PropTypes.bool
	};
	ContentBlock.defaultProps = {
	  border: false
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$9 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M19 13L15 13 15 9 13 9 13 13 9 13 9 15 13 15 13 19 15 19 15 15 19 15 19 13z"
	});

	var _ref3$4 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"
	});

	var ZoomIn20 = /*#__PURE__*/React__default.forwardRef(function ZoomIn20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$9, _ref3$4, children);
	});

	var stablePrefix$i = settings$1.stablePrefix;
	var prefix$q = settings_1.prefix;
	/**
	 * Picture element.
	 */

	var ImageWithCaption = function ImageWithCaption(_ref) {
	  var image = _ref.image,
	      lightbox = _ref.lightbox,
	      heading = _ref.heading,
	      copy = _ref.copy,
	      customClassName = _ref.customClassName;

	  var _useState = React.useState(false),
	      _useState2 = slicedToArray(_useState, 2),
	      renderLightBox = _useState2[0],
	      openLightBox = _useState2[1];

	  if (!image) {
	    return null;
	  }

	  var classnames = cx("".concat(prefix$q, "--image-with-caption"), customClassName);
	  var media = {
	    type: 'image',
	    src: image.defaultSrc,
	    title: heading,
	    alt: image.alt,
	    description: copy
	  };
	  return React__default.createElement("div", {
	    className: classnames,
	    "data-autoid": "".concat(stablePrefix$i, "--image-with-caption")
	  }, CTALogic.launchLightBox(renderLightBox, openLightBox, media), lightbox ? React__default.createElement("button", {
	    "aria-label": "launch light box media viewer",
	    className: "".concat(prefix$q, "--image-with-caption__image"),
	    onClick: function onClick(e) {
	      return CTALogic.setLightBox(e, openLightBox);
	    }
	  }, React__default.createElement(Image, image), React__default.createElement("div", {
	    className: "".concat(prefix$q, "--image-with-caption__zoom-button")
	  }, React__default.createElement(ZoomIn20, {
	    "aria-label": "Zoom In Icon"
	  }))) : React__default.createElement(Image, image), React__default.createElement("p", {
	    className: "".concat(prefix$q, "--image__caption"),
	    "data-autoid": "".concat(stablePrefix$i, "--image__caption")
	  }, heading));
	};

	ImageWithCaption.propTypes = {
	  /**
	   * Image object needed for ImageWithCaption component.
	   * Visit the [Image storybook](https://ibmdotcom-react.mybluemix.net/?path=/story/components-image--default)
	   * for more details on the Image component.
	   */
	  image: PropTypes.shape({
	    classname: PropTypes.string,
	    sources: PropTypes.arrayOf(PropTypes.shape({
	      src: PropTypes.string,
	      breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	    })),
	    defaultSrc: PropTypes.string.isRequired,
	    alt: PropTypes.string.isRequired,
	    longDescription: PropTypes.string
	  }).isRequired,

	  /**
	   * `true` to enable lightbox functionality, allowing user to see enlarged image.
	   */
	  lightbox: PropTypes.bool,

	  /**
	   * Caption text.
	   */
	  heading: PropTypes.string,

	  /**
	   * More detailed description of the image.
	   */
	  copy: PropTypes.string,

	  /**
	   * The CSS class name to apply.
	   */
	  customClassName: PropTypes.string
	};
	ImageWithCaption.defaultProps = {
	  copy: '',
	  lightbox: false
	};

	var stablePrefix$j = settings$1.stablePrefix;
	var prefix$r = settings_1.prefix;
	/**
	 * ContentItem Component
	 *
	 * @param {object} props props object
	 * @param {boolean} props.inverse inverse class
	 * @param {string} props.customClassName allows user to pass in custom class name
	 * @param {string} props.cta cta object
	 * @param {string} props.copy copy text
	 * @param {string} props.heading  heading object
	 * @param {string} props.mediaType Determines the media type (image or video)
	 * @param {object} props.mediaData Data properties for image or video
	 * @returns {*} JSX ContentItem component
	 */

	var ContentItem = function ContentItem(_ref) {
	  var cta = _ref.cta,
	      copy = _ref.copy,
	      heading = _ref.heading,
	      mediaType = _ref.mediaType,
	      mediaData = _ref.mediaData,
	      inverse = _ref.inverse,
	      customClassName = _ref.customClassName;
	  var classnames = cx("".concat(prefix$r, "--content-item"), defineProperty({}, "".concat(prefix$r, "--content-item--inverse"), inverse), customClassName);
	  return React__default.createElement("div", {
	    className: classnames,
	    "data-autoid": "".concat(stablePrefix$j, "--content-item")
	  }, heading && React__default.createElement("h4", {
	    "data-autoid": "".concat(stablePrefix$j, "--content-item__heading"),
	    className: "".concat(prefix$r, "--content-item__heading")
	  }, heading), _renderMedia(mediaType, mediaData, inverse), copy && React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$j, "--content-item__copy"),
	    className: "".concat(prefix$r, "--content-item__copy"),
	    dangerouslySetInnerHTML: {
	      __html: markdownToHtml(copy, {
	        bold: false
	      })
	    }
	  }), cta && React__default.createElement(CTA, {
	    style: "text",
	    type: cta.type,
	    copy: cta.copy,
	    href: cta.href,
	    customClassName: "".concat(prefix$r, "--content-item__cta")
	  }));
	};
	/**
	 * renders either video or image content
	 *
	 * @param {string} type cta type ( external | jump | local)
	 * @param {object} data cta type ( external | jump | local)
	 * @param {boolean} inverse inverse type
	 * @private
	 * @returns {*} media component
	 */


	var _renderMedia = function _renderMedia(type, data, inverse) {
	  if (data) {
	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$j, "--content-item__media")
	    }, type === 'image' && React__default.createElement(ImageWithCaption, _extends_1({
	      inverse: inverse
	    }, data)), type === 'video' && React__default.createElement(VideoPlayer, _extends_1({
	      inverse: inverse
	    }, data)));
	  }
	};

	ContentItem.propTypes = {
	  /**
	   * CTA object.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Allows user to pass in custom class name.
	   */
	  customClassName: PropTypes.string,

	  /**
	   * Copy text.
	   */
	  copy: PropTypes.string,

	  /**
	   * Heading text.
	   */
	  heading: PropTypes.string,

	  /**
	   * Determines media type (image or video).
	   */
	  mediaType: PropTypes.oneOf(['image', 'video']),

	  /**
	   * Media Data for either image or video.
	   * See the following components' README for more details:
	   *
	   * * `mediaType="image"`: [`<ImageWithCaption>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-imagewithcaption--default#props)
	   * * `mediaType="video"`: [`<VideoPlayer>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-videoplayer--default#props)
	   */
	  mediaData: PropTypes.oneOfType([PropTypes.shape({
	    inverse: PropTypes.bool,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }).isRequired,
	    lightbox: PropTypes.bool,
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  }), PropTypes.shape({
	    customClassName: PropTypes.string,
	    videoId: PropTypes.string.isRequired,
	    showCaption: PropTypes.bool,
	    inverse: PropTypes.bool
	  })]),

	  /**
	   * `true` to changes theme to inverse.
	   */
	  inverse: PropTypes.bool
	};

	var stablePrefix$k = settings$1.stablePrefix;
	var prefix$s = settings_1.prefix;
	/**
	 * Content Block - Simple pattern.
	 */

	var ContentBlockSimple = function ContentBlockSimple(_ref) {
	  var copy = _ref.copy,
	      heading = _ref.heading,
	      mediaType = _ref.mediaType,
	      mediaData = _ref.mediaData,
	      cta = _ref.cta,
	      aside = _ref.aside;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$k, "--content-block-simple"),
	    className: "".concat(prefix$s, "--content-block-simple")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    cta: cta,
	    aside: aside
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$s, "--content-block-simple__content")
	  }, React__default.createElement(ContentItem, {
	    copy: copy
	  }), _renderMedia$1(mediaType, mediaData))));
	};
	/**
	 * renders either video or image content
	 *
	 * @param {string} type cta type ( external | jump | local)
	 * @param {object} data cta type ( external | jump | local)
	 * @private
	 * @returns {*} media component
	 */


	var _renderMedia$1 = function _renderMedia(type, data) {
	  if (data) {
	    var _cx;

	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$k, "--content-block-simple__media"),
	      className: cx((_cx = {}, defineProperty(_cx, "".concat(prefix$s, "--content-block-simple__media-video"), type === 'video'), defineProperty(_cx, "".concat(prefix$s, "--content-block-simple__media-image"), type === 'image'), _cx))
	    }, type === 'image' && React__default.createElement(ImageWithCaption, data), type === 'video' && React__default.createElement(VideoPlayer, data));
	  }
	};

	ContentBlockSimple.propTypes = {
	  /**
	   * Simple content item.
	   * Uses [`markdownToHtml`](https://github.com/carbon-design-system/ibm-dotcom-library/tree/master/packages/utilities/src/utilities/markdownToHtml) utility.
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * Title of the content block.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Determines media type (image or video).
	   */
	  mediaType: PropTypes.string,

	  /**
	   * Media Data for either image or video.
	   * See the following components' README for more details:
	   *
	   * * `mediaType="image"`: [`<ImageWithCaption>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-imagewithcaption--default#props)
	   * * `mediaType="video"`: [`<VideoPlayer>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-videoplayer--default#props)
	   */
	  mediaData: PropTypes.oneOfType([PropTypes.shape({
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }).isRequired,
	    lightbox: PropTypes.bool,
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  }), PropTypes.shape({
	    customClassName: PropTypes.string,
	    videoId: PropTypes.string.isRequired,
	    showCaption: PropTypes.bool
	  })]),

	  /**
	   * CTA used at the end of content body.
	   * `Text` and `Card` styles supported.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Object containing elements to be rendered within <aside> html element on right panel.
	   * The structure is:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `items`  | Element   | Elements/Components to be rendered on the right panel.     |
	   * | `border` | Boolean   | Determines whether bottom border of `ContentBlock` is set. |
	   */
	  aside: PropTypes.object
	};

	var stablePrefix$l = settings$1.stablePrefix;
	var prefix$t = settings_1.prefix;
	/**
	 * Callout with media pattern.
	 */

	var CalloutWithMedia = function CalloutWithMedia(_ref) {
	  var ContentBlockSimpleProps = _extends_1({}, _ref);

	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$l, "--callout-with-media"),
	    className: "".concat(prefix$t, "--callout-with-media")
	  }, React__default.createElement(Callout, null, React__default.createElement(ContentBlockSimple, ContentBlockSimpleProps)));
	};

	CalloutWithMedia.propTypes = ContentBlockSimple.propTypes;

	function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var stablePrefix$m = settings$1.stablePrefix;
	var prefix$u = settings_1.prefix;
	/**
	 * CardGroup component
	 */

	var CardGroup = function CardGroup(_ref) {
	  var cards = _ref.cards,
	      cta = _ref.cta;
	  var containerRef = React.useRef();
	  React.useEffect(function () {
	    setCardHeight();
	    lib.addEventListener('resize', setCardHeight);
	    return function () {
	      return lib.removeEventListener('resize', setCardHeight);
	    };
	  }, []);
	  /**
	   * Set the cards to have the same height as the bigger one
	   */

	  var setCardHeight = function setCardHeight() {
	    lib.requestAnimationFrame(function () {
	      var containerNode = containerRef.current;

	      if (containerNode) {
	        sameHeight(containerNode.getElementsByClassName(":not(.".concat(prefix$u, "--card__video) ").concat(prefix$u, "--card__heading")), 'md');
	        sameHeight(containerNode.getElementsByClassName(":not(.".concat(prefix$u, "--card__video) ").concat(prefix$u, "--card__copy")), 'md');
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$u, "--card__eyebrow")), 'md');
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$u, "--card--link")), 'md');
	      }
	    });
	  };

	  return _renderCards(cards, containerRef, cta);
	};
	/**
	 * Renders the cards based on the CardGroup entries.
	 *
	 * @param {Array} cards objects array
	 * @param {object} containerRef ref of elements
	 * @param {object} cta object
	 * @returns {*} CardGroup JSX objects
	 */


	var _renderCards = function _renderCards(cards, containerRef, cta) {
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$m, "--card-group"),
	    className: "".concat(prefix$u, "--card-group__cards__row ").concat(prefix$u, "--row--condensed"),
	    ref: containerRef
	  }, cards.map(function (card, index) {
	    return React__default.createElement("div", {
	      key: index,
	      className: "".concat(prefix$u, "--card-group__cards__col"),
	      role: "region",
	      "aria-label": card.heading
	    }, React__default.createElement(CTA, {
	      style: "card",
	      key: index,
	      customClassName: "".concat(prefix$u, "--card-group__card"),
	      image: card.image,
	      media: card.media,
	      heading: card.heading,
	      eyebrow: card.eyebrow,
	      copy: card.copy,
	      cta: _objectSpread$6({}, card.cta, {
	        icon: {
	          src: ArrowRight20
	        }
	      }),
	      type: card.media ? 'video' : 'local'
	    }));
	  }), cta && React__default.createElement("div", {
	    className: "".concat(prefix$u, "--card-group__cards__col")
	  }, React__default.createElement(Card, {
	    inverse: true,
	    heading: cta.heading,
	    cta: {
	      href: cta.cta.href,
	      icon: {
	        src: ArrowRight20
	      }
	    }
	  })));
	};

	CardGroup.propTypes = {
	  /**
	   * Array of card objects.
	   * Uses a sub-scheme of `<Card>`'s props for each items.
	   *
	   * Simple:
	   *
	   * | Name       | Required | Data Type | Description                            |
	   * | ---------- | -------- | --------- | -------------------------------------- |
	   * | `copy`     | YES      | String    | Copy of the card.                      |
	   * | `heading`  | YES      | String    | Heading of the card.                   |
	   * | `cta.href` | YES      | String    | URI for internal or external resource. |
	   *
	   * Image:
	   *
	   * | Name       | Required | Data Type | Description                              |
	   * | ---------- | -------- | --------- | ---------------------------------------- |
	   * | `image`    | YES      | Object    | Contains source and alt text properties. |
	   * | `eyebrow`  | YES      | String    | Eyebrow of the card.                     |
	   * | `heading`  | YES      | String    | Heading of the card.                     |
	   * | `cta.href` | YES      | String    | URI for internal or external resource.   |
	   *
	   * See [`<Card>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-card--static#props) for full usage details.
	   */
	  cards: PropTypes.arrayOf(PropTypes.shape({
	    heading: PropTypes.string,
	    eyebrow: PropTypes.string,
	    copy: PropTypes.string,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      media: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        type: PropTypes.string
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }),
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  })).isRequired,

	  /**
	   * Optional CTA card for group. Always displays as last item.
	   * Uses a sub-scheme of `<Card>`'s props.
	   * See [`<Card>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-card--static#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    heading: PropTypes.string,
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  })
	};

	var stablePrefix$n = settings$1.stablePrefix;
	var prefix$v = settings_1.prefix;
	/**
	 * ContentSection Component, for use with cardSection.
	 */

	var ContentSection = function ContentSection(_ref) {
	  var heading = _ref.heading,
	      theme = _ref.theme,
	      children = _ref.children,
	      customClassName = _ref.customClassName,
	      otherProps = objectWithoutProperties(_ref, ["heading", "theme", "children", "customClassName"]);

	  return React__default.createElement("section", {
	    className: cx("".concat(prefix$v, "--content-section"), customClassName, defineProperty({}, "".concat(prefix$v, "--content-section--").concat(theme), theme)),
	    "data-autoid": otherProps.autoid ? otherProps.autoid : "".concat(stablePrefix$n, "--content-section")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$v, "--content-section__grid")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$v, "--content-section__row")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$v, "--content-section__left")
	  }, React__default.createElement("h2", {
	    className: "".concat(prefix$v, "--content-section__heading")
	  }, heading)), React__default.createElement("div", {
	    className: "".concat(prefix$v, "--content-section__children")
	  }, children))));
	};

	ContentSection.propTypes = {
	  /**
	   * Heading text.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Theme name.
	   */
	  theme: PropTypes.oneOf(['white', 'g10', 'g90', 'g100']),

	  /**
	   * Container for other components.
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),

	  /**
	   * Optional class to be applied to the containing node.
	   */
	  customClassName: PropTypes.string
	};

	var stablePrefix$o = settings$1.stablePrefix;
	var prefix$w = settings_1.prefix;
	/**
	 * CardSectionImages pattern it is Cards with images.
	 */

	var CardSectionImages = function CardSectionImages(_ref) {
	  var cards = _ref.cards,
	      theme = _ref.theme,
	      otherProps = objectWithoutProperties(_ref, ["cards", "theme"]);

	  var cardsWithImages = cards.filter(function (_ref2) {
	    var image = _ref2.image,
	        eyebrow = _ref2.eyebrow,
	        heading = _ref2.heading,
	        copy = _ref2.copy,
	        href = _ref2.cta.href;
	    return image && eyebrow && heading && !copy && href;
	  });
	  return React__default.createElement(ContentSection, {
	    heading: otherProps.heading,
	    autoid: "".concat(stablePrefix$o, "--card-group-images-group"),
	    customClassName: cx("".concat(prefix$w, "--card-group"), defineProperty({}, "".concat(prefix$w, "--card-group--").concat(theme), theme))
	  }, React__default.createElement(CardGroup, {
	    cards: cardsWithImages
	  }));
	};

	CardSectionImages.propTypes = {
	  /**
	   * Color theme for pattern. Choose from:
	   *
	   * | Name    | Data Type | Description                  |
	   * | ------- | --------- | ---------------------------- |
	   * | `white` | String    | Carbon White theme           |
	   * | `g10`   | String    | Carbon Gray 10 (g10) theme   |
	   * | `g90`   | String    | Carbon Gray 90 (g90) theme   |
	   * | `g100`  | String    | Carbon Gray 100 (g100) theme |
	   */
	  theme: PropTypes.oneOf(['white', 'g10', 'g90', 'g100']),

	  /**
	   * Section heading.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Cards data. Has the following structure for each items:
	   *
	   * | Name       | Required | Data Type | Description                              |
	   * | ---------- | -------- | --------- | ---------------------------------------- |
	   * | `image`    | YES      | Object    | Contains source and alt text properties. |
	   * | `eyebrow`  | YES      | String    | Eyebrow of the card.                     |
	   * | `heading`  | YES      | String    | Heading of the card.                     |
	   * | `cta.href` | YES      | String    | URI for internal or external resource.   |
	   *
	   * See example
	   * [card data](https://github.com/carbon-design-system/ibm-dotcom-library/blob/master/packages/react/src/components/CardGroup/__stories__/data/cards.json).
	   */
	  cards: PropTypes.arrayOf(PropTypes.exact({
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }),
	    eyebrow: PropTypes.string,
	    heading: PropTypes.string,
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  })).isRequired
	};

	var stablePrefix$p = settings$1.stablePrefix;
	var prefix$x = settings_1.prefix;
	/**
	 * CardSectionSimple pattern it is Cards without images.
	 */

	var CardSectionSimple = function CardSectionSimple(_ref) {
	  var cards = _ref.cards,
	      cta = _ref.cta,
	      theme = _ref.theme,
	      otherProps = objectWithoutProperties(_ref, ["cards", "cta", "theme"]);

	  var cardsWithoutImages = cards.filter(function (_ref2) {
	    var image = _ref2.image,
	        heading = _ref2.heading,
	        copy = _ref2.copy,
	        href = _ref2.cta.href;
	    return !image && heading && copy && href;
	  });
	  return React__default.createElement(ContentSection, {
	    heading: otherProps.heading,
	    autoid: "".concat(stablePrefix$p, "--card-group-simple-group"),
	    customClassName: cx("".concat(prefix$x, "--card-group"), defineProperty({}, "".concat(prefix$x, "--card-group--").concat(theme), theme))
	  }, React__default.createElement(CardGroup, {
	    cards: cardsWithoutImages,
	    cta: cta
	  }));
	};

	CardSectionSimple.propTypes = {
	  /**
	   * Color theme for pattern. Choose from:
	   *
	   * | Name    | Data Type | Description                  |
	   * | ------- | --------- | ---------------------------- |
	   * | `white` | String    | Carbon White theme           |
	   * | `g10`   | String    | Carbon Gray 10 (g10) theme   |
	   * | `g90`   | String    | Carbon Gray 90 (g90) theme   |
	   * | `g100`  | String    | Carbon Gray 100 (g100) theme |
	   */
	  theme: PropTypes.oneOf(['white', 'g10', 'g90', 'g100']),

	  /**
	   * Section heading.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Array of card data. Has the following structure for each items:
	   *
	   * | Name       | Required | Data Type | Description                            |
	   * | ---------- | -------- | --------- | -------------------------------------- |
	   * | `copy`     | YES      | String    | Copy of the card.                      |
	   * | `heading`  | YES      | String    | Heading of the card.                   |
	   * | `cta.href` | YES      | String    | URI for internal or external resource. |
	   *
	   * See example
	   * [card data](https://github.com/carbon-design-system/ibm-dotcom-library/blob/master/packages/react/src/components/CardGroup/__stories__/data/cards.json).
	   */
	  cards: PropTypes.arrayOf(PropTypes.exact({
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  })).isRequired,

	  /**
	   * Optional CTA card for group. Always displays as last item.
	   * See [`<CardGroup>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cardgroup--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    heading: PropTypes.string,
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  })
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$q = settings$1.stablePrefix;
	var prefix$y = settings_1.prefix;
	/**
	 * Content Block - Cards pattern.
	 */

	var ContentBlockCards = function ContentBlockCards(_ref) {
	  var heading = _ref.heading,
	      cards = _ref.cards,
	      cta = _ref.cta;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$q, "--content-block-cards"),
	    className: "".concat(prefix$y, "--content-block-cards")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    cta: cta
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$y, "--content-block-cards__content")
	  }, React__default.createElement(CardGroup, {
	    cards: cards
	  }))));
	};

	ContentBlockCards.propTypes = {
	  /**
	   * Main title of ContentBlockCards pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Array of card objects.
	   * Uses a sub-scheme of `<Card>`'s props for each items, like below, depending on what type of card is used:
	   *
	   * Simple:
	   *
	   * | Name       | Required | Data Type | Description                            |
	   * | ---------- | -------- | --------- | -------------------------------------- |
	   * | `copy`     | YES      | String    | Copy of the card.                      |
	   * | `heading`  | YES      | String    | Heading of the card.                   |
	   * | `cta.href` | YES      | String    | URI for internal or external resource. |
	   *
	   * Image:
	   *
	   * | Name       | Required | Data Type | Description                              |
	   * | ---------- | -------- | --------- | ---------------------------------------- |
	   * | `image`    | YES      | Object    | Contains source and alt text properties. |
	   * | `eyebrow`  | YES      | String    | Eyebrow of the card.                     |
	   * | `heading`  | YES      | String    | Heading of the card.                     |
	   * | `cta.href` | YES      | String    | URI for internal or external resource.   |
	   *
	   * See [`<CardGroup>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cardgroup--default#props) for full usage details.
	   */
	  cards: PropTypes.arrayOf(PropTypes.shape({
	    heading: PropTypes.string,
	    eyebrow: PropTypes.string,
	    copy: PropTypes.string,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      media: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        type: PropTypes.string
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }),
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  })).isRequired,

	  /**
	   * CTA used at the end of content body. `Card` style supported.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['card']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  })
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$r = settings$1.stablePrefix;
	var prefix$z = settings_1.prefix;
	/**
	 * ContentBlockHeadlines pattern
	 */

	var ContentBlockHeadlines = function ContentBlockHeadlines(_ref) {
	  var heading = _ref.heading,
	      copy = _ref.copy,
	      items = _ref.items;
	  var containerRef = React.useRef();
	  var contentRows = chunk(items, 2);
	  React.useEffect(function () {
	    setSameHeight();
	    lib.addEventListener('resize', setSameHeight);
	    return function () {
	      return lib.removeEventListener('resize', setSameHeight);
	    };
	  }, []);
	  /**
	   * Function that activates the sameHeight utility
	   */

	  var setSameHeight = function setSameHeight() {
	    lib.requestAnimationFrame(function () {
	      var containerNode = containerRef.current;

	      if (containerNode) {
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$z, "--content-block-headlines__copy")), 'md');
	      }
	    });
	  };

	  return featureFlag(DDS_CONTENTBLOCK_HEADLINES, React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$r, "--content-block-headlines"),
	    className: "".concat(prefix$z, "--content-block-headlines"),
	    ref: containerRef
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    copy: copy,
	    border: true
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$z, "--content-block-headlines__container")
	  }, _renderRows(contentRows)))));
	};
	/**
	 * Renders the ContentBlockHeadlines items
	 *
	 * @param {Array} contentRows array of content rows
	 * @private
	 * @returns {*} JSX component
	 */


	var _renderRows = function _renderRows(contentRows) {
	  return contentRows.map(function (row, index) {
	    return React__default.createElement("div", {
	      className: "".concat(prefix$z, "--content-block-headlines__row"),
	      key: index
	    }, React__default.createElement("div", {
	      className: "".concat(prefix$z, "--content-block-headlines__item-container")
	    }, row.map(function (item, index) {
	      return React__default.createElement("div", {
	        className: "".concat(prefix$z, "--content-block-headlines__item"),
	        key: index
	      }, React__default.createElement("h4", {
	        className: "".concat(prefix$z, "--content-block-headlines__headline")
	      }, item.headline), React__default.createElement("p", {
	        className: "".concat(prefix$z, "--content-block-headlines__copy")
	      }, item.copy), item.cta && React__default.createElement(CTA, item.cta));
	    })));
	  });
	};
	/**
	 * Break out items per row
	 *
	 * @param {Array} array of items
	 * @param {number} size number of items per row
	 * @private
	 * @returns {Array} array of rows
	 */


	function chunk(array, size) {
	  return array.reduce(function (chunks, item, i) {
	    if (i % size === 0) {
	      chunks.push([item]);
	    } else {
	      chunks[chunks.length - 1].push(item);
	    }

	    return chunks;
	  }, []);
	}

	ContentBlockHeadlines.propTypes = {
	  /**
	   * Heading of the content block.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Intro copy of the content block.
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * Array of content items.
	   * See [CTA](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#text-link) for full usage details.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    headline: PropTypes.string.isRequired,
	    copy: PropTypes.string.isRequired,
	    cta: PropTypes.shape({
	      type: PropTypes.oneOfType([PropTypes.oneOf(['local', 'download', 'jump', 'external', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['local', 'download', 'jump', 'external', 'video', 'default']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    })
	  })).isRequired
	};

	var stablePrefix$s = settings$1.stablePrefix;
	var prefix$A = settings_1.prefix;
	/**
	 * ContentArrayGroup Component, for use with content arrays
	 *
	 * @param {object} props props object
	 * @param {*} props.children JSX Components
	 * @param {string} props.heading  Heading string
	 * @param {string} props.className optional class to be applied to the containing node
	 * @param {*} props.cta CTA component props object
	 * @returns {*} JSX ContentGroup component
	 */

	var ContentGroup = function ContentGroup(_ref) {
	  var children = _ref.children,
	      heading = _ref.heading,
	      customClassName = _ref.customClassName,
	      cta = _ref.cta,
	      copy = _ref.copy;
	  var className = cx("".concat(prefix$A, "--content-group"), customClassName);
	  return React__default.createElement("div", {
	    className: className,
	    "data-autoid": "".concat(stablePrefix$s, "--content-group")
	  }, React__default.createElement("h3", {
	    "data-autoid": "".concat(stablePrefix$s, "--content-group__title"),
	    className: "".concat(prefix$A, "--content-group__title")
	  }, heading), copy && React__default.createElement("div", {
	    className: "".concat(prefix$A, "--content-group__copy"),
	    dangerouslySetInnerHTML: {
	      __html: markdownToHtml(copy, {
	        bold: false
	      })
	    }
	  }), React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$s, "--content-group__children"),
	    className: cx("".concat(prefix$A, "--content-group__col"), "".concat(prefix$A, "--content-group__children"))
	  }, children), cta && React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$s, "--content-group__cta"),
	    className: "".concat(prefix$A, "--content-group__cta-row")
	  }, React__default.createElement(CTA, _extends_1({
	    customClassName: "".concat(prefix$A, "--content-group__cta"),
	    style: "card"
	  }, cta))));
	};

	ContentGroup.propTypes = {
	  /**
	   * Heading text.
	   */
	  heading: PropTypes.string,

	  /**
	   * Copy text (enabled for the `markdownToHtml` utility)
	   */
	  copy: PropTypes.string,

	  /**
	   * Container for other components.
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),

	  /**
	   * Class to be applied to the containing node.
	   */
	  customClassName: PropTypes.string,

	  /**
	   * CTA. Allowed style is `card` and type is `local`.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    type: PropTypes.oneOf(['local']),
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  })
	};

	var prefix$B = settings_1.prefix;
	var stablePrefix$t = settings$1.stablePrefix;
	/**
	 * ContentGroupSimple.
	 */

	var ContentGroupSimple = function ContentGroupSimple(_ref) {
	  var heading = _ref.heading,
	      mediaType = _ref.mediaType,
	      mediaData = _ref.mediaData,
	      items = _ref.items,
	      cta = _ref.cta,
	      copy = _ref.copy;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$t, "--content-group-simple"),
	    className: "".concat(prefix$B, "--content-group-simple")
	  }, React__default.createElement(ContentGroup, {
	    cta: cta,
	    heading: heading,
	    copy: copy
	  }, _renderMedia$2(mediaType, mediaData), _renderContent(items)));
	};
	/**
	 *
	 * @param {Array} items Array of data for ContentItems to be rendered
	 * @returns {*} Array of ContentItem Components
	 */


	var _renderContent = function _renderContent(items) {
	  return items.map(function (item, index) {
	    return React__default.createElement(ContentItem, _extends_1({}, item, {
	      key: index
	    }));
	  });
	};
	/**
	 * renders either video or image content
	 *
	 * @param {string} type cta type ( external | jump | local)
	 * @param {object} data cta type ( external | jump | local)
	 * @private
	 * @returns {*} media component
	 */


	var _renderMedia$2 = function _renderMedia(type, data) {
	  if (data) {
	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$t, "--content-group-simple__media")
	    }, type === 'image' && React__default.createElement(ImageWithCaption, data), type === 'video' && React__default.createElement(VideoPlayer, data));
	  }
	};

	ContentGroupSimple.propTypes = {
	  /**
	   * Main heading of the pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Copy text (enabled for the `markdownToHtml` utility)
	   */
	  copy: PropTypes.string,

	  /**
	   * Determines media type (image or video).
	   */
	  mediaType: PropTypes.oneOf(['image', 'video']),

	  /**
	   * Media Data for either image or video.
	   * See the following components' README for more details:
	   *
	   * * `mediaType="image"`: [`<ImageWithCaption>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-imagewithcaption--default#props)
	   * * `mediaType="video"`: [`<VideoPlayer>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-videoplayer--default#props)
	   */
	  mediaData: PropTypes.oneOfType([PropTypes.shape({
	    inverse: PropTypes.bool,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }).isRequired,
	    lightbox: PropTypes.bool,
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  }), PropTypes.shape({
	    customClassName: PropTypes.string,
	    videoId: PropTypes.string.isRequired,
	    showCaption: PropTypes.bool,
	    inverse: PropTypes.bool
	  })]),

	  /**
	   * Data to be used on `<ContentItem>`s.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    cta: PropTypes.shape({
	      type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    }),

	    /**
	     * Allows user to pass in custom class name.
	     */
	    customClassName: PropTypes.string,

	    /**
	     * Copy text.
	     */
	    copy: PropTypes.string,

	    /**
	     * Heading text.
	     */
	    heading: PropTypes.string,

	    /**
	     * Determines media type (image or video).
	     */
	    mediaType: PropTypes.oneOf(['image', 'video']),

	    /**
	     * Media Data for either image or video.
	     * See the following components' README for more details:
	     *
	     * * `mediaType="image"`: [`<ImageWithCaption>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-imagewithcaption--default#props)
	     * * `mediaType="video"`: [`<VideoPlayer>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-videoplayer--default#props)
	     */
	    mediaData: PropTypes.oneOfType([PropTypes.shape({
	      inverse: PropTypes.bool,
	      image: PropTypes.shape({
	        classname: PropTypes.string,
	        sources: PropTypes.arrayOf(PropTypes.shape({
	          src: PropTypes.string,
	          breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        })),
	        defaultSrc: PropTypes.string.isRequired,
	        alt: PropTypes.string.isRequired,
	        longDescription: PropTypes.string
	      }).isRequired,
	      lightbox: PropTypes.bool,
	      heading: PropTypes.string,
	      copy: PropTypes.string,
	      customClassName: PropTypes.string
	    }), PropTypes.shape({
	      customClassName: PropTypes.string,
	      videoId: PropTypes.string.isRequired,
	      showCaption: PropTypes.bool,
	      inverse: PropTypes.bool
	    })]),

	    /**
	     * `true` to changes theme to inverse.
	     */
	    inverse: PropTypes.bool
	  })).isRequired,

	  /**
	   * Data to be used on CTA.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  })
	};

	var stablePrefix$u = settings$1.stablePrefix;
	var prefix$C = settings_1.prefix;
	/**
	 * Content Block - segmented pattern.
	 */

	var ContentBlockMedia = function ContentBlockMedia(_ref) {
	  var copy = _ref.copy,
	      heading = _ref.heading,
	      items = _ref.items,
	      cta = _ref.cta,
	      aside = _ref.aside;
	  if (cta) cta.style = 'feature';
	  var content = items.map(function (item, index) {
	    return React__default.createElement(ContentGroupSimple, _extends_1({
	      key: index
	    }, item));
	  });
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$u, "--content-block-media"),
	    className: "".concat(prefix$C, "--content-block-media")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    copy: copy,
	    cta: cta,
	    aside: aside
	  }, content));
	};

	ContentBlockMedia.propTypes = {
	  /**
	   * Short copy to suppport title.
	   */
	  copy: PropTypes.string,

	  /**
	   * Main title of `<ContentBlockMedia>`.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Array of content items objects to render.
	   * Each items have the following structure in summary:
	   *
	   * | Name        | Required | Data Type | Description                                                                                                                                                                        |
	   * | ----------- | -------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
	   * | `heading`   | YES      | String    | Describes the block that it is a part of.                                                                                                                                          |
	   * | `mediaData` | YES      | Object    | See `mediaData` below.                                                                                                                                                             |
	   * | `cta`       | NO       | Object    | See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details. |
	   *
	   * `mediaData`:
	   *
	   * | Name      | Description                                                                                                                            |
	   * | --------- | -------------------------------------------------------------------------------------------------------------------------------------- |
	   * | `heading` | Describes the media section                                                                                                            |
	   * | `image`   | See See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details. |
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    heading: PropTypes.string.isRequired,
	    mediaType: PropTypes.oneOf(['image', 'video']),
	    mediaData: PropTypes.oneOfType([PropTypes.shape({
	      inverse: PropTypes.bool,
	      image: PropTypes.shape({
	        classname: PropTypes.string,
	        sources: PropTypes.arrayOf(PropTypes.shape({
	          src: PropTypes.string,
	          breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        })),
	        defaultSrc: PropTypes.string.isRequired,
	        alt: PropTypes.string.isRequired,
	        longDescription: PropTypes.string
	      }).isRequired,
	      lightbox: PropTypes.bool,
	      heading: PropTypes.string,
	      copy: PropTypes.string,
	      customClassName: PropTypes.string
	    }), PropTypes.shape({
	      customClassName: PropTypes.string,
	      videoId: PropTypes.string.isRequired,
	      showCaption: PropTypes.bool,
	      inverse: PropTypes.bool
	    })]).isRequired,
	    items: PropTypes.arrayOf(PropTypes.shape({
	      cta: PropTypes.shape({
	        style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	        type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	        copy: PropTypes.string,
	        href: PropTypes.string,
	        customClassName: PropTypes.string
	      }),
	      customClassName: PropTypes.string,
	      copy: PropTypes.string,
	      heading: PropTypes.string,
	      mediaType: PropTypes.oneOf(['image', 'video']),
	      mediaData: PropTypes.oneOfType([PropTypes.shape({
	        inverse: PropTypes.bool,
	        image: PropTypes.shape({
	          classname: PropTypes.string,
	          sources: PropTypes.arrayOf(PropTypes.shape({
	            src: PropTypes.string,
	            breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	          })),
	          defaultSrc: PropTypes.string.isRequired,
	          alt: PropTypes.string.isRequired,
	          longDescription: PropTypes.string
	        }).isRequired,
	        lightbox: PropTypes.bool,
	        heading: PropTypes.string,
	        copy: PropTypes.string,
	        customClassName: PropTypes.string
	      }), PropTypes.shape({
	        customClassName: PropTypes.string,
	        videoId: PropTypes.string.isRequired,
	        showCaption: PropTypes.bool,
	        inverse: PropTypes.bool
	      })]),
	      inverse: PropTypes.bool
	    })).isRequired,
	    cta: PropTypes.shape({
	      style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	      type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    })
	  })).isRequired,

	  /**
	   * Optional CTA. Must be `Feature Link`.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['feature']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Object containing elements to be rendered within <aside> html element on right panel.
	   * The structure is:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `items`  | Element   | Elements/Components to be rendered on the right panel.     |
	   * | `border` | Boolean   | Determines whether bottom border of `ContentBlock` is set. |
	   */
	  aside: PropTypes.object
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var prefix$D = settings_1.prefix;
	var stablePrefix$v = settings$1.stablePrefix;
	/**
	 * Card Array Component.
	 */

	var ContentGroupCards = function ContentGroupCards(_ref) {
	  var heading = _ref.heading,
	      items = _ref.items,
	      copy = _ref.copy;
	  var containerRef = React.useRef();
	  React.useEffect(function () {
	    setSameHeight();
	    window.addEventListener('resize', setSameHeight);
	    return function () {
	      return window.removeEventListener('resize', setSameHeight);
	    };
	  }, []);
	  /**
	   * Function that activates the sameHeight utility
	   */

	  var setSameHeight = function setSameHeight() {
	    window.requestAnimationFrame(function () {
	      var containerNode = containerRef.current;

	      if (containerNode) {
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$D, "--card__heading")), 'md');
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$D, "--card__copy")), 'md');
	      }
	    });
	  };

	  return React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$v, "--content-group-cards"),
	    className: "".concat(prefix$D, "--content-group-cards")
	  }, React__default.createElement(ContentGroup, {
	    heading: heading,
	    copy: copy
	  }, React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$v, "--content-group-cards-group"),
	    ref: containerRef,
	    className: "".concat(prefix$D, "--content-group-cards-group ").concat(prefix$D, "--grid--condensed")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$D, "--content-group-cards__row")
	  }, _renderCards$1(items)))));
	};
	/**
	 * Renders the cards based on the ContentArray entries
	 *
	 * @param {Array} items Content object array
	 * @returns {*} CardArrayItem JSX objects
	 */


	var _renderCards$1 = function _renderCards(items) {
	  return items.map(function (elem, index) {
	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$v, "--content-group-cards-item"),
	      className: "".concat(prefix$D, "--content-group-cards-item__col"),
	      key: index,
	      role: "region"
	    }, React__default.createElement(Card, {
	      customClassName: "".concat(prefix$D, "--content-group-cards-item"),
	      heading: elem.heading,
	      copy: elem.copy,
	      cta: {
	        href: elem.cta.href,
	        icon: {
	          src: ArrowRight20
	        }
	      },
	      "aria-label": elem.heading
	    }));
	  });
	};

	ContentGroupCards.propTypes = {
	  /**
	   * Main heading of the pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Copy text (enabled for the `markdownToHtml` utility)
	   */
	  copy: PropTypes.string,

	  /**
	   * Array of content group objects. Has the following structure:
	   *
	   * | Name      | Data Type | Description                                                |
	   * | --------- | --------- | ---------------------------------------------------------- |
	   * | `heading` | String    | Title for the Card.                                        |
	   * | `copy`    | String    | Copy for the Card.                                         |
	   * | `cta`     | Object    | Object containing target and href of cta. See `cta` below. |
	   *
	   * `cta`:
	   *
	   * | Name   | Data Type | Description                       |
	   * | ------ | --------- | --------------------------------- |
	   * | `href` | String    | Url of the Content Card item cta. |
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    copy: PropTypes.string,
	    cta: PropTypes.shape({
	      href: PropTypes.string
	    })
	  }))
	};

	function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var stablePrefix$w = settings$1.stablePrefix;
	var prefix$E = settings_1.prefix;
	/**
	 * Content with pictogram component.
	 */

	var PictogramItem = function PictogramItem(_ref) {
	  var heading = _ref.heading,
	      copy = _ref.copy,
	      _ref$pictogram = _ref.pictogram,
	      Pictogram = _ref$pictogram.src,
	      pictogramProps = objectWithoutProperties(_ref$pictogram, ["src"]),
	      cta = _ref.cta,
	      className = _ref.className;

	  return React__default.createElement("div", {
	    className: cx(className, "".concat(prefix$E, "--pictogram-item"))
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$E, "--pictogram-item__row")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$E, "--pictogram-item__wrapper")
	  }, React__default.createElement(Pictogram, _extends_1({
	    "data-autoid": "".concat(stablePrefix$w, "--pictogram-item__pictogram"),
	    className: "".concat(prefix$E, "--pictogram-item__pictogram")
	  }, pictogramProps))), React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$w, "--pictogram-item__content"),
	    className: "".concat(prefix$E, "--pictogram-item__content")
	  }, React__default.createElement(ContentItem, {
	    heading: heading,
	    copy: copy,
	    cta: cta && _objectSpread$7({
	      style: 'text'
	    }, cta)
	  }))));
	};

	PictogramItem.propTypes = {
	  /**
	   * Content with pictogram component title property.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Content with pictogram component copy property.
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * Object with CTA data.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Pictogram data object.
	   * The structure is:
	   *
	   * | Name  | Required | Data Type | Default Value | Description                                                  |
	   * | ----- | -------- | --------- | ------------- | ------------------------------------------------------------ |
	   * | `src` | YES      | Component | null          | Pictogram component imported from `@carbon/pictograms-react` |
	   */
	  pictogram: PropTypes.shape({
	    src: PropTypes.object.isRequired
	  }).isRequired,

	  /**
	   * Pictogram Item `className`` prop.
	   */
	  className: PropTypes.string
	};

	var stablePrefix$x = settings$1.stablePrefix;
	var prefix$F = settings_1.prefix;
	/**
	 * Content group — with pictograms.
	 */

	var ContentGroupPictograms = function ContentGroupPictograms(_ref) {
	  var heading = _ref.heading,
	      items = _ref.items,
	      className = _ref.className,
	      copy = _ref.copy;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$x, "--content-group-pictograms"),
	    className: cx(className, "".concat(prefix$F, "--content-group-pictograms"))
	  }, React__default.createElement(ContentGroup, {
	    heading: heading,
	    copy: copy
	  }, _renderItems(items)));
	};
	/**
	 * Renders the array of items
	 *
	 * @param {Array} items Array of items for PictogramItem
	 * @returns {*} PictogramItem JSX components
	 */


	var _renderItems = function _renderItems(items) {
	  return items.map(function (item, index) {
	    return React__default.createElement(PictogramItem, _extends_1({
	      className: "".concat(prefix$F, "--content-group-pictograms__item"),
	      "data-autoid": "".concat(prefix$F, "--content-group-pictograms__item")
	    }, item, {
	      key: index
	    }));
	  });
	};

	ContentGroupPictograms.propTypes = {
	  /**
	   * Main title of Content Group — with Pictograms pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Copy text (enabled for the `markdownToHtml` utility)
	   */
	  copy: PropTypes.string,

	  /**
	   * Array of PictogramItems.
	   * See [`<PictogramItem>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-pictogramitem--default#props) for full usage details.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    heading: PropTypes.string.isRequired,
	    copy: PropTypes.string.isRequired,
	    cta: PropTypes.shape({
	      style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	      type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    }),
	    pictogram: PropTypes.shape({
	      src: PropTypes.object.isRequired
	    }),
	    className: PropTypes.string
	  })).isRequired,

	  /**
	   * The CSS class name to apply to the top-level element.
	   */
	  className: PropTypes.string
	};

	var stablePrefix$y = settings$1.stablePrefix;
	var prefix$G = settings_1.prefix;
	/**
	 * ContentBlockMixed Pattern.
	 */

	var ContentBlockMixed = function ContentBlockMixed(_ref) {
	  var heading = _ref.heading,
	      copy = _ref.copy,
	      cta = _ref.cta,
	      items = _ref.items,
	      aside = _ref.aside;
	  var patterns = {
	    ContentGroupCards: ContentGroupCards,
	    ContentGroupSimple: ContentGroupSimple,
	    ContentGroupPictograms: ContentGroupPictograms
	  };
	  var groups = items.map(function (item, index) {
	    var Pattern = patterns[item.type];
	    return React__default.createElement(Pattern, _extends_1({
	      key: index
	    }, item));
	  });
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$y, "--content-block-mixed"),
	    className: "".concat(prefix$G, "--content-block-mixed")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    copy: copy,
	    cta: cta,
	    aside: aside
	  }, groups));
	};

	ContentBlockMixed.propTypes = {
	  /**
	   * Title of the content block.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Simple content item.
	   * Uses [`markdownToHtml`](https://github.com/carbon-design-system/ibm-dotcom-library/tree/master/packages/utilities/src/utilities/markdownToHtml) utility.
	   */
	  copy: PropTypes.string,

	  /**
	   * The data of the content groups to render. See the following for full usage details:
	   *
	   * * [`<ContentGroupCards>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/patterns-blocks-contentgroupcards--default#props)
	   * * [`<ContentGroupSimple>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/patterns-blocks-contentgroupsimple--default#props)
	   * * [`<ContentGroupPictograms>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/patterns-blocks-contentgrouppictograms--default#props)
	   */
	  items: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({
	    type: PropTypes.oneOf(['ContentGroupCards', 'ContentGroupSimple', 'ContentGroupPictograms']).isRequired,
	    heading: PropTypes.string.isRequired,
	    items: PropTypes.arrayOf(PropTypes.shape({
	      title: PropTypes.string,
	      copy: PropTypes.string,
	      cta: PropTypes.shape({
	        href: PropTypes.string
	      })
	    }))
	  }), PropTypes.shape({
	    type: PropTypes.oneOf(['ContentGroupCards', 'ContentGroupSimple', 'ContentGroupPictograms']).isRequired,
	    heading: PropTypes.string.isRequired,
	    mediaType: PropTypes.oneOf(['image', 'video']),
	    mediaData: PropTypes.oneOfType([PropTypes.shape({
	      inverse: PropTypes.bool,
	      image: PropTypes.shape({
	        classname: PropTypes.string,
	        sources: PropTypes.arrayOf(PropTypes.shape({
	          src: PropTypes.string,
	          breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        })),
	        defaultSrc: PropTypes.string.isRequired,
	        alt: PropTypes.string.isRequired,
	        longDescription: PropTypes.string
	      }).isRequired,
	      lightbox: PropTypes.bool,
	      heading: PropTypes.string,
	      copy: PropTypes.string,
	      customClassName: PropTypes.string
	    }), PropTypes.shape({
	      customClassName: PropTypes.string,
	      videoId: PropTypes.string.isRequired,
	      showCaption: PropTypes.bool,
	      inverse: PropTypes.bool
	    })]),
	    items: PropTypes.arrayOf(PropTypes.shape({
	      cta: PropTypes.shape({
	        style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	        type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	        copy: PropTypes.string,
	        href: PropTypes.string,
	        customClassName: PropTypes.string
	      }),
	      customClassName: PropTypes.string,
	      copy: PropTypes.string,
	      heading: PropTypes.string,
	      mediaType: PropTypes.oneOf(['image', 'video']),
	      mediaData: PropTypes.oneOfType([PropTypes.shape({
	        inverse: PropTypes.bool,
	        image: PropTypes.shape({
	          classname: PropTypes.string,
	          sources: PropTypes.arrayOf(PropTypes.shape({
	            src: PropTypes.string,
	            breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	          })),
	          defaultSrc: PropTypes.string.isRequired,
	          alt: PropTypes.string.isRequired,
	          longDescription: PropTypes.string
	        }).isRequired,
	        lightbox: PropTypes.bool,
	        heading: PropTypes.string,
	        copy: PropTypes.string,
	        customClassName: PropTypes.string
	      }), PropTypes.shape({
	        customClassName: PropTypes.string,
	        videoId: PropTypes.string.isRequired,
	        showCaption: PropTypes.bool,
	        inverse: PropTypes.bool
	      })]),
	      inverse: PropTypes.bool
	    })).isRequired,
	    cta: PropTypes.shape({
	      style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	      type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    })
	  }), PropTypes.shape({
	    type: PropTypes.oneOf(['ContentGroupCards', 'ContentGroupSimple', 'ContentGroupPictograms']).isRequired,
	    heading: PropTypes.string.isRequired,
	    items: PropTypes.arrayOf(PropTypes.shape({
	      heading: PropTypes.string.isRequired,
	      copy: PropTypes.string.isRequired,
	      cta: PropTypes.shape({
	        style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	        type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	        copy: PropTypes.string,
	        href: PropTypes.string,
	        customClassName: PropTypes.string
	      }),
	      pictogram: PropTypes.shape({
	        src: PropTypes.object.isRequired
	      }),
	      className: PropTypes.string
	    })).isRequired,
	    className: PropTypes.string
	  })])).isRequired,

	  /**
	   * CTA used at the end of content body. `Card` style supported.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['card']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Object containing elements to be rendered within <aside> html element on right panel.
	   * The structure is:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `items`  | Element   | Elements/Components to be rendered on the right panel.     |
	   * | `border` | Boolean   | Determines whether bottom border of `ContentBlock` is set. |
	   */
	  aside: PropTypes.shape({
	    items: PropTypes.element,
	    border: PropTypes.bool
	  })
	};

	function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var stablePrefix$z = settings$1.stablePrefix;
	var prefix$H = settings_1.prefix;
	/**
	 * Content Block - Segmented pattern.
	 */

	var ContentBlockSegmented = function ContentBlockSegmented(_ref) {
	  var copy = _ref.copy,
	      cta = _ref.cta,
	      heading = _ref.heading,
	      mediaType = _ref.mediaType,
	      mediaData = _ref.mediaData,
	      items = _ref.items,
	      aside = _ref.aside;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$z, "--content-block-segmented"),
	    className: "".concat(prefix$H, "--content-block-segmented")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    copy: copy,
	    cta: cta,
	    aside: aside
	  }, _renderMedia$3(mediaType, mediaData), _renderGroup(items)));
	};
	/**
	 * renders either video or image content
	 *
	 * @param {string} type cta type ( external | jump | local)
	 * @param {object} data cta type ( external | jump | local)
	 * @private
	 * @returns {*} media component
	 */


	var _renderMedia$3 = function _renderMedia(type, data) {
	  if (data) {
	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$z, "--content-block-segmented__media")
	    }, type === 'image' && React__default.createElement(ImageWithCaption, data), type === 'video' && React__default.createElement(VideoPlayer, data));
	  }
	};
	/**
	 *
	 * @param {object} items content item data
	 * @returns {*} JSX Component with the media
	 */


	var _renderGroup = function _renderGroup(items) {
	  return items.map(function (item, index) {
	    return React__default.createElement(ContentGroup, {
	      heading: item.heading,
	      key: index,
	      cta: item.cta && (item.cta.type === 'jump' || item.cta.type === 'local') ? _objectSpread$8({
	        style: 'text'
	      }, item.cta) : undefined
	    }, React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$z, "--content-block-segmented__content-group")
	    }, React__default.createElement(ContentItem, {
	      copy: item.copy,
	      key: index
	    }), item.image && React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$z, "--content-block-segmented__media")
	    }, React__default.createElement(ImageWithCaption, item.image))));
	  });
	};

	ContentBlockSegmented.propTypes = {
	  /**
	   * Main title of pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Short copy to suppport title.
	   */
	  copy: PropTypes.string,

	  /**
	   * Supports `text` and `card` styles.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Determines media type (image or video).
	   */
	  mediaType: PropTypes.oneOf(['image', 'video']),

	  /**
	   * Media Data for either image or video.
	   * See the following components' README for more details:
	   *
	   * * `mediaType="image"`: [`<ImageWithCaption>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-imagewithcaption--default#props)
	   * * `mediaType="video"`: [`<VideoPlayer>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-videoplayer--default#props)
	   */
	  mediaData: PropTypes.oneOfType([PropTypes.shape({
	    inverse: PropTypes.bool,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }).isRequired,
	    lightbox: PropTypes.bool,
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  }), PropTypes.shape({
	    customClassName: PropTypes.string,
	    videoId: PropTypes.string.isRequired,
	    showCaption: PropTypes.bool,
	    inverse: PropTypes.bool
	  })]),

	  /**
	   * Array of content items to render. Has the following structure for each items:
	   *
	   * | Name      | Required | Data Type | Description                                                                                                                                                                                                             |
	   * | --------- | -------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
	   * | `heading` | YES      | String    | Short copy describing content item.                                                                                                                                                                                     |
	   * | `image`   | NO       | Object    | See the [`Image`](https://github.com/carbon-design-system/ibm-dotcom-library/tree/master/packages/react/src/components/Image) component for full usage details.                                                         |
	   * | `cta`     | NO       | Object    | `jump` and `local` types are allowed, for more information, see the [`CTA`](https://github.com/carbon-design-system/ibm-dotcom-library/tree/master/packages/react/src/components/CTA) component for full usage details. |
	   * | `copy`    | YES      | String    | Item content.                                                                                                                                                                                                           |
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    image: PropTypes.shape({
	      inverse: PropTypes.bool,
	      image: PropTypes.shape({
	        classname: PropTypes.string,
	        sources: PropTypes.arrayOf(PropTypes.shape({
	          src: PropTypes.string,
	          breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	        })),
	        defaultSrc: PropTypes.string.isRequired,
	        alt: PropTypes.string.isRequired,
	        longDescription: PropTypes.string
	      }).isRequired,
	      lightbox: PropTypes.bool,
	      heading: PropTypes.string,
	      copy: PropTypes.string,
	      customClassName: PropTypes.string
	    }),
	    cta: PropTypes.shape({
	      style: PropTypes.oneOf(['card']),
	      type: PropTypes.oneOf(['local']),
	      copy: PropTypes.string,
	      customClassName: PropTypes.string
	    })
	  })).isRequired,

	  /**
	   * Object containing elements to be rendered within <aside> html element on right panel.
	   * The structure is:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `items`  | Element   | Elements/Components to be rendered on the right panel.     |
	   * | `border` | Boolean   | Determines whether bottom border of `ContentBlock` is set. |
	   */
	  aside: PropTypes.shape({
	    items: PropTypes.element,
	    border: PropTypes.bool
	  })
	};

	var stablePrefix$A = settings$1.stablePrefix;
	var prefix$I = settings_1.prefix;
	/**
	 * LinkList Component, for use with items array
	 *
	 * @param {object} props props object
	 * @param {string} props.heading  Heading string
	 * @param {Array} props.items array of item
	 * @returns {*} JSX LinkList component
	 */

	var LinkList = function LinkList(_ref) {
	  var heading = _ref.heading,
	      iconPlacement = _ref.iconPlacement,
	      items = _ref.items,
	      style = _ref.style;
	  var linkStyle = style === 'card' ? 'card' : 'text';
	  return React__default.createElement("div", {
	    className: "".concat(prefix$I, "--link-list"),
	    "data-autoid": "".concat(stablePrefix$A, "--link-list")
	  }, React__default.createElement("h4", {
	    className: "".concat(prefix$I, "--link-list__heading")
	  }, heading), React__default.createElement("ul", {
	    className: "".concat(prefix$I, "--link-list__list ").concat(prefix$I, "--link-list__list--").concat(style)
	  }, items.map(function (cta, index) {
	    return React__default.createElement("li", {
	      className: "".concat(prefix$I, "--link-list__list__CTA ").concat(prefix$I, "--link-list__list--").concat(cta.type),
	      key: index
	    }, React__default.createElement(CTA, _extends_1({
	      style: linkStyle
	    }, cta, {
	      disableImage: true
	    }, iconPlacement && linkStyle === 'text' && {
	      iconPlacement: iconPlacement
	    })));
	  })));
	};

	LinkList.propTypes = {
	  /**
	   * Describes heading of LinkList.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Describes the list of CTA.
	   * The summary of the structure of each items are:
	   *
	   * | Name      | Description                                                                             |
	   * | --------- | --------------------------------------------------------------------------------------- |
	   * | `heading` | Describing the resource with added detail.                                              |
	   * | `type`    | Describes after onClick where to load. It has `external`, `local`, and `video` options. |
	   *
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  })).isRequired,

	  /**
	   * Icon placement.
	   */
	  iconPlacement: PropTypes.oneOf(['left', 'right']),

	  /**
	   * Orientation of LinkList.
	   */
	  style: PropTypes.oneOf(['card', 'horizontal', 'vertical', 'vertical-end']).isRequired
	};

	var stablePrefix$B = settings$1.stablePrefix;
	var prefix$J = settings_1.prefix;
	/**
	 * ContentItemHorizontal Pattern
	 *
	 * @param {object} props props object
	 * @param {string} props.eyebrow eyebrow text
	 * @param {string} props.heading heading text
	 * @param {string} props.copy copy text
	 * @param {Array} props.cta cta array
	 *
	 * @returns {*} JSX ContentItemHorizontal pattern
	 */

	var ContentItemHorizontal = function ContentItemHorizontal(_ref) {
	  var eyebrow = _ref.eyebrow,
	      heading = _ref.heading,
	      copy = _ref.copy,
	      cta = _ref.cta;
	  return React__default.createElement("div", {
	    className: "".concat(prefix$J, "--content-item-horizontal__item "),
	    "data-autoid": "".concat(stablePrefix$B, "--content-item-horizontal__item")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$J, "--content-item-horizontal__row")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$J, "--content-item-horizontal__col")
	  }, eyebrow && React__default.createElement("p", {
	    className: "".concat(prefix$J, "--content-item-horizontal__item--eyebrow"),
	    "data-autoid": "".concat(stablePrefix$B, "--content-item-horizontal__item--eyebrow")
	  }, eyebrow), React__default.createElement("h3", {
	    className: "".concat(prefix$J, "--content-item-horizontal__item--heading"),
	    "data-autoid": "".concat(stablePrefix$B, "--content-item-horizontal__item--heading")
	  }, heading)), React__default.createElement("div", {
	    className: "".concat(prefix$J, "--content-item-horizontal__col")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$J, "--content-item-horizontal__item--copy"),
	    "data-autoid": "".concat(stablePrefix$B, "--content-item-horizontal__item--copy"),
	    dangerouslySetInnerHTML: {
	      __html: markdownToHtml(copy, {
	        bold: false
	      })
	    }
	  }), cta && React__default.createElement("div", {
	    className: "".concat(prefix$J, "--content-item-horizontal__item--cta"),
	    "data-autoid": "".concat(stablePrefix$B, "--content-item-horizontal__item--cta")
	  }, React__default.createElement(LinkList, _extends_1({
	    style: "vertical"
	  }, cta))))));
	};

	ContentItemHorizontal.propTypes = {
	  /**
	   * Optional text displayed above the heading.
	   */
	  eyebrow: PropTypes.string,

	  /**
	   * Heading of the content item.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Copy of the content item. Accepts _italic_ markdown formatting.
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * Optional CTA links displayed below the copy.
	   * Each item has the following structure:
	   *
	   * | Name   | Required | Data Type | Description                                |
	   * | ------ | -------- | --------- | ------------------------------------------ |
	   * | `type` | YES      | Object    | Link type. Accepts `local` and `external`. |
	   * | `copy` | YES      | String    | Link text.                                 |
	   * | `href` | YES      | String    | URI for internal or external resource.     |
	   */
	  cta: PropTypes.shape({
	    heading: PropTypes.string,
	    items: PropTypes.arrayOf(PropTypes.shape({
	      type: PropTypes.oneOfType([PropTypes.oneOf(['local', 'external']), PropTypes.arrayOf(PropTypes.oneOf(['local', 'external']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    })).isRequired,
	    iconPlacement: PropTypes.oneOf(['left', 'right'])
	  })
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$C = settings$1.stablePrefix;
	var prefix$K = settings_1.prefix;
	/**
	 * ContentGroupHorizontal pattern.
	 */

	var ContentGroupHorizontal = function ContentGroupHorizontal(_ref) {
	  var heading = _ref.heading,
	      items = _ref.items;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$C, "--content-group-horizontal"),
	    className: "".concat(prefix$K, "--content-group-horizontal")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    border: true
	  }, items.map(function (item, index) {
	    return React__default.createElement(ContentItemHorizontal, {
	      eyebrow: item.eyebrow,
	      heading: item.heading,
	      copy: item.copy,
	      cta: item.cta,
	      key: index
	    });
	  })));
	};

	ContentGroupHorizontal.propTypes = {
	  /**
	   * Heading of the content group.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Array of content items.
	   * See [`<ContentItemHorizontal>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-contentitemhorizontal--default#props) for full usage details.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    eyebrow: PropTypes.string,
	    heading: PropTypes.string.isRequired,
	    copy: PropTypes.string.isRequired,
	    cta: PropTypes.shape({
	      heading: PropTypes.string,
	      items: PropTypes.arrayOf(PropTypes.shape({
	        type: PropTypes.oneOfType([PropTypes.oneOf(['local', 'external']), PropTypes.arrayOf(PropTypes.oneOf(['local', 'external']))]),
	        copy: PropTypes.string,
	        href: PropTypes.string,
	        customClassName: PropTypes.string
	      })).isRequired,
	      iconPlacement: PropTypes.oneOf(['left', 'right'])
	    })
	  })).isRequired
	};

	var stablePrefix$D = settings$1.stablePrefix;
	var prefix$L = settings_1.prefix;
	/**
	 * CTASection pattern.
	 */

	var CTASection = function CTASection(_ref) {
	  var _classNames;

	  var heading = _ref.heading,
	      copy = _ref.copy,
	      cta = _ref.cta,
	      items = _ref.items,
	      theme = _ref.theme;
	  var containerRef = React.useRef();
	  React.useEffect(function () {
	    setSameHeight();
	    lib.addEventListener('resize', setSameHeight);
	    return function () {
	      return lib.removeEventListener('resize', setSameHeight);
	    };
	  }, []);
	  /**
	   * Function that activates the sameHeight utility
	   */

	  var setSameHeight = function setSameHeight() {
	    lib.requestAnimationFrame(function () {
	      var containerNode = containerRef.current;

	      if (containerNode) {
	        sameHeight(containerNode.getElementsByClassName("".concat(prefix$L, "--content-item__copy")), 'md');
	      }
	    });
	  };

	  return React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$D, "--cta-section"),
	    className: cx("".concat(prefix$L, "--cta-section"), (_classNames = {}, defineProperty(_classNames, "".concat(prefix$L, "--cta-section__has-items"), items), defineProperty(_classNames, "".concat(prefix$L, "--cta-section--").concat(theme), theme), _classNames)),
	    ref: containerRef
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    copy: copy
	  }), React__default.createElement(CTA, _extends_1({
	    customClassName: "".concat(prefix$L, "--cta-section__cta")
	  }, cta)), items && React__default.createElement("div", {
	    className: "".concat(prefix$L, "--helper-wrapper")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$L, "--content-item-wrapper")
	  }, items.map(function (item, index) {
	    return React__default.createElement(ContentItem, {
	      key: index,
	      heading: item.heading,
	      copy: item.copy,
	      cta: item.cta
	    });
	  }))));
	};

	CTASection.propTypes = {
	  /**
	   * The heading for the CTA Section pattern.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * The copy for the CTA Section pattern.
	   */
	  copy: PropTypes.string.isRequired,

	  /**
	   * CTA object.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  }),

	  /**
	   * Color theme for pattern.
	   */
	  theme: PropTypes.oneOf(['white', 'g10', 'g90', 'g100']),

	  /**
	   * The `<ContentItem>` data to render.
	   * See the [`<ContentItem>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/patterns-sub-patterms-contentitem--default#props) for full usage details.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    cta: PropTypes.shape({
	      heading: PropTypes.string,
	      copy: PropTypes.string,
	      cta: PropTypes.shape({
	        style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	        type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video', 'default']))]),
	        copy: PropTypes.string,
	        href: PropTypes.string,
	        customClassName: PropTypes.string
	      })
	    })
	  }))
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var FooterLogo = function FooterLogo(props) {
	  return React__default.createElement("svg", props, React__default.createElement("title", null, "IBM Logo"), React__default.createElement("path", {
	    d: "M30.444 60.208v4.03H0v-4.03h30.444zm78.291-.001v4.03H86.983v-4.03h21.752zm47.858 0v4.03H134.84v-4.03h21.753zm-33.416 0l-1.398 4.03-1.38-4.03h2.778zm-88.384 0h42.775c-2.797 2.426-6.39 3.925-10.327 4.025l-.423.006H34.793v-4.03h42.775zm-4.35-8.46v4.03H0v-4.03h30.444zm52.402 0c-.332 1.248-.8 2.44-1.389 3.555l-.259.474H34.793v-4.029h48.052zm73.748-.005v4.031H134.84v-4.03h21.753zm-47.858 0v4.031H86.983v-4.03h21.752zm17.375 0l-1.398 4.031h-5.85l-1.395-4.03h8.643zM21.745 43.285v4.03H8.698v-4.03h13.047zm61.195 0a17.32 17.32 0 0 1 .476 3.51l.008.52H68.796v-4.03H82.94zm-26.401 0v4.03H43.491v-4.03H56.54zm72.502-.007l-1.396 4.03H115.93l-1.397-4.03h14.507zm18.85 0v4.03h-13.05v-4.03h13.05zm-39.156 0v4.03H95.684v-4.03h13.051zm-86.99-8.454v4.03H8.698v-4.03h13.047zm56.117 0a16.945 16.945 0 0 1 2.926 3.582l.264.447h-37.56v-4.03h34.37zm30.873-.01v4.03H95.684v-4.03h13.051zm39.157 0v4.03H134.84v-4.03h13.052zm-15.919 0l-1.396 4.03h-17.579l-1.396-4.03h20.371zm-50.778-8.452a16.963 16.963 0 0 1-2.82 3.674l-.37.355H43.49v-4.029h37.704zm-59.45 0v4.03H8.698v-4.03h13.047zm126.147-.013v4.031H134.84v-3.839l-1.33 3.839h-11.456l1.373-4.03h24.465zm-27.743 0l1.372 4.031h-11.456l-1.33-3.839v3.84H95.684v-4.032h24.465zm-98.404-8.448v4.03H8.698V17.9h13.047zm61.68 0c0 1.215-.134 2.399-.375 3.542l-.11.487H68.796V17.9h14.628zM56.538 17.9v4.03H43.491V17.9H56.54zm91.352-.015v4.03h-22.954l1.37-4.03h21.584zm-30.624 0l1.372 4.03H95.684v-4.03h21.583zM30.444 9.437v4.03H0v-4.03h30.444zm50.753 0a17.048 17.048 0 0 1 1.498 3.499l.15.531H34.794v-4.03h46.403zm75.396-.018v4.03h-28.776l1.373-4.03h27.403zm-42.207 0l1.372 4.031H86.982V9.42h27.404zM30.444.978v4.03H0V.977h30.444zm36.374 0c3.96 0 7.594 1.415 10.448 3.772l.303.257H34.794V.977h32.024zm89.775-.022v4.031h-25.894l1.372-4.03h24.522zm-45.098 0l1.372 4.03H86.982V.955h24.513z"
	  }));
	};

	FooterLogo.defaultProps = {
	  className: "bx--footer-logo__logo",
	  viewBox: "0 0 157 65"
	};
	var stablePrefix$E = settings$1.stablePrefix;
	var prefix$M = settings_1.prefix;
	/**
	 * Footer logo component
	 *
	 * @returns {object} JSX object
	 */

	var Logo = function Logo() {
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$E, "--footer-logo"),
	    className: "".concat(prefix$M, "--footer-logo")
	  }, React__default.createElement("a", {
	    "data-autoid": "".concat(stablePrefix$E, "--footer-logo__link"),
	    className: "".concat(prefix$M, "--footer-logo__link"),
	    href: "https://www.ibm.com/"
	  }, React__default.createElement(FooterLogo, null)));
	};

	function _extends$4() {
	  _extends$4 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$4.apply(this, arguments);
	}

	function _defineProperty$8(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$7(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$7(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$7(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$N = settings_1.prefix;

	function Accordion(_ref) {
	  var align = _ref.align,
	      children = _ref.children,
	      customClassName = _ref.className,
	      rest = _objectWithoutProperties$7(_ref, ["align", "children", "className"]);

	  var className = cx("".concat(prefix$N, "--accordion"), customClassName, _defineProperty$8({}, "".concat(prefix$N, "--accordion--").concat(align), align));
	  return /*#__PURE__*/React__default.createElement("ul", _extends$4({
	    className: className
	  }, rest), children);
	}

	Accordion.defaultProps = {
	  align: 'end'
	};
	Accordion.propTypes = {
	  /**
	   * Pass in the children that will be rendered within the Accordion
	   */
	  children: PropTypes.node,

	  /**
	   * Specify an optional className to be applied to the container node
	   */
	  className: PropTypes.string,

	  /**
	   * Specify the alignment of the accordion heading title and chevron.
	   */
	  align: PropTypes.oneOf(['start', 'end'])
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$a =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z"
	});

	var ChevronRight16 = /*#__PURE__*/React__default.forwardRef(function ChevronRight16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$a, children);
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Generic utility to initialize a method that will return a unique instance id
	 * for a component.
	 */
	function setupGetInstanceId() {
	  var instanceId = 0;
	  return function getInstanceId() {
	    return ++instanceId;
	  };
	}

	function _slicedToArray$1(arr, i) {
	  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest$1();
	}

	function _nonIterableRest$1() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _iterableToArrayLimit$1(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayWithHoles$1(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	var getId = setupGetInstanceId();
	var useIsomorphicLayoutEffect = canUseDOM() ? React.useLayoutEffect : React.useEffect;

	function canUseDOM() {
	  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	}

	var serverHandoffCompleted = false;
	/**
	 * Generate a unique ID with an optional prefix prepended to it
	 * @param {string} [prefix]
	 * @returns {string}
	 */

	function useId() {
	  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';

	  var _useState = React.useState(function () {
	    if (serverHandoffCompleted) {
	      return "".concat(prefix, "-").concat(getId());
	    }

	    return null;
	  }),
	      _useState2 = _slicedToArray$1(_useState, 2),
	      id = _useState2[0],
	      setId = _useState2[1];

	  useIsomorphicLayoutEffect(function () {
	    if (id === null) {
	      setId("".concat(prefix, "-").concat(getId()));
	    }
	  }, [getId]);
	  React.useEffect(function () {
	    if (serverHandoffCompleted === false) {
	      serverHandoffCompleted = true;
	    }
	  }, []);
	  return id;
	}

	function _defineProperty$9(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _slicedToArray$2(arr, i) {
	  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$2();
	}

	function _nonIterableRest$2() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _unsupportedIterableToArray$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
	}

	function _arrayLikeToArray$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _iterableToArrayLimit$2(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayWithHoles$2(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _objectWithoutProperties$8(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$8(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$8(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _extends$5() {
	  _extends$5 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$5.apply(this, arguments);
	}
	var prefix$O = settings_1.prefix;

	var defaultRenderExpando = function defaultRenderExpando(props) {
	  return /*#__PURE__*/React__default.createElement("button", _extends$5({
	    type: "button"
	  }, props));
	};

	function AccordionItem(_ref) {
	  var _cx;

	  var children = _ref.children,
	      customClassName = _ref.className,
	      _ref$open = _ref.open,
	      open = _ref$open === void 0 ? false : _ref$open,
	      onHeadingClick = _ref.onHeadingClick,
	      _ref$renderExpando = _ref.renderExpando,
	      Expando = _ref$renderExpando === void 0 ? defaultRenderExpando : _ref$renderExpando,
	      _ref$title = _ref.title,
	      title = _ref$title === void 0 ? 'title' : _ref$title,
	      rest = _objectWithoutProperties$8(_ref, ["children", "className", "iconDescription", "open", "onHeadingClick", "renderExpando", "title"]);

	  var _useState = React.useState(open),
	      _useState2 = _slicedToArray$2(_useState, 2),
	      isOpen = _useState2[0],
	      setIsOpen = _useState2[1];

	  var _useState3 = React.useState(open),
	      _useState4 = _slicedToArray$2(_useState3, 2),
	      prevIsOpen = _useState4[0],
	      setPrevIsOpen = _useState4[1];

	  var _useState5 = React.useState(''),
	      _useState6 = _slicedToArray$2(_useState5, 2),
	      animation = _useState6[0],
	      setAnimation = _useState6[1];

	  var id = useId('accordion-item');
	  var className = cx((_cx = {}, _defineProperty$9(_cx, "".concat(prefix$O, "--accordion__item"), true), _defineProperty$9(_cx, "".concat(prefix$O, "--accordion__item--active"), isOpen), _defineProperty$9(_cx, "".concat(prefix$O, "--accordion__item--").concat(animation), animation), _defineProperty$9(_cx, customClassName, !!customClassName), _cx));

	  if (open !== prevIsOpen) {
	    setIsOpen(open);
	    setPrevIsOpen(open);
	  } // When the AccordionItem heading is clicked, toggle the open state of the
	  // panel


	  function onClick(event) {
	    var nextValue = !isOpen;
	    setAnimation(isOpen ? 'collapsing' : 'expanding');
	    setIsOpen(nextValue);

	    if (onHeadingClick) {
	      // TODO: normalize signature, potentially:
	      // onHeadingClick :: (event: Event, state: { isOpen: Boolean }) => any
	      onHeadingClick({
	        isOpen: nextValue,
	        event: event
	      });
	    }
	  } // If the AccordionItem is open, and the user hits the ESC key, then close it


	  function onKeyDown(event) {
	    if (isOpen && match(event, Escape)) {
	      setIsOpen(false);
	    }
	  }

	  function handleAnimationEnd(event) {
	    if (rest.handleAnimationEnd) {
	      rest.handleAnimationEnd(event);
	    }

	    setAnimation('');
	  }

	  return /*#__PURE__*/React__default.createElement("li", _extends$5({
	    className: className
	  }, rest, {
	    onAnimationEnd: handleAnimationEnd
	  }), /*#__PURE__*/React__default.createElement(Expando, {
	    "aria-controls": id,
	    "aria-expanded": isOpen,
	    className: "".concat(prefix$O, "--accordion__heading"),
	    onClick: onClick,
	    onKeyDown: onKeyDown,
	    type: "button"
	  }, /*#__PURE__*/React__default.createElement(ChevronRight16, {
	    className: "".concat(prefix$O, "--accordion__arrow")
	  }), /*#__PURE__*/React__default.createElement("div", {
	    className: "".concat(prefix$O, "--accordion__title")
	  }, title)), /*#__PURE__*/React__default.createElement("div", {
	    id: id,
	    className: "".concat(prefix$O, "--accordion__content")
	  }, children));
	}

	AccordionItem.propTypes = {
	  /**
	   * Provide the contents of your AccordionItem
	   */
	  children: PropTypes.node,

	  /**
	   * Specify an optional className to be applied to the container node
	   */
	  className: PropTypes.string,

	  /**
	   * The accordion title.
	   */
	  title: PropTypes.node,

	  /**
	   * The callback function to render the expando button.
	   * Can be a React component class.
	   */
	  renderExpando: PropTypes.func,

	  /**
	   * The description of the expando icon.
	   */
	  iconDescription: deprecate(PropTypes.string, 'The `iconDescription` prop has been deprecated as it is no longer ' + 'required. Feel free to remove this prop from <AccordionItem>. This ' + 'prop will be removed in the next major release of ' + '`carbon-components-react`'),

	  /**
	   * `true` to open the expando.
	   */
	  open: PropTypes.bool,

	  /**
	   * The handler of the massaged `click` event.
	   */
	  onClick: PropTypes.func,

	  /**
	   * The handler of the massaged `click` event on the heading.
	   */
	  onHeadingClick: PropTypes.func
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$F = settings$1.stablePrefix;
	var prefix$P = settings_1.prefix;
	/**
	 * Footer nav group component.
	 */

	var FooterNavGroup = function FooterNavGroup(_ref) {
	  var title = _ref.title,
	      links = _ref.links;

	  if (!title || !(links === null || links === void 0 ? void 0 : links.length)) {
	    return null;
	  }

	  return React__default.createElement(AccordionItem, {
	    "data-autoid": "".concat(stablePrefix$F, "--footer-nav-group"),
	    title: title,
	    className: "".concat(prefix$P, "--footer-nav-group")
	  }, React__default.createElement("h2", {
	    className: "".concat(prefix$P, "--footer-nav-group__title")
	  }, title), React__default.createElement("ul", null, renderListItems(links)));
	};
	/**
	 * Loops through and renders a list of links for footer nav group
	 *
	 * @param {Array} links A list of links to be rendered
	 * @returns {object} JSX object
	 */


	function renderListItems(links) {
	  return links.map(function (_ref2, index) {
	    var title = _ref2.title,
	        url = _ref2.url;

	    if (!title || !url) {
	      return null;
	    }

	    return React__default.createElement("li", {
	      className: "".concat(prefix$P, "--footer-nav-group__item"),
	      key: index
	    }, React__default.createElement(Link, {
	      className: "".concat(prefix$P, "--footer-nav-group__link ").concat(prefix$P, "--footer__link"),
	      "data-autoid": "".concat(stablePrefix$F, "--footer-nav-group__link"),
	      href: url
	    }, title));
	  });
	}

	FooterNavGroup.propTypes = {
	  /**
	   * The title.
	   */
	  title: PropTypes.string,

	  /**
	   * A list of links to be rendered.
	   */
	  links: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    url: PropTypes.string
	  }))
	};
	FooterNavGroup.defaultProps = {
	  title: null,
	  links: null
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$G = settings$1.stablePrefix;
	var prefix$Q = settings_1.prefix;
	/**
	 * Footer nav component.
	 */

	var FooterNav = function FooterNav(_ref) {
	  var groups = _ref.groups;

	  if (!(groups === null || groups === void 0 ? void 0 : groups.length)) {
	    return null;
	  }

	  return React__default.createElement("nav", {
	    "data-autoid": "".concat(stablePrefix$G, "--footer-nav"),
	    className: "".concat(prefix$Q, "--footer-nav")
	  }, React__default.createElement(Accordion, {
	    className: "".concat(prefix$Q, "--footer-nav__container")
	  }, renderGroups(groups)));
	};
	/**
	 * Loops through and renders a list of nav groups for the footer nav
	 *
	 * @param {Array} groups A list of groups to be rendered
	 * @returns {object} JSX object
	 */


	function renderGroups(groups) {
	  return groups.map(function (_ref2, index) {
	    var title = _ref2.title,
	        links = _ref2.links;
	    return React__default.createElement(FooterNavGroup, {
	      title: title,
	      links: links,
	      key: index
	    });
	  });
	}

	FooterNav.propTypes = {
	  /**
	   * A list of groups to be rendered.
	   */
	  groups: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    links: PropTypes.arrayOf(PropTypes.shape({
	      title: PropTypes.string,
	      url: PropTypes.string
	    }))
	  }))
	};
	FooterNav.defaultProps = {
	  groups: null
	};

	/**
	 * Returns boolean if the isDataLayerReady flag is true
	 *
	 * @returns {*} boolean flag if data layer is ready in the digitalData object
	 * @private
	 */

	function _checkFlag() {
	  return lib.digitalData && lib.digitalData.page && lib.digitalData.page.isDataLayerReady;
	}
	/**
	 * Number of times to retry the datalayer ready loop before failing
	 *
	 * @type {number}
	 * @private
	 */


	var _timeoutRetries$1 = 50;

	var _dataLayerReadyPromise;
	/**
	 * Timeout loop to check if the digitalData object is ready.
	 * This is the only way to achieve this without jQuery, as the event trigger
	 * is fired from jQuery's custom event layer as
	 * $(document).trigger('datalayer_ready').
	 *
	 * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`, that eliminates the polling.
	 *
	 * @private
	 */


	function _datalayerReady() {
	  if (!_dataLayerReadyPromise) {
	    _dataLayerReadyPromise = new Promise(function (resolve, reject) {
	      /**
	       * Tracks the number of attempts for the datalayer ready loop
	       *
	       * @type {number}
	       * @private
	       */
	      var _attempt = 0;

	      function _dataLayerReadyImpl() {
	        if (_checkFlag()) {
	          resolve();
	        } else {
	          _attempt++;

	          if (_attempt < _timeoutRetries$1) {
	            setTimeout(function () {
	              _dataLayerReadyImpl();
	            }, 100);
	          } else {
	            reject(new Error('Timeout polling for digital data object.'));
	          }
	        }
	      }

	      _dataLayerReadyImpl();
	    });
	  }

	  return _dataLayerReadyPromise;
	}
	/**
	 * DDO API class with methods of fetching search results for
	 * ibm.com
	 */


	var DDOAPI = /*#__PURE__*/function () {
	  function DDOAPI() {
	    classCallCheck(this, DDOAPI);
	  }

	  createClass(DDOAPI, null, [{
	    key: "isReady",

	    /**
	     * Promise function that determines when the digital data object is ready
	     *
	     * @returns {Promise} Resolved data layer ready signal
	     */
	    value: function isReady() {
	      return _datalayerReady();
	    }
	    /**
	     * Gets the full digitalData (DDO) object.
	     * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`.
	     * For quick developerment purpose, what `ibm-common.js` automatically populates can be used.
	     *
	     * @returns {Promise<*>} Promise object
	     */

	  }, {
	    key: "getAll",
	    value: function () {
	      var _getAll = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.isReady().then(function () {
	                  return lib.digitalData;
	                }).catch(function () {
	                  return null;
	                });

	              case 2:
	                return _context.abrupt("return", _context.sent);

	              case 3:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getAll() {
	        return _getAll.apply(this, arguments);
	      }

	      return getAll;
	    }()
	    /**
	     * Sets the version of the library to the DDO.
	     * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`.
	     * For quick developerment purpose, what `ibm-common.js` automatically populates can be used.
	     *
	     * @returns {Promise<any>} Promise object
	     */

	  }, {
	    key: "setVersion",
	    value: function () {
	      var _setVersion = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	        return regenerator.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return this.isReady().then(function () {
	                  lib.digitalData.page.pageInfo.version = settings$1.version;
	                });

	              case 2:
	                return _context2.abrupt("return", _context2.sent);

	              case 3:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function setVersion() {
	        return _setVersion.apply(this, arguments);
	      }

	      return setVersion;
	    }()
	    /**
	     * Gets the locale for the current page based on the language set as metadata.
	     * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`.
	     * For quick developerment purpose, what `ibm-common.js` automatically populates can be used.
	     *
	     * @returns {Promise<*>} Promise object
	     */

	  }, {
	    key: "getLanguage",
	    value: function () {
	      var _getLanguage = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
	        return regenerator.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.next = 2;
	                return this.isReady().then(function () {
	                  return lib.digitalData.page.pageInfo.language;
	                });

	              case 2:
	                return _context3.abrupt("return", _context3.sent);

	              case 3:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getLanguage() {
	        return _getLanguage.apply(this, arguments);
	      }

	      return getLanguage;
	    }()
	  }]);

	  return DDOAPI;
	}();

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	/**
	 * Flag to determine if the global init has been fired
	 *
	 * @type {boolean}
	 * @private
	 */

	var _initialized = false;
	/**
	 * Initializes various global functions
	 */

	function globalInit() {
	  if (_initialized) {
	    return;
	  } else {
	    _initialized = true;
	  } // Sets the version of the library in the DDO


	  DDOAPI.setVersion().catch(function (error) {
	    console.error('Error setting the version of the library in the DDO:', error);
	  }); // analytics tracking

	  AnalyticsAPI.initAll();
	}

	function _objectWithoutPropertiesLoose$9(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _extends$6() {
	  _extends$6 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$6.apply(this, arguments);
	}

	function _assertThisInitialized$2(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var _typeof_1$1 = createCommonjsModule(function (module) {
	  function _typeof(obj) {
	    "@babel/helpers - typeof";

	    if (typeof Symbol === "function" && _typeof_1$1(Symbol.iterator) === "symbol") {
	      module.exports = _typeof = function _typeof(obj) {
	        return _typeof_1$1(obj);
	      };
	    } else {
	      module.exports = _typeof = function _typeof(obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1$1(obj);
	      };
	    }

	    return _typeof(obj);
	  }

	  module.exports = _typeof;
	});

	var reactIs_development = createCommonjsModule(function (module, exports) {

	  {
	    (function () {
	      // nor polyfill, then a plain number is used for performance.

	      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	      // (unstable) APIs that have been removed. Can we remove the symbols?

	      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	      function isValidElementType(type) {
	        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof_1$1(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	      }

	      function typeOf(object) {
	        if (_typeof_1$1(object) === 'object' && object !== null) {
	          var $$typeof = object.$$typeof;

	          switch ($$typeof) {
	            case REACT_ELEMENT_TYPE:
	              var type = object.type;

	              switch (type) {
	                case REACT_ASYNC_MODE_TYPE:
	                case REACT_CONCURRENT_MODE_TYPE:
	                case REACT_FRAGMENT_TYPE:
	                case REACT_PROFILER_TYPE:
	                case REACT_STRICT_MODE_TYPE:
	                case REACT_SUSPENSE_TYPE:
	                  return type;

	                default:
	                  var $$typeofType = type && type.$$typeof;

	                  switch ($$typeofType) {
	                    case REACT_CONTEXT_TYPE:
	                    case REACT_FORWARD_REF_TYPE:
	                    case REACT_LAZY_TYPE:
	                    case REACT_MEMO_TYPE:
	                    case REACT_PROVIDER_TYPE:
	                      return $$typeofType;

	                    default:
	                      return $$typeof;
	                  }

	              }

	            case REACT_PORTAL_TYPE:
	              return $$typeof;
	          }
	        }

	        return undefined;
	      } // AsyncMode is deprecated along with isAsyncMode


	      var AsyncMode = REACT_ASYNC_MODE_TYPE;
	      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	      var ContextConsumer = REACT_CONTEXT_TYPE;
	      var ContextProvider = REACT_PROVIDER_TYPE;
	      var Element = REACT_ELEMENT_TYPE;
	      var ForwardRef = REACT_FORWARD_REF_TYPE;
	      var Fragment = REACT_FRAGMENT_TYPE;
	      var Lazy = REACT_LAZY_TYPE;
	      var Memo = REACT_MEMO_TYPE;
	      var Portal = REACT_PORTAL_TYPE;
	      var Profiler = REACT_PROFILER_TYPE;
	      var StrictMode = REACT_STRICT_MODE_TYPE;
	      var Suspense = REACT_SUSPENSE_TYPE;
	      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	      function isAsyncMode(object) {
	        {
	          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	          }
	        }
	        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	      }

	      function isConcurrentMode(object) {
	        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	      }

	      function isContextConsumer(object) {
	        return typeOf(object) === REACT_CONTEXT_TYPE;
	      }

	      function isContextProvider(object) {
	        return typeOf(object) === REACT_PROVIDER_TYPE;
	      }

	      function isElement(object) {
	        return _typeof_1$1(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	      }

	      function isForwardRef(object) {
	        return typeOf(object) === REACT_FORWARD_REF_TYPE;
	      }

	      function isFragment(object) {
	        return typeOf(object) === REACT_FRAGMENT_TYPE;
	      }

	      function isLazy(object) {
	        return typeOf(object) === REACT_LAZY_TYPE;
	      }

	      function isMemo(object) {
	        return typeOf(object) === REACT_MEMO_TYPE;
	      }

	      function isPortal(object) {
	        return typeOf(object) === REACT_PORTAL_TYPE;
	      }

	      function isProfiler(object) {
	        return typeOf(object) === REACT_PROFILER_TYPE;
	      }

	      function isStrictMode(object) {
	        return typeOf(object) === REACT_STRICT_MODE_TYPE;
	      }

	      function isSuspense(object) {
	        return typeOf(object) === REACT_SUSPENSE_TYPE;
	      }

	      exports.AsyncMode = AsyncMode;
	      exports.ConcurrentMode = ConcurrentMode;
	      exports.ContextConsumer = ContextConsumer;
	      exports.ContextProvider = ContextProvider;
	      exports.Element = Element;
	      exports.ForwardRef = ForwardRef;
	      exports.Fragment = Fragment;
	      exports.Lazy = Lazy;
	      exports.Memo = Memo;
	      exports.Portal = Portal;
	      exports.Profiler = Profiler;
	      exports.StrictMode = StrictMode;
	      exports.Suspense = Suspense;
	      exports.isAsyncMode = isAsyncMode;
	      exports.isConcurrentMode = isConcurrentMode;
	      exports.isContextConsumer = isContextConsumer;
	      exports.isContextProvider = isContextProvider;
	      exports.isElement = isElement;
	      exports.isForwardRef = isForwardRef;
	      exports.isFragment = isFragment;
	      exports.isLazy = isLazy;
	      exports.isMemo = isMemo;
	      exports.isPortal = isPortal;
	      exports.isProfiler = isProfiler;
	      exports.isStrictMode = isStrictMode;
	      exports.isSuspense = isSuspense;
	      exports.isValidElementType = isValidElementType;
	      exports.typeOf = typeOf;
	    })();
	  }
	});

	var reactIs = createCommonjsModule(function (module) {

	  {
	    module.exports = reactIs_development;
	  }
	});
	var reactIs_1 = reactIs.isForwardRef;

	function isElement(el) {
	  return el != null && _typeof_1(el) === 'object' && el.nodeType === 1;
	}

	function canOverflow(overflow, skipOverflowHiddenElements) {
	  if (skipOverflowHiddenElements && overflow === 'hidden') {
	    return false;
	  }

	  return overflow !== 'visible' && overflow !== 'clip';
	}

	function getFrameElement(el) {
	  if (!el.ownerDocument || !el.ownerDocument.defaultView) {
	    return null;
	  }

	  try {
	    return el.ownerDocument.defaultView.frameElement;
	  } catch (e) {
	    return null;
	  }
	}

	function isHiddenByFrame(el) {
	  var frame = getFrameElement(el);

	  if (!frame) {
	    return false;
	  }

	  return frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth;
	}

	function isScrollable(el, skipOverflowHiddenElements) {
	  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {
	    var style = getComputedStyle(el, null);
	    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements) || isHiddenByFrame(el);
	  }

	  return false;
	}

	function alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {
	  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {
	    return 0;
	  }

	  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {
	    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;
	  }

	  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {
	    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;
	  }

	  return 0;
	}

	var computeScrollIntoView = (function (target, options) {
	  var scrollMode = options.scrollMode,
	      block = options.block,
	      inline = options.inline,
	      boundary = options.boundary,
	      skipOverflowHiddenElements = options.skipOverflowHiddenElements;
	  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {
	    return node !== boundary;
	  };

	  if (!isElement(target)) {
	    throw new TypeError('Invalid target');
	  }

	  var scrollingElement = document.scrollingElement || document.documentElement;
	  var frames = [];
	  var cursor = target;

	  while (isElement(cursor) && checkBoundary(cursor)) {
	    cursor = cursor.parentNode;

	    if (cursor === scrollingElement) {
	      frames.push(cursor);
	      break;
	    }

	    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {
	      continue;
	    }

	    if (isScrollable(cursor, skipOverflowHiddenElements)) {
	      frames.push(cursor);
	    }
	  }

	  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;
	  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;
	  var viewportX = window.scrollX || pageXOffset;
	  var viewportY = window.scrollY || pageYOffset;

	  var _target$getBoundingCl = target.getBoundingClientRect(),
	      targetHeight = _target$getBoundingCl.height,
	      targetWidth = _target$getBoundingCl.width,
	      targetTop = _target$getBoundingCl.top,
	      targetRight = _target$getBoundingCl.right,
	      targetBottom = _target$getBoundingCl.bottom,
	      targetLeft = _target$getBoundingCl.left;

	  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;
	  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;
	  var computations = [];

	  for (var index = 0; index < frames.length; index++) {
	    var frame = frames[index];

	    var _frame$getBoundingCli = frame.getBoundingClientRect(),
	        height = _frame$getBoundingCli.height,
	        width = _frame$getBoundingCli.width,
	        top = _frame$getBoundingCli.top,
	        right = _frame$getBoundingCli.right,
	        bottom = _frame$getBoundingCli.bottom,
	        left = _frame$getBoundingCli.left;

	    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= top && targetBottom <= bottom && targetLeft >= left && targetRight <= right) {
	      return computations;
	    }

	    var frameStyle = getComputedStyle(frame);
	    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);
	    var borderTop = parseInt(frameStyle.borderTopWidth, 10);
	    var borderRight = parseInt(frameStyle.borderRightWidth, 10);
	    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);
	    var blockScroll = 0;
	    var inlineScroll = 0;
	    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;
	    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;

	    if (scrollingElement === frame) {
	      if (block === 'start') {
	        blockScroll = targetBlock;
	      } else if (block === 'end') {
	        blockScroll = targetBlock - viewportHeight;
	      } else if (block === 'nearest') {
	        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);
	      } else {
	        blockScroll = targetBlock - viewportHeight / 2;
	      }

	      if (inline === 'start') {
	        inlineScroll = targetInline;
	      } else if (inline === 'center') {
	        inlineScroll = targetInline - viewportWidth / 2;
	      } else if (inline === 'end') {
	        inlineScroll = targetInline - viewportWidth;
	      } else {
	        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);
	      }

	      blockScroll = Math.max(0, blockScroll + viewportY);
	      inlineScroll = Math.max(0, inlineScroll + viewportX);
	    } else {
	      if (block === 'start') {
	        blockScroll = targetBlock - top - borderTop;
	      } else if (block === 'end') {
	        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;
	      } else if (block === 'nearest') {
	        blockScroll = alignNearest(top, bottom, height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);
	      } else {
	        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2;
	      }

	      if (inline === 'start') {
	        inlineScroll = targetInline - left - borderLeft;
	      } else if (inline === 'center') {
	        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2;
	      } else if (inline === 'end') {
	        inlineScroll = targetInline - right + borderRight + scrollbarWidth;
	      } else {
	        inlineScroll = alignNearest(left, right, width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);
	      }

	      var scrollLeft = frame.scrollLeft,
	          scrollTop = frame.scrollTop;
	      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - height + scrollbarHeight));
	      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - width + scrollbarWidth));
	      targetBlock += scrollTop - blockScroll;
	      targetInline += scrollLeft - inlineScroll;
	    }

	    computations.push({
	      el: frame,
	      top: blockScroll,
	      left: inlineScroll
	    });
	  }

	  return computations;
	});

	var idCounter = 0;
	/**
	 * Accepts a parameter and returns it if it's a function
	 * or a noop function if it's not. This allows us to
	 * accept a callback, but not worry about it if it's not
	 * passed.
	 * @param {Function} cb the callback
	 * @return {Function} a function
	 */

	function cbToCb(cb) {
	  return typeof cb === 'function' ? cb : noop;
	}

	function noop() {}
	/**
	 * Scroll node into view if necessary
	 * @param {HTMLElement} node the element that should scroll into view
	 * @param {HTMLElement} menuNode the menu element of the component
	 */


	function scrollIntoView(node, menuNode) {
	  if (node === null) {
	    return;
	  }

	  var actions = computeScrollIntoView(node, {
	    boundary: menuNode,
	    block: 'nearest',
	    scrollMode: 'if-needed'
	  });
	  actions.forEach(function (_ref) {
	    var el = _ref.el,
	        top = _ref.top,
	        left = _ref.left;
	    el.scrollTop = top;
	    el.scrollLeft = left;
	  });
	}
	/**
	 * @param {HTMLElement} parent the parent node
	 * @param {HTMLElement} child the child node
	 * @return {Boolean} whether the parent is the child or the child is in the parent
	 */


	function isOrContainsNode(parent, child) {
	  return parent === child || parent.contains && parent.contains(child);
	}
	/**
	 * Simple debounce implementation. Will call the given
	 * function once after the time given has passed since
	 * it was last called.
	 * @param {Function} fn the function to call after the time
	 * @param {Number} time the time to wait
	 * @return {Function} the debounced function
	 */


	function debounce(fn, time) {
	  var timeoutId;

	  function cancel() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	  }

	  function wrapper() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    cancel();
	    timeoutId = setTimeout(function () {
	      timeoutId = null;
	      fn.apply(void 0, args);
	    }, time);
	  }

	  wrapper.cancel = cancel;
	  return wrapper;
	}
	/**
	 * This is intended to be used to compose event handlers.
	 * They are executed in order until one of them sets
	 * `event.preventDownshiftDefault = true`.
	 * @param {...Function} fns the event handler functions
	 * @return {Function} the event handler to add to an element
	 */


	function callAllEventHandlers() {
	  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    fns[_key2] = arguments[_key2];
	  }

	  return function (event) {
	    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	      args[_key3 - 1] = arguments[_key3];
	    }

	    return fns.some(function (fn) {
	      if (fn) {
	        fn.apply(void 0, [event].concat(args));
	      }

	      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;
	    });
	  };
	}

	function handleRefs() {
	  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    refs[_key4] = arguments[_key4];
	  }

	  return function (node) {
	    refs.forEach(function (ref) {
	      if (typeof ref === 'function') {
	        ref(node);
	      } else if (ref) {
	        ref.current = node;
	      }
	    });
	  };
	}
	/**
	 * This generates a unique ID for an instance of Downshift
	 * @return {String} the unique ID
	 */


	function generateId() {
	  return String(idCounter++);
	}
	/**
	 * Default implementation for status message. Only added when menu is open.
	 * Will specift if there are results in the list, and if so, how many,
	 * and what keys are relevant.
	 *
	 * @param {Object} param the downshift state and other relevant properties
	 * @return {String} the a11y status message
	 */


	function getA11yStatusMessage(_ref2) {
	  var isOpen = _ref2.isOpen,
	      resultCount = _ref2.resultCount,
	      previousResultCount = _ref2.previousResultCount;

	  if (!isOpen) {
	    return '';
	  }

	  if (!resultCount) {
	    return 'No results are available.';
	  }

	  if (resultCount !== previousResultCount) {
	    return resultCount + " result" + (resultCount === 1 ? ' is' : 's are') + " available, use up and down arrow keys to navigate. Press Enter key to select.";
	  }

	  return '';
	}
	/**
	 * Takes an argument and if it's an array, returns the first item in the array
	 * otherwise returns the argument
	 * @param {*} arg the maybe-array
	 * @param {*} defaultValue the value if arg is falsey not defined
	 * @return {*} the arg or it's first item
	 */


	function unwrapArray(arg, defaultValue) {
	  arg = Array.isArray(arg) ?
	  /* istanbul ignore next (preact) */
	  arg[0] : arg;

	  if (!arg && defaultValue) {
	    return defaultValue;
	  } else {
	    return arg;
	  }
	}
	/**
	 * @param {Object} element (P)react element
	 * @return {Boolean} whether it's a DOM element
	 */


	function isDOMElement(element) {
	  // then we assume this is react
	  return typeof element.type === 'string';
	}
	/**
	 * @param {Object} element (P)react element
	 * @return {Object} the props
	 */


	function getElementProps(element) {
	  return element.props;
	}
	/**
	 * Throws a helpful error message for required properties. Useful
	 * to be used as a default in destructuring or object params.
	 * @param {String} fnName the function name
	 * @param {String} propName the prop name
	 */


	function requiredProp(fnName, propName) {
	  // eslint-disable-next-line no-console
	  console.error("The property \"" + propName + "\" is required in \"" + fnName + "\"");
	}

	var stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];
	/**
	 * @param {Object} state the state object
	 * @return {Object} state that is relevant to downshift
	 */

	function pickState(state) {
	  if (state === void 0) {
	    state = {};
	  }

	  var result = {};
	  stateKeys.forEach(function (k) {
	    if (state.hasOwnProperty(k)) {
	      result[k] = state[k];
	    }
	  });
	  return result;
	}
	/**
	 * This will perform a shallow merge of the given state object
	 * with the state coming from props
	 * (for the controlled component scenario)
	 * This is used in state updater functions so they're referencing
	 * the right state regardless of where it comes from.
	 *
	 * @param {Object} state The state of the component/hook.
	 * @param {Object} props The props that may contain controlled values.
	 * @returns {Object} The merged controlled state.
	 */


	function getState(state, props) {
	  return Object.keys(state).reduce(function (prevState, key) {
	    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];
	    return prevState;
	  }, {});
	}
	/**
	 * This determines whether a prop is a "controlled prop" meaning it is
	 * state which is controlled by the outside of this component rather
	 * than within this component.
	 *
	 * @param {Object} props The props that may contain controlled values.
	 * @param {String} key the key to check
	 * @return {Boolean} whether it is a controlled controlled prop
	 */


	function isControlledProp(props, key) {
	  return props[key] !== undefined;
	}
	/**
	 * Normalizes the 'key' property of a KeyboardEvent in IE/Edge
	 * @param {Object} event a keyboardEvent object
	 * @return {String} keyboard key
	 */


	function normalizeArrowKey(event) {
	  var key = event.key,
	      keyCode = event.keyCode;
	  /* istanbul ignore next (ie) */

	  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {
	    return "Arrow" + key;
	  }

	  return key;
	}
	/**
	 * Simple check if the value passed is object literal
	 * @param {*} obj any things
	 * @return {Boolean} whether it's object literal
	 */


	function isPlainObject(obj) {
	  return Object.prototype.toString.call(obj) === '[object Object]';
	}
	/**
	 * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,
	 * it will wrap to either 0 or itemCount - 1.
	 *
	 * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.
	 * @param {number} baseIndex The initial position to move from.
	 * @param {number} itemCount The total number of items.
	 * @param {Function} getItemNodeFromIndex Used to check if item is disabled.
	 * @param {boolean} circular Specify if navigation is circular. Default is true.
	 * @returns {number} The new index after the move.
	 */


	function getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
	  if (circular === void 0) {
	    circular = true;
	  }

	  var itemsLastIndex = itemCount - 1;

	  if (typeof baseIndex !== 'number' || baseIndex < 0 || baseIndex >= itemCount) {
	    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;
	  }

	  var newIndex = baseIndex + moveAmount;

	  if (newIndex < 0) {
	    newIndex = circular ? itemsLastIndex : 0;
	  } else if (newIndex > itemsLastIndex) {
	    newIndex = circular ? 0 : itemsLastIndex;
	  }

	  var nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);
	  return nonDisabledNewIndex === -1 ? baseIndex : nonDisabledNewIndex;
	}
	/**
	 * Returns the next index in the list of an item that is not disabled.
	 *
	 * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.
	 * @param {number} baseIndex The initial position to move from.
	 * @param {number} itemCount The total number of items.
	 * @param {Function} getItemNodeFromIndex Used to check if item is disabled.
	 * @param {boolean} circular Specify if navigation is circular. Default is true.
	 * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.
	 */


	function getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
	  var currentElementNode = getItemNodeFromIndex(baseIndex);

	  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {
	    return baseIndex;
	  }

	  if (moveAmount > 0) {
	    for (var index = baseIndex + 1; index < itemCount; index++) {
	      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {
	        return index;
	      }
	    }
	  } else {
	    for (var _index = baseIndex - 1; _index >= 0; _index--) {
	      if (!getItemNodeFromIndex(_index).hasAttribute('disabled')) {
	        return _index;
	      }
	    }
	  }

	  if (circular) {
	    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);
	  }

	  return -1;
	}
	/**
	 * Checks if event target is within the downshift elements.
	 *
	 * @param {EventTarget} target Target to check.
	 * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).
	 * @param {Document} document The document.
	 * @param {boolean} checkActiveElement Whether to also check activeElement.
	 *
	 * @returns {boolean} Whether or not the target is within downshift elements.
	 */


	function targetWithinDownshift(target, downshiftElements, document, checkActiveElement) {
	  if (checkActiveElement === void 0) {
	    checkActiveElement = true;
	  }

	  return downshiftElements.some(function (contextNode) {
	    return contextNode && (isOrContainsNode(contextNode, target) || checkActiveElement && isOrContainsNode(contextNode, document.activeElement));
	  });
	}

	var cleanupStatus = debounce(function () {
	  getStatusDiv().textContent = '';
	}, 500);
	/**
	 * @param {String} status the status message
	 * @param {Object} documentProp document passed by the user.
	 */

	function setStatus(status, documentProp) {
	  var div = getStatusDiv(documentProp);

	  if (!status) {
	    return;
	  }

	  div.textContent = status;
	  cleanupStatus();
	}
	/**
	 * Get the status node or create it if it does not already exist.
	 * @param {Object} documentProp document passed by the user.
	 * @return {HTMLElement} the status node.
	 */


	function getStatusDiv(documentProp) {
	  if (documentProp === void 0) {
	    documentProp = document;
	  }

	  var statusDiv = documentProp.getElementById('a11y-status-message');

	  if (statusDiv) {
	    return statusDiv;
	  }

	  statusDiv = documentProp.createElement('div');
	  statusDiv.setAttribute('id', 'a11y-status-message');
	  statusDiv.setAttribute('role', 'status');
	  statusDiv.setAttribute('aria-live', 'polite');
	  statusDiv.setAttribute('aria-relevant', 'additions text');
	  Object.assign(statusDiv.style, {
	    border: '0',
	    clip: 'rect(0 0 0 0)',
	    height: '1px',
	    margin: '-1px',
	    overflow: 'hidden',
	    padding: '0',
	    position: 'absolute',
	    width: '1px'
	  });
	  documentProp.body.appendChild(statusDiv);
	  return statusDiv;
	}

	var unknown =  '__autocomplete_unknown__' ;
	var mouseUp =  '__autocomplete_mouseup__' ;
	var itemMouseEnter =  '__autocomplete_item_mouseenter__' ;
	var keyDownArrowUp =  '__autocomplete_keydown_arrow_up__' ;
	var keyDownArrowDown =  '__autocomplete_keydown_arrow_down__' ;
	var keyDownEscape =  '__autocomplete_keydown_escape__' ;
	var keyDownEnter =  '__autocomplete_keydown_enter__' ;
	var keyDownHome =  '__autocomplete_keydown_home__' ;
	var keyDownEnd =  '__autocomplete_keydown_end__' ;
	var clickItem =  '__autocomplete_click_item__' ;
	var blurInput =  '__autocomplete_blur_input__' ;
	var changeInput =  '__autocomplete_change_input__' ;
	var keyDownSpaceButton =  '__autocomplete_keydown_space_button__' ;
	var clickButton =  '__autocomplete_click_button__' ;
	var blurButton =  '__autocomplete_blur_button__' ;
	var controlledPropUpdatedSelectedItem =  '__autocomplete_controlled_prop_updated_selected_item__' ;
	var touchEnd =  '__autocomplete_touchend__' ;
	var stateChangeTypes = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  unknown: unknown,
	  mouseUp: mouseUp,
	  itemMouseEnter: itemMouseEnter,
	  keyDownArrowUp: keyDownArrowUp,
	  keyDownArrowDown: keyDownArrowDown,
	  keyDownEscape: keyDownEscape,
	  keyDownEnter: keyDownEnter,
	  keyDownHome: keyDownHome,
	  keyDownEnd: keyDownEnd,
	  clickItem: clickItem,
	  blurInput: blurInput,
	  changeInput: changeInput,
	  keyDownSpaceButton: keyDownSpaceButton,
	  clickButton: clickButton,
	  blurButton: blurButton,
	  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,
	  touchEnd: touchEnd
	});

	var Downshift = /*#__PURE__*/function () {
	  var Downshift = /*#__PURE__*/function (_Component) {
	    _inheritsLoose(Downshift, _Component);

	    function Downshift(_props) {
	      var _this = _Component.call(this, _props) || this;

	      _this.id = _this.props.id || "downshift-" + generateId();
	      _this.menuId = _this.props.menuId || _this.id + "-menu";
	      _this.labelId = _this.props.labelId || _this.id + "-label";
	      _this.inputId = _this.props.inputId || _this.id + "-input";

	      _this.getItemId = _this.props.getItemId || function (index) {
	        return _this.id + "-item-" + index;
	      };

	      _this.input = null;
	      _this.items = [];
	      _this.itemCount = null;
	      _this.previousResultCount = 0;
	      _this.timeoutIds = [];

	      _this.internalSetTimeout = function (fn, time) {
	        var id = setTimeout(function () {
	          _this.timeoutIds = _this.timeoutIds.filter(function (i) {
	            return i !== id;
	          });
	          fn();
	        }, time);

	        _this.timeoutIds.push(id);
	      };

	      _this.setItemCount = function (count) {
	        _this.itemCount = count;
	      };

	      _this.unsetItemCount = function () {
	        _this.itemCount = null;
	      };

	      _this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {
	        if (highlightedIndex === void 0) {
	          highlightedIndex = _this.props.defaultHighlightedIndex;
	        }

	        if (otherStateToSet === void 0) {
	          otherStateToSet = {};
	        }

	        otherStateToSet = pickState(otherStateToSet);

	        _this.internalSetState(_extends$6({
	          highlightedIndex: highlightedIndex
	        }, otherStateToSet));
	      };

	      _this.clearSelection = function (cb) {
	        _this.internalSetState({
	          selectedItem: null,
	          inputValue: '',
	          highlightedIndex: _this.props.defaultHighlightedIndex,
	          isOpen: _this.props.defaultIsOpen
	        }, cb);
	      };

	      _this.selectItem = function (item, otherStateToSet, cb) {
	        otherStateToSet = pickState(otherStateToSet);

	        _this.internalSetState(_extends$6({
	          isOpen: _this.props.defaultIsOpen,
	          highlightedIndex: _this.props.defaultHighlightedIndex,
	          selectedItem: item,
	          inputValue: _this.props.itemToString(item)
	        }, otherStateToSet), cb);
	      };

	      _this.selectItemAtIndex = function (itemIndex, otherStateToSet, cb) {
	        var item = _this.items[itemIndex];

	        if (item == null) {
	          return;
	        }

	        _this.selectItem(item, otherStateToSet, cb);
	      };

	      _this.selectHighlightedItem = function (otherStateToSet, cb) {
	        return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);
	      };

	      _this.internalSetState = function (stateToSet, cb) {
	        var isItemSelected, onChangeArg;
	        var onStateChangeArg = {};
	        var isStateToSetFunction = typeof stateToSet === 'function'; // we want to call `onInputValueChange` before the `setState` call
	        // so someone controlling the `inputValue` state gets notified of
	        // the input change as soon as possible. This avoids issues with
	        // preserving the cursor position.
	        // See https://github.com/downshift-js/downshift/issues/217 for more info.

	        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {
	          _this.props.onInputValueChange(stateToSet.inputValue, _extends$6({}, _this.getStateAndHelpers(), {}, stateToSet));
	        }

	        return _this.setState(function (state) {
	          state = _this.getState(state);
	          var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet; // Your own function that could modify the state that will be set.

	          newStateToSet = _this.props.stateReducer(state, newStateToSet); // checks if an item is selected, regardless of if it's different from
	          // what was selected before
	          // used to determine if onSelect and onChange callbacks should be called

	          isItemSelected = newStateToSet.hasOwnProperty('selectedItem'); // this keeps track of the object we want to call with setState

	          var nextState = {}; // this is just used to tell whether the state changed
	          // and we're trying to update that state. OR if the selection has changed and we're
	          // trying to update the selection

	          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {
	            onChangeArg = newStateToSet.selectedItem;
	          }

	          newStateToSet.type = newStateToSet.type || unknown;
	          Object.keys(newStateToSet).forEach(function (key) {
	            // onStateChangeArg should only have the state that is
	            // actually changing
	            if (state[key] !== newStateToSet[key]) {
	              onStateChangeArg[key] = newStateToSet[key];
	            } // the type is useful for the onStateChangeArg
	            // but we don't actually want to set it in internal state.
	            // this is an undocumented feature for now... Not all internalSetState
	            // calls support it and I'm not certain we want them to yet.
	            // But it enables users controlling the isOpen state to know when
	            // the isOpen state changes due to mouseup events which is quite handy.


	            if (key === 'type') {
	              return;
	            }

	            if (!isControlledProp(_this.props, key)) {
	              nextState[key] = newStateToSet[key];
	            }
	          }); // if stateToSet is a function, then we weren't able to call onInputValueChange
	          // earlier, so we'll call it now that we know what the inputValue state will be.

	          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {
	            _this.props.onInputValueChange(newStateToSet.inputValue, _extends$6({}, _this.getStateAndHelpers(), {}, newStateToSet));
	          }

	          return nextState;
	        }, function () {
	          // call the provided callback if it's a function
	          cbToCb(cb)(); // only call the onStateChange and onChange callbacks if
	          // we have relevant information to pass them.

	          var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;

	          if (hasMoreStateThanType) {
	            _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());
	          }

	          if (isItemSelected) {
	            _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());
	          }

	          if (onChangeArg !== undefined) {
	            _this.props.onChange(onChangeArg, _this.getStateAndHelpers());
	          } // this is currently undocumented and therefore subject to change
	          // We'll try to not break it, but just be warned.


	          _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());
	        });
	      };

	      _this.rootRef = function (node) {
	        return _this._rootNode = node;
	      };

	      _this.getRootProps = function (_temp, _temp2) {
	        var _extends2;

	        var _ref = _temp === void 0 ? {} : _temp,
	            _ref$refKey = _ref.refKey,
	            refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,
	            ref = _ref.ref,
	            rest = _objectWithoutPropertiesLoose$9(_ref, ["refKey", "ref"]);

	        var _ref2 = _temp2 === void 0 ? {} : _temp2,
	            _ref2$suppressRefErro = _ref2.suppressRefError,
	            suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro; // this is used in the render to know whether the user has called getRootProps.
	        // It uses that to know whether to apply the props automatically


	        _this.getRootProps.called = true;
	        _this.getRootProps.refKey = refKey;
	        _this.getRootProps.suppressRefError = suppressRefError;

	        var _this$getState = _this.getState(),
	            isOpen = _this$getState.isOpen;

	        return _extends$6((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = 'combobox', _extends2['aria-expanded'] = isOpen, _extends2['aria-haspopup'] = 'listbox', _extends2['aria-owns'] = isOpen ? _this.menuId : null, _extends2['aria-labelledby'] = _this.labelId, _extends2), rest);
	      };

	      _this.keyDownHandlers = {
	        ArrowDown: function ArrowDown(event) {
	          var _this2 = this;

	          event.preventDefault();

	          if (this.getState().isOpen) {
	            var amount = event.shiftKey ? 5 : 1;
	            this.moveHighlightedIndex(amount, {
	              type: keyDownArrowDown
	            });
	          } else {
	            this.internalSetState({
	              isOpen: true,
	              type: keyDownArrowDown
	            }, function () {
	              var itemCount = _this2.getItemCount();

	              if (itemCount > 0) {
	                var _this2$getState = _this2.getState(),
	                    highlightedIndex = _this2$getState.highlightedIndex;

	                var nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, function (index) {
	                  return _this2.getItemNodeFromIndex(index);
	                });

	                _this2.setHighlightedIndex(nextHighlightedIndex, {
	                  type: keyDownArrowDown
	                });
	              }
	            });
	          }
	        },
	        ArrowUp: function ArrowUp(event) {
	          var _this3 = this;

	          event.preventDefault();

	          if (this.getState().isOpen) {
	            var amount = event.shiftKey ? -5 : -1;
	            this.moveHighlightedIndex(amount, {
	              type: keyDownArrowUp
	            });
	          } else {
	            this.internalSetState({
	              isOpen: true,
	              type: keyDownArrowUp
	            }, function () {
	              var itemCount = _this3.getItemCount();

	              if (itemCount > 0) {
	                var _this3$getState = _this3.getState(),
	                    highlightedIndex = _this3$getState.highlightedIndex;

	                var nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, function (index) {
	                  return _this3.getItemNodeFromIndex(index);
	                });

	                _this3.setHighlightedIndex(nextHighlightedIndex, {
	                  type: keyDownArrowUp
	                });
	              }
	            });
	          }
	        },
	        Enter: function Enter(event) {
	          if (event.which === 229) {
	            return;
	          }

	          var _this$getState2 = this.getState(),
	              isOpen = _this$getState2.isOpen,
	              highlightedIndex = _this$getState2.highlightedIndex;

	          if (isOpen && highlightedIndex != null) {
	            event.preventDefault();
	            var item = this.items[highlightedIndex];
	            var itemNode = this.getItemNodeFromIndex(highlightedIndex);

	            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {
	              return;
	            }

	            this.selectHighlightedItem({
	              type: keyDownEnter
	            });
	          }
	        },
	        Escape: function Escape(event) {
	          event.preventDefault();
	          this.reset({
	            type: keyDownEscape,
	            selectedItem: null,
	            inputValue: ''
	          });
	        }
	      };
	      _this.buttonKeyDownHandlers = _extends$6({}, _this.keyDownHandlers, {
	        ' ': function _(event) {
	          event.preventDefault();
	          this.toggleMenu({
	            type: keyDownSpaceButton
	          });
	        }
	      });
	      _this.inputKeyDownHandlers = _extends$6({}, _this.keyDownHandlers, {
	        Home: function Home(event) {
	          var _this4 = this;

	          event.preventDefault();
	          var itemCount = this.getItemCount();

	          var _this$getState3 = this.getState(),
	              isOpen = _this$getState3.isOpen;

	          if (itemCount <= 0 || !isOpen) {
	            return;
	          } // get next non-disabled starting downwards from 0 if that's disabled.


	          var newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, function (index) {
	            return _this4.getItemNodeFromIndex(index);
	          }, false);
	          this.setHighlightedIndex(newHighlightedIndex, {
	            type: keyDownHome
	          });
	        },
	        End: function End(event) {
	          var _this5 = this;

	          event.preventDefault();
	          var itemCount = this.getItemCount();

	          var _this$getState4 = this.getState(),
	              isOpen = _this$getState4.isOpen;

	          if (itemCount <= 0 || !isOpen) {
	            return;
	          } // get next non-disabled starting upwards from last index if that's disabled.


	          var newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, function (index) {
	            return _this5.getItemNodeFromIndex(index);
	          }, false);
	          this.setHighlightedIndex(newHighlightedIndex, {
	            type: keyDownEnd
	          });
	        }
	      });

	      _this.getToggleButtonProps = function (_temp3) {
	        var _ref3 = _temp3 === void 0 ? {} : _temp3,
	            onClick = _ref3.onClick,
	            onKeyDown = _ref3.onKeyDown,
	            onKeyUp = _ref3.onKeyUp,
	            onBlur = _ref3.onBlur,
	            rest = _objectWithoutPropertiesLoose$9(_ref3, ["onClick", "onPress", "onKeyDown", "onKeyUp", "onBlur"]);

	        var _this$getState5 = _this.getState(),
	            isOpen = _this$getState5.isOpen;

	        var enabledEventHandlers = {
	          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),
	          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),
	          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),
	          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)
	        };
	        var eventHandlers = rest.disabled ? {} : enabledEventHandlers;
	        return _extends$6({
	          type: 'button',
	          role: 'button',
	          'aria-label': isOpen ? 'close menu' : 'open menu',
	          'aria-haspopup': true,
	          'data-toggle': true
	        }, eventHandlers, {}, rest);
	      };

	      _this.buttonHandleKeyUp = function (event) {
	        // Prevent click event from emitting in Firefox
	        event.preventDefault();
	      };

	      _this.buttonHandleKeyDown = function (event) {
	        var key = normalizeArrowKey(event);

	        if (_this.buttonKeyDownHandlers[key]) {
	          _this.buttonKeyDownHandlers[key].call(_assertThisInitialized$2(_this), event);
	        }
	      };

	      _this.buttonHandleClick = function (event) {
	        event.preventDefault(); // handle odd case for Safari and Firefox which
	        // don't give the button the focus properly.

	        /* istanbul ignore if (can't reasonably test this) */

	        if (_this.props.environment.document.activeElement === _this.props.environment.document.body) {
	          event.target.focus();
	        } // to simplify testing components that use downshift, we'll not wrap this in a setTimeout
	        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated
	        // when building for production and should therefore have no impact on production code.


	        {
	          // Ensure that toggle of menu occurs after the potential blur event in iOS
	          _this.internalSetTimeout(function () {
	            return _this.toggleMenu({
	              type: clickButton
	            });
	          });
	        }
	      };

	      _this.buttonHandleBlur = function (event) {
	        var blurTarget = event.target; // Save blur target for comparison with activeElement later
	        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element

	        _this.internalSetTimeout(function () {
	          if (!_this.isMouseDown && (_this.props.environment.document.activeElement == null || _this.props.environment.document.activeElement.id !== _this.inputId) && _this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)
	          ) {
	              _this.reset({
	                type: blurButton
	              });
	            }
	        });
	      };

	      _this.getLabelProps = function (props) {
	        return _extends$6({
	          htmlFor: _this.inputId,
	          id: _this.labelId
	        }, props);
	      };

	      _this.getInputProps = function (_temp4) {
	        var _ref4 = _temp4 === void 0 ? {} : _temp4,
	            onKeyDown = _ref4.onKeyDown,
	            onBlur = _ref4.onBlur,
	            onChange = _ref4.onChange,
	            onInput = _ref4.onInput,
	            rest = _objectWithoutPropertiesLoose$9(_ref4, ["onKeyDown", "onBlur", "onChange", "onInput", "onChangeText"]);

	        var onChangeKey;
	        var eventHandlers = {};
	        /* istanbul ignore next (preact) */

	        onChangeKey = 'onChange';

	        var _this$getState6 = _this.getState(),
	            inputValue = _this$getState6.inputValue,
	            isOpen = _this$getState6.isOpen,
	            highlightedIndex = _this$getState6.highlightedIndex;

	        if (!rest.disabled) {
	          var _eventHandlers;

	          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);
	        }
	        /* istanbul ignore if (react-native) */


	        return _extends$6({
	          'aria-autocomplete': 'list',
	          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,
	          'aria-controls': isOpen ? _this.menuId : null,
	          'aria-labelledby': _this.labelId,
	          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion
	          // revert back since autocomplete="nope" is ignored on latest Chrome and Opera
	          autoComplete: 'off',
	          value: inputValue,
	          id: _this.inputId
	        }, eventHandlers, {}, rest);
	      };

	      _this.inputHandleKeyDown = function (event) {
	        var key = normalizeArrowKey(event);

	        if (key && _this.inputKeyDownHandlers[key]) {
	          _this.inputKeyDownHandlers[key].call(_assertThisInitialized$2(_this), event);
	        }
	      };

	      _this.inputHandleChange = function (event) {
	        _this.internalSetState({
	          type: changeInput,
	          isOpen: true,
	          inputValue: event.target.value,
	          highlightedIndex: _this.props.defaultHighlightedIndex
	        });
	      };

	      _this.inputHandleBlur = function () {
	        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element
	        _this.internalSetTimeout(function () {
	          var downshiftButtonIsActive = _this.props.environment.document && !!_this.props.environment.document.activeElement && !!_this.props.environment.document.activeElement.dataset && _this.props.environment.document.activeElement.dataset.toggle && _this._rootNode && _this._rootNode.contains(_this.props.environment.document.activeElement);

	          if (!_this.isMouseDown && !downshiftButtonIsActive) {
	            _this.reset({
	              type: blurInput
	            });
	          }
	        });
	      };

	      _this.menuRef = function (node) {
	        _this._menuNode = node;
	      };

	      _this.getMenuProps = function (_temp5, _temp6) {
	        var _extends3;

	        var _ref5 = _temp5 === void 0 ? {} : _temp5,
	            _ref5$refKey = _ref5.refKey,
	            refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,
	            ref = _ref5.ref,
	            props = _objectWithoutPropertiesLoose$9(_ref5, ["refKey", "ref"]);

	        var _ref6 = _temp6 === void 0 ? {} : _temp6,
	            _ref6$suppressRefErro = _ref6.suppressRefError,
	            suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;

	        _this.getMenuProps.called = true;
	        _this.getMenuProps.refKey = refKey;
	        _this.getMenuProps.suppressRefError = suppressRefError;
	        return _extends$6((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = 'listbox', _extends3['aria-labelledby'] = props && props['aria-label'] ? null : _this.labelId, _extends3.id = _this.menuId, _extends3), props);
	      };

	      _this.getItemProps = function (_temp7) {
	        var _enabledEventHandlers;

	        var _ref7 = _temp7 === void 0 ? {} : _temp7,
	            onMouseMove = _ref7.onMouseMove,
	            onMouseDown = _ref7.onMouseDown,
	            onClick = _ref7.onClick,
	            index = _ref7.index,
	            _ref7$item = _ref7.item,
	            item = _ref7$item === void 0 ?  requiredProp('getItemProps', 'item') : _ref7$item,
	            rest = _objectWithoutPropertiesLoose$9(_ref7, ["onMouseMove", "onMouseDown", "onClick", "onPress", "index", "item"]);

	        if (index === undefined) {
	          _this.items.push(item);

	          index = _this.items.indexOf(item);
	        } else {
	          _this.items[index] = item;
	        }

	        var onSelectKey = 'onClick';
	        var customClickHandler = onClick;
	        var enabledEventHandlers = (_enabledEventHandlers = {
	          // onMouseMove is used over onMouseEnter here. onMouseMove
	          // is only triggered on actual mouse movement while onMouseEnter
	          // can fire on DOM changes, interrupting keyboard navigation
	          onMouseMove: callAllEventHandlers(onMouseMove, function () {
	            if (index === _this.getState().highlightedIndex) {
	              return;
	            }

	            _this.setHighlightedIndex(index, {
	              type: itemMouseEnter
	            }); // We never want to manually scroll when changing state based
	            // on `onMouseMove` because we will be moving the element out
	            // from under the user which is currently scrolling/moving the
	            // cursor


	            _this.avoidScrolling = true;

	            _this.internalSetTimeout(function () {
	              return _this.avoidScrolling = false;
	            }, 250);
	          }),
	          onMouseDown: callAllEventHandlers(onMouseDown, function (event) {
	            // This prevents the activeElement from being changed
	            // to the item so it can remain with the current activeElement
	            // which is a more common use case.
	            event.preventDefault();
	          })
	        }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function () {
	          _this.selectItemAtIndex(index, {
	            type: clickItem
	          });
	        }), _enabledEventHandlers); // Passing down the onMouseDown handler to prevent redirect
	        // of the activeElement if clicking on disabled items

	        var eventHandlers = rest.disabled ? {
	          onMouseDown: enabledEventHandlers.onMouseDown
	        } : enabledEventHandlers;
	        return _extends$6({
	          id: _this.getItemId(index),
	          role: 'option',
	          'aria-selected': _this.getState().highlightedIndex === index
	        }, eventHandlers, {}, rest);
	      };

	      _this.clearItems = function () {
	        _this.items = [];
	      };

	      _this.reset = function (otherStateToSet, cb) {
	        if (otherStateToSet === void 0) {
	          otherStateToSet = {};
	        }

	        otherStateToSet = pickState(otherStateToSet);

	        _this.internalSetState(function (_ref8) {
	          var selectedItem = _ref8.selectedItem;
	          return _extends$6({
	            isOpen: _this.props.defaultIsOpen,
	            highlightedIndex: _this.props.defaultHighlightedIndex,
	            inputValue: _this.props.itemToString(selectedItem)
	          }, otherStateToSet);
	        }, cb);
	      };

	      _this.toggleMenu = function (otherStateToSet, cb) {
	        if (otherStateToSet === void 0) {
	          otherStateToSet = {};
	        }

	        otherStateToSet = pickState(otherStateToSet);

	        _this.internalSetState(function (_ref9) {
	          var isOpen = _ref9.isOpen;
	          return _extends$6({
	            isOpen: !isOpen
	          }, isOpen && {
	            highlightedIndex: _this.props.defaultHighlightedIndex
	          }, {}, otherStateToSet);
	        }, function () {
	          var _this$getState7 = _this.getState(),
	              isOpen = _this$getState7.isOpen,
	              highlightedIndex = _this$getState7.highlightedIndex;

	          if (isOpen) {
	            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {
	              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);
	            }
	          }

	          cbToCb(cb)();
	        });
	      };

	      _this.openMenu = function (cb) {
	        _this.internalSetState({
	          isOpen: true
	        }, cb);
	      };

	      _this.closeMenu = function (cb) {
	        _this.internalSetState({
	          isOpen: false
	        }, cb);
	      };

	      _this.updateStatus = debounce(function () {
	        var state = _this.getState();

	        var item = _this.items[state.highlightedIndex];

	        var resultCount = _this.getItemCount();

	        var status = _this.props.getA11yStatusMessage(_extends$6({
	          itemToString: _this.props.itemToString,
	          previousResultCount: _this.previousResultCount,
	          resultCount: resultCount,
	          highlightedItem: item
	        }, state));

	        _this.previousResultCount = resultCount;
	        setStatus(status, _this.props.environment.document);
	      }, 200); // fancy destructuring + defaults + aliases
	      // this basically says each value of state should either be set to
	      // the initial value or the default value if the initial value is not provided

	      var _this$props = _this.props,
	          defaultHighlightedIndex = _this$props.defaultHighlightedIndex,
	          _this$props$initialHi = _this$props.initialHighlightedIndex,
	          _highlightedIndex = _this$props$initialHi === void 0 ? defaultHighlightedIndex : _this$props$initialHi,
	          defaultIsOpen = _this$props.defaultIsOpen,
	          _this$props$initialIs = _this$props.initialIsOpen,
	          _isOpen = _this$props$initialIs === void 0 ? defaultIsOpen : _this$props$initialIs,
	          _this$props$initialIn = _this$props.initialInputValue,
	          _inputValue = _this$props$initialIn === void 0 ? '' : _this$props$initialIn,
	          _this$props$initialSe = _this$props.initialSelectedItem,
	          _selectedItem = _this$props$initialSe === void 0 ? null : _this$props$initialSe;

	      var _state = _this.getState({
	        highlightedIndex: _highlightedIndex,
	        isOpen: _isOpen,
	        inputValue: _inputValue,
	        selectedItem: _selectedItem
	      });

	      if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {
	        _state.inputValue = _this.props.itemToString(_state.selectedItem);
	      }

	      _this.state = _state;
	      return _this;
	    }

	    var _proto = Downshift.prototype;
	    /**
	     * Clear all running timeouts
	     */

	    _proto.internalClearTimeouts = function internalClearTimeouts() {
	      this.timeoutIds.forEach(function (id) {
	        clearTimeout(id);
	      });
	      this.timeoutIds = [];
	    }
	    /**
	     * Gets the state based on internal state or props
	     * If a state value is passed via props, then that
	     * is the value given, otherwise it's retrieved from
	     * stateToMerge
	     *
	     * @param {Object} stateToMerge defaults to this.state
	     * @return {Object} the state
	     */
	    ;

	    _proto.getState = function getState$1(stateToMerge) {
	      if (stateToMerge === void 0) {
	        stateToMerge = this.state;
	      }

	      return getState(stateToMerge, this.props);
	    };

	    _proto.getItemCount = function getItemCount() {
	      // things read better this way. They're in priority order:
	      // 1. `this.itemCount`
	      // 2. `this.props.itemCount`
	      // 3. `this.items.length`
	      var itemCount = this.items.length;

	      if (this.itemCount != null) {
	        itemCount = this.itemCount;
	      } else if (this.props.itemCount !== undefined) {
	        itemCount = this.props.itemCount;
	      }

	      return itemCount;
	    };

	    _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {
	      return this.props.environment.document.getElementById(this.getItemId(index));
	    };

	    _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {
	      /* istanbul ignore else (react-native) */
	      {
	        var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);
	        this.props.scrollIntoView(node, this._menuNode);
	      }
	    };

	    _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {
	      var _this6 = this;

	      var itemCount = this.getItemCount();

	      var _this$getState8 = this.getState(),
	          highlightedIndex = _this$getState8.highlightedIndex;

	      if (itemCount > 0) {
	        var nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, function (index) {
	          return _this6.getItemNodeFromIndex(index);
	        });
	        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);
	      }
	    };

	    _proto.getStateAndHelpers = function getStateAndHelpers() {
	      var _this$getState9 = this.getState(),
	          highlightedIndex = _this$getState9.highlightedIndex,
	          inputValue = _this$getState9.inputValue,
	          selectedItem = _this$getState9.selectedItem,
	          isOpen = _this$getState9.isOpen;

	      var itemToString = this.props.itemToString;
	      var id = this.id;
	      var getRootProps = this.getRootProps,
	          getToggleButtonProps = this.getToggleButtonProps,
	          getLabelProps = this.getLabelProps,
	          getMenuProps = this.getMenuProps,
	          getInputProps = this.getInputProps,
	          getItemProps = this.getItemProps,
	          openMenu = this.openMenu,
	          closeMenu = this.closeMenu,
	          toggleMenu = this.toggleMenu,
	          selectItem = this.selectItem,
	          selectItemAtIndex = this.selectItemAtIndex,
	          selectHighlightedItem = this.selectHighlightedItem,
	          setHighlightedIndex = this.setHighlightedIndex,
	          clearSelection = this.clearSelection,
	          clearItems = this.clearItems,
	          reset = this.reset,
	          setItemCount = this.setItemCount,
	          unsetItemCount = this.unsetItemCount,
	          setState = this.internalSetState;
	      return {
	        // prop getters
	        getRootProps: getRootProps,
	        getToggleButtonProps: getToggleButtonProps,
	        getLabelProps: getLabelProps,
	        getMenuProps: getMenuProps,
	        getInputProps: getInputProps,
	        getItemProps: getItemProps,
	        // actions
	        reset: reset,
	        openMenu: openMenu,
	        closeMenu: closeMenu,
	        toggleMenu: toggleMenu,
	        selectItem: selectItem,
	        selectItemAtIndex: selectItemAtIndex,
	        selectHighlightedItem: selectHighlightedItem,
	        setHighlightedIndex: setHighlightedIndex,
	        clearSelection: clearSelection,
	        clearItems: clearItems,
	        setItemCount: setItemCount,
	        unsetItemCount: unsetItemCount,
	        setState: setState,
	        // props
	        itemToString: itemToString,
	        // derived
	        id: id,
	        // state
	        highlightedIndex: highlightedIndex,
	        inputValue: inputValue,
	        isOpen: isOpen,
	        selectedItem: selectedItem
	      };
	    } //////////////////////////// ROOT
	    ;

	    _proto.componentDidMount = function componentDidMount() {
	      var _this7 = this;
	      /* istanbul ignore if (react-native) */


	      if ( this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
	        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
	      }
	      /* istanbul ignore if (react-native) */


	      {
	        // this.isMouseDown helps us track whether the mouse is currently held down.
	        // This is useful when the user clicks on an item in the list, but holds the mouse
	        // down long enough for the list to disappear (because the blur event fires on the input)
	        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should
	        // trigger hiding the menu.
	        var onMouseDown = function onMouseDown() {
	          _this7.isMouseDown = true;
	        };

	        var onMouseUp = function onMouseUp(event) {
	          _this7.isMouseDown = false; // if the target element or the activeElement is within a downshift node
	          // then we don't want to reset downshift

	          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment.document);

	          if (!contextWithinDownshift && _this7.getState().isOpen) {
	            _this7.reset({
	              type: mouseUp
	            }, function () {
	              return _this7.props.onOuterClick(_this7.getStateAndHelpers());
	            });
	          }
	        }; // Touching an element in iOS gives focus and hover states, but touching out of
	        // the element will remove hover, and persist the focus state, resulting in the
	        // blur event not being triggered.
	        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.
	        // If the user taps outside of Downshift, the component should be reset,
	        // but not if the user is swiping


	        var onTouchStart = function onTouchStart() {
	          _this7.isTouchMove = false;
	        };

	        var onTouchMove = function onTouchMove() {
	          _this7.isTouchMove = true;
	        };

	        var onTouchEnd = function onTouchEnd(event) {
	          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment.document, false);

	          if (!_this7.isTouchMove && !contextWithinDownshift && _this7.getState().isOpen) {
	            _this7.reset({
	              type: touchEnd
	            }, function () {
	              return _this7.props.onOuterClick(_this7.getStateAndHelpers());
	            });
	          }
	        };

	        var environment = this.props.environment;
	        environment.addEventListener('mousedown', onMouseDown);
	        environment.addEventListener('mouseup', onMouseUp);
	        environment.addEventListener('touchstart', onTouchStart);
	        environment.addEventListener('touchmove', onTouchMove);
	        environment.addEventListener('touchend', onTouchEnd);

	        this.cleanup = function () {
	          _this7.internalClearTimeouts();

	          _this7.updateStatus.cancel();

	          environment.removeEventListener('mousedown', onMouseDown);
	          environment.removeEventListener('mouseup', onMouseUp);
	          environment.removeEventListener('touchstart', onTouchStart);
	          environment.removeEventListener('touchmove', onTouchMove);
	          environment.removeEventListener('touchend', onTouchEnd);
	        };
	      }
	    };

	    _proto.shouldScroll = function shouldScroll(prevState, prevProps) {
	      var _ref10 = this.props.highlightedIndex === undefined ? this.getState() : this.props,
	          currentHighlightedIndex = _ref10.highlightedIndex;

	      var _ref11 = prevProps.highlightedIndex === undefined ? prevState : prevProps,
	          prevHighlightedIndex = _ref11.highlightedIndex;

	      var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;
	      return scrollWhenOpen || currentHighlightedIndex !== prevHighlightedIndex;
	    };

	    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	      {
	        validateControlledUnchanged(prevProps, this.props);
	        /* istanbul ignore if (react-native) */

	        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
	          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
	        }
	      }

	      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {
	        this.internalSetState({
	          type: controlledPropUpdatedSelectedItem,
	          inputValue: this.props.itemToString(this.props.selectedItem)
	        });
	      }

	      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {
	        this.scrollHighlightedItemIntoView();
	      }
	      /* istanbul ignore else (react-native) */


	      this.updateStatus();
	    };

	    _proto.componentWillUnmount = function componentWillUnmount() {
	      this.cleanup(); // avoids memory leak
	    };

	    _proto.render = function render() {
	      var children = unwrapArray(this.props.children, noop); // because the items are rerendered every time we call the children
	      // we clear this out each render and it will be populated again as
	      // getItemProps is called.

	      this.clearItems(); // we reset this so we know whether the user calls getRootProps during
	      // this render. If they do then we don't need to do anything,
	      // if they don't then we need to clone the element they return and
	      // apply the props for them.

	      this.getRootProps.called = false;
	      this.getRootProps.refKey = undefined;
	      this.getRootProps.suppressRefError = undefined; // we do something similar for getMenuProps

	      this.getMenuProps.called = false;
	      this.getMenuProps.refKey = undefined;
	      this.getMenuProps.suppressRefError = undefined; // we do something similar for getLabelProps

	      this.getLabelProps.called = false; // and something similar for getInputProps

	      this.getInputProps.called = false;
	      var element = unwrapArray(children(this.getStateAndHelpers()));

	      if (!element) {
	        return null;
	      }

	      if (this.getRootProps.called || this.props.suppressRefError) {
	        if ( !this.getRootProps.suppressRefError && !this.props.suppressRefError) {
	          validateGetRootPropsCalledCorrectly(element, this.getRootProps);
	        }

	        return element;
	      } else if (isDOMElement(element)) {
	        // they didn't apply the root props, but we can clone
	        // this and apply the props ourselves
	        return React.cloneElement(element, this.getRootProps(getElementProps(element)));
	      }
	      /* istanbul ignore else */


	      {
	        // they didn't apply the root props, but they need to
	        // otherwise we can't query around the autocomplete
	        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');
	      }
	      /* istanbul ignore next */


	      return undefined;
	    };

	    return Downshift;
	  }(React.Component);

	  Downshift.defaultProps = {
	    defaultHighlightedIndex: null,
	    defaultIsOpen: false,
	    getA11yStatusMessage: getA11yStatusMessage,
	    itemToString: function itemToString(i) {
	      if (i == null) {
	        return '';
	      }

	      if ( isPlainObject(i) && !i.hasOwnProperty('toString')) {
	        // eslint-disable-next-line no-console
	        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);
	      }

	      return String(i);
	    },
	    onStateChange: noop,
	    onInputValueChange: noop,
	    onUserAction: noop,
	    onChange: noop,
	    onSelect: noop,
	    onOuterClick: noop,
	    selectedItemChanged: function selectedItemChanged(prevItem, item) {
	      return prevItem !== item;
	    },
	    environment: typeof window === 'undefined'
	    /* istanbul ignore next (ssr) */
	    ? {} : window,
	    stateReducer: function stateReducer(state, stateToSet) {
	      return stateToSet;
	    },
	    suppressRefError: false,
	    scrollIntoView: scrollIntoView
	  };
	  Downshift.stateChangeTypes = stateChangeTypes;
	  return Downshift;
	}();

	 Downshift.propTypes = {
	  children: PropTypes.func,
	  defaultHighlightedIndex: PropTypes.number,
	  defaultIsOpen: PropTypes.bool,
	  initialHighlightedIndex: PropTypes.number,
	  initialSelectedItem: PropTypes.any,
	  initialInputValue: PropTypes.string,
	  initialIsOpen: PropTypes.bool,
	  getA11yStatusMessage: PropTypes.func,
	  itemToString: PropTypes.func,
	  onChange: PropTypes.func,
	  onSelect: PropTypes.func,
	  onStateChange: PropTypes.func,
	  onInputValueChange: PropTypes.func,
	  onUserAction: PropTypes.func,
	  onOuterClick: PropTypes.func,
	  selectedItemChanged: PropTypes.func,
	  stateReducer: PropTypes.func,
	  itemCount: PropTypes.number,
	  id: PropTypes.string,
	  environment: PropTypes.shape({
	    addEventListener: PropTypes.func,
	    removeEventListener: PropTypes.func,
	    document: PropTypes.shape({
	      getElementById: PropTypes.func,
	      activeElement: PropTypes.any,
	      body: PropTypes.any
	    })
	  }),
	  suppressRefError: PropTypes.bool,
	  scrollIntoView: PropTypes.func,
	  // things we keep in state for uncontrolled components
	  // but can accept as props for controlled components

	  /* eslint-disable react/no-unused-prop-types */
	  selectedItem: PropTypes.any,
	  isOpen: PropTypes.bool,
	  inputValue: PropTypes.string,
	  highlightedIndex: PropTypes.number,
	  labelId: PropTypes.string,
	  inputId: PropTypes.string,
	  menuId: PropTypes.string,
	  getItemId: PropTypes.func
	  /* eslint-enable react/no-unused-prop-types */

	} ;

	function validateGetMenuPropsCalledCorrectly(node, _ref12) {
	  var refKey = _ref12.refKey;

	  if (!node) {
	    // eslint-disable-next-line no-console
	    console.error("downshift: The ref prop \"" + refKey + "\" from getMenuProps was not applied correctly on your menu element.");
	  }
	}

	function validateGetRootPropsCalledCorrectly(element, _ref13) {
	  var refKey = _ref13.refKey;
	  var refKeySpecified = refKey !== 'ref';
	  var isComposite = !isDOMElement(element);

	  if (isComposite && !refKeySpecified && !reactIs_1(element)) {
	    // eslint-disable-next-line no-console
	    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');
	  } else if (!isComposite && refKeySpecified) {
	    // eslint-disable-next-line no-console
	    console.error("downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"" + refKey + "\"");
	  }

	  if (!reactIs_1(element) && !getElementProps(element)[refKey]) {
	    // eslint-disable-next-line no-console
	    console.error("downshift: You must apply the ref prop \"" + refKey + "\" from getRootProps onto your root element.");
	  }
	}

	function validateControlledUnchanged(prevProps, nextProps) {
	  var warningDescription = "This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props";
	  ['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(function (propKey) {
	    if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {
	      // eslint-disable-next-line no-console
	      console.error("downshift: A component has changed the controlled prop \"" + propKey + "\" to be uncontrolled. " + warningDescription);
	    } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {
	      // eslint-disable-next-line no-console
	      console.error("downshift: A component has changed the uncontrolled prop \"" + propKey + "\" to be controlled. " + warningDescription);
	    }
	  });
	}
	/**
	 * Default state reducer that returns the changes.
	 *
	 * @param {Object} s state.
	 * @param {Object} a action with changes.
	 * @returns {Object} changes.
	 */


	function stateReducer(s, a) {
	  return a.changes;
	}
	/**
	 * Returns a message to be added to aria-live region when item is selected.
	 *
	 * @param {Object} selectionParameters Parameters required to build the message.
	 * @returns {string} The a11y message.
	 */


	function getA11ySelectionMessage(selectionParameters) {
	  var selectedItem = selectionParameters.selectedItem,
	      itemToStringLocal = selectionParameters.itemToString;
	  return selectedItem ? itemToStringLocal(selectedItem) + " has been selected." : '';
	}
	/**
	 * Debounced call for updating the a11y message.
	 */


	var updateA11yStatus = debounce(function (getA11yMessage, document) {
	  setStatus(getA11yMessage(), document);
	}, 200);

	function itemToString(item) {
	  return item ? String(item) : '';
	}

	var defaultProps = {
	  itemToString: itemToString,
	  stateReducer: stateReducer,
	  getA11ySelectionMessage: getA11ySelectionMessage,
	  scrollIntoView: scrollIntoView,
	  circularNavigation: false,
	  environment: typeof window === 'undefined'
	  /* istanbul ignore next (ssr) */
	  ? {} : window
	};

	var propTypes = {
	  items: PropTypes.array.isRequired,
	  itemToString: PropTypes.func,
	  getA11yStatusMessage: PropTypes.func,
	  getA11ySelectionMessage: PropTypes.func,
	  circularNavigation: PropTypes.bool,
	  highlightedIndex: PropTypes.number,
	  defaultHighlightedIndex: PropTypes.number,
	  initialHighlightedIndex: PropTypes.number,
	  isOpen: PropTypes.bool,
	  defaultIsOpen: PropTypes.bool,
	  initialIsOpen: PropTypes.bool,
	  selectedItem: PropTypes.any,
	  initialSelectedItem: PropTypes.any,
	  defaultSelectedItem: PropTypes.any,
	  id: PropTypes.string,
	  labelId: PropTypes.string,
	  menuId: PropTypes.string,
	  getItemId: PropTypes.func,
	  toggleButtonId: PropTypes.string,
	  stateReducer: PropTypes.func,
	  onSelectedItemChange: PropTypes.func,
	  onHighlightedIndexChange: PropTypes.func,
	  onStateChange: PropTypes.func,
	  onIsOpenChange: PropTypes.func,
	  environment: PropTypes.shape({
	    addEventListener: PropTypes.func,
	    removeEventListener: PropTypes.func,
	    document: PropTypes.shape({
	      getElementById: PropTypes.func,
	      activeElement: PropTypes.any,
	      body: PropTypes.any
	    })
	  })
	};
	/**
	 * Default implementation for status message. Only added when menu is open.
	 * Will specift if there are results in the list, and if so, how many,
	 * and what keys are relevant.
	 *
	 * @param {Object} param the downshift state and other relevant properties
	 * @return {String} the a11y status message
	 */

	function getA11yStatusMessage$1(_ref) {
	  var isOpen = _ref.isOpen,
	      resultCount = _ref.resultCount,
	      previousResultCount = _ref.previousResultCount;

	  if (!isOpen) {
	    return '';
	  }

	  if (!resultCount) {
	    return 'No results are available.';
	  }

	  if (resultCount !== previousResultCount) {
	    return resultCount + " result" + (resultCount === 1 ? ' is' : 's are') + " available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.";
	  }

	  return '';
	}

	var defaultProps$1 = _extends$6({}, defaultProps, {
	  getA11yStatusMessage: getA11yStatusMessage$1
	});

	var propTypes$1 = {
	  items: PropTypes.array.isRequired,
	  itemToString: PropTypes.func,
	  getA11yStatusMessage: PropTypes.func,
	  getA11ySelectionMessage: PropTypes.func,
	  circularNavigation: PropTypes.bool,
	  highlightedIndex: PropTypes.number,
	  defaultHighlightedIndex: PropTypes.number,
	  initialHighlightedIndex: PropTypes.number,
	  isOpen: PropTypes.bool,
	  defaultIsOpen: PropTypes.bool,
	  initialIsOpen: PropTypes.bool,
	  selectedItem: PropTypes.any,
	  initialSelectedItem: PropTypes.any,
	  defaultSelectedItem: PropTypes.any,
	  inputValue: PropTypes.string,
	  defaultInputValue: PropTypes.string,
	  initialInputValue: PropTypes.string,
	  id: PropTypes.string,
	  labelId: PropTypes.string,
	  menuId: PropTypes.string,
	  getItemId: PropTypes.func,
	  inputId: PropTypes.string,
	  toggleButtonId: PropTypes.string,
	  stateReducer: PropTypes.func,
	  onSelectedItemChange: PropTypes.func,
	  onHighlightedIndexChange: PropTypes.func,
	  onStateChange: PropTypes.func,
	  onIsOpenChange: PropTypes.func,
	  onInputValueChange: PropTypes.func,
	  environment: PropTypes.shape({
	    addEventListener: PropTypes.func,
	    removeEventListener: PropTypes.func,
	    document: PropTypes.shape({
	      getElementById: PropTypes.func,
	      activeElement: PropTypes.any,
	      body: PropTypes.any
	    })
	  })
	};

	var defaultProps$2 = _extends$6({}, defaultProps, {
	  getA11yStatusMessage: getA11yStatusMessage,
	  circularNavigation: true
	});

	var propTypes$2 = {
	  selectedItems: PropTypes.array,
	  initialSelectedItems: PropTypes.array,
	  defaultSelectedItems: PropTypes.array,
	  itemToString: PropTypes.func,
	  getA11yRemovalMessage: PropTypes.func,
	  stateReducer: PropTypes.func,
	  activeIndex: PropTypes.number,
	  initialActiveIndex: PropTypes.number,
	  defaultActiveIndex: PropTypes.number,
	  onActiveIndexChange: PropTypes.func,
	  onSelectedItemsChange: PropTypes.func,
	  keyNavigationNext: PropTypes.string,
	  keyNavigationPrevious: PropTypes.string,
	  environment: PropTypes.shape({
	    addEventListener: PropTypes.func,
	    removeEventListener: PropTypes.func,
	    document: PropTypes.shape({
	      getElementById: PropTypes.func,
	      activeElement: PropTypes.any,
	      body: PropTypes.any
	    })
	  })
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$b =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M13 21.2L5.4 13.6 4 15 13 24 28 9 26.6 7.5 13 21.2z"
	});

	var Checkmark16 = /*#__PURE__*/React__default.forwardRef(function Checkmark16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$b, children);
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$c =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2\tc-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z"
	});

	var _ref3$5 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8\tc0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z",
	  "data-icon-path": "inner-path",
	  opacity: "0"
	});

	var WarningFilled16 = /*#__PURE__*/React__default.forwardRef(function WarningFilled16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$c, _ref3$5, children);
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var ListBoxType = PropTypes.oneOf(['default', 'inline']);
	var ListBoxSize = PropTypes.oneOf(['sm', 'xl']);

	function _extends$7() {
	  _extends$7 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$7.apply(this, arguments);
	}

	function _defineProperty$a(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$9(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$a(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$a(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$R = settings_1.prefix;

	var handleOnKeyDown = function handleOnKeyDown(event) {
	  if (event.keyCode === 27) {
	    event.stopPropagation();
	  }
	};

	var handleClick = function handleClick(event) {
	  event.preventDefault();
	  event.stopPropagation();
	};
	/**
	 * `ListBox` is a generic container component that handles creating the
	 * container class name in response to certain props.
	 */


	var ListBox = /*#__PURE__*/React__default.forwardRef(function ListBox(_ref, ref) {
	  var _cx;

	  var children = _ref.children,
	      containerClassName = _ref.className,
	      disabled = _ref.disabled,
	      type = _ref.type,
	      size = _ref.size,
	      invalid = _ref.invalid,
	      invalidText = _ref.invalidText,
	      light = _ref.light,
	      isOpen = _ref.isOpen,
	      rest = _objectWithoutProperties$9(_ref, ["children", "className", "disabled", "type", "size", "invalid", "invalidText", "light", "isOpen"]);

	  var className = cx((_cx = {}, _defineProperty$a(_cx, containerClassName, !!containerClassName), _defineProperty$a(_cx, "".concat(prefix$R, "--list-box"), true), _defineProperty$a(_cx, "".concat(prefix$R, "--list-box--").concat(size), size), _defineProperty$a(_cx, "".concat(prefix$R, "--list-box--inline"), type === 'inline'), _defineProperty$a(_cx, "".concat(prefix$R, "--list-box--disabled"), disabled), _defineProperty$a(_cx, "".concat(prefix$R, "--list-box--light"), light), _defineProperty$a(_cx, "".concat(prefix$R, "--list-box--expanded"), isOpen), _cx));
	  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", _extends$7({}, rest, {
	    className: className,
	    ref: ref,
	    onKeyDown: handleOnKeyDown,
	    onClick: handleClick,
	    "data-invalid": invalid || undefined
	  }), children), invalid ? /*#__PURE__*/React__default.createElement("div", {
	    className: "".concat(prefix$R, "--form-requirement")
	  }, invalidText) : null);
	});
	ListBox.displayName = 'ListBox';
	ListBox.propTypes = {
	  /**
	   * Provide the contents of your ListBox
	   */
	  children: PropTypes.node,

	  /**
	   * Specify a class name to be applied on the containing list box node
	   */
	  className: PropTypes.string,

	  /**
	   * Specify whether the ListBox is currently disabled
	   */
	  disabled: PropTypes.bool.isRequired,

	  /**
	   * Specify the "type" of the ListBox. Currently supports either `default` or
	   * `inline` as an option.
	   */
	  type: ListBoxType.isRequired,

	  /**
	   * Specify the size of the ListBox. Currently supports either `sm` or `xl` as an option.
	   */
	  size: ListBoxSize,

	  /**
	   * Specify whether the control is currently invalid
	   */
	  invalid: PropTypes.bool,

	  /**
	   * Specify the text to be displayed when the control is invalid
	   */
	  invalidText: PropTypes.string,

	  /**
	   * Specify if the control should use the light variant
	   */
	  light: PropTypes.bool,

	  /**
	   * Specify if the control should render open
	   */
	  isOpen: PropTypes.bool
	};
	ListBox.defaultProps = {
	  disabled: false,
	  type: 'default'
	};

	function _extends$8() {
	  _extends$8 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$8.apply(this, arguments);
	}

	function _objectWithoutProperties$a(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$b(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$b(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$S = settings_1.prefix; // No longer used, left export for backward-compatibility
	/**
	 * `ListBoxField` is responsible for creating the containing node for valid
	 * elements inside of a field. It also provides a11y-related attributes like
	 * `role` to make sure a user can focus the given field.
	 */

	function ListBoxField(_ref) {
	  var children = _ref.children,
	      disabled = _ref.disabled,
	      tabIndex = _ref.tabIndex,
	      rest = _objectWithoutProperties$a(_ref, ["children", "disabled", "tabIndex"]);

	  return /*#__PURE__*/React__default.createElement("div", _extends$8({
	    className: "".concat(prefix$S, "--list-box__field"),
	    tabIndex: !disabled && tabIndex || -1
	  }, rest), children);
	}

	ListBoxField.propTypes = {
	  /**
	   * Typically set by `getToggleButtonProps`, this should specify whether the
	   * field has a popup.
	   */
	  'aria-haspopup': PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),

	  /**
	   * The role for the component, should be set by `getToggleButtonProps` coming
	   * from Downshift
	   */
	  role: PropTypes.string,

	  /**
	   * Provide the contents of your ListBoxField
	   */
	  children: PropTypes.node,

	  /**
	   * Specify if the parent <ListBox> is disabled
	   */
	  disabled: PropTypes.bool,

	  /**
	   * Optional prop to specify the tabIndex of the <ListBox> trigger button
	   */
	  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
	};

	function _extends$9() {
	  _extends$9 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$9.apply(this, arguments);
	}

	function _defineProperty$b(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$b(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$c(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$c(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$T = settings_1.prefix;
	/**
	 * `ListBoxMenuItem` is a helper component for managing the container class
	 * name, alongside any classes for any corresponding states, for a generic list
	 * box menu item.
	 */

	var ListBoxMenuItem = function ListBoxMenuItem(_ref) {
	  var _cx;

	  var children = _ref.children,
	      isActive = _ref.isActive,
	      isHighlighted = _ref.isHighlighted,
	      rest = _objectWithoutProperties$b(_ref, ["children", "isActive", "isHighlighted"]);

	  var className = cx((_cx = {}, _defineProperty$b(_cx, "".concat(prefix$T, "--list-box__menu-item"), true), _defineProperty$b(_cx, "".concat(prefix$T, "--list-box__menu-item--active"), isActive), _defineProperty$b(_cx, "".concat(prefix$T, "--list-box__menu-item--highlighted"), isHighlighted), _cx));
	  return /*#__PURE__*/React__default.createElement("div", _extends$9({
	    className: className
	  }, rest), /*#__PURE__*/React__default.createElement("div", {
	    className: "".concat(prefix$T, "--list-box__menu-item__option")
	  }, children));
	};

	ListBoxMenuItem.propTypes = {
	  /**
	   * Specify any children nodes that hsould be rendered inside of the ListBox
	   * Menu Item
	   */
	  children: PropTypes.node,

	  /**
	   * Specify whether the current menu item is "active".
	   */
	  isActive: PropTypes.bool.isRequired,

	  /**
	   * Specify whether the current menu item is "highlighed".
	   */
	  isHighlighted: PropTypes.bool.isRequired
	};
	ListBoxMenuItem.defaultProps = {
	  isActive: false,
	  isHighlighted: false
	};

	function _extends$a() {
	  _extends$a = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$a.apply(this, arguments);
	}

	function _objectWithoutProperties$c(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$d(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$d(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$U = settings_1.prefix;
	/**
	 * `ListBoxMenu` is a simple container node that isolates the `list-box__menu`
	 * class into a single component. It is also being used to validate given
	 * `children` components.
	 */

	var ListBoxMenu = /*#__PURE__*/React__default.forwardRef(function ListBoxMenu(_ref, ref) {
	  var children = _ref.children,
	      id = _ref.id,
	      rest = _objectWithoutProperties$c(_ref, ["children", "id"]);

	  return /*#__PURE__*/React__default.createElement("div", _extends$a({
	    ref: ref,
	    id: id,
	    className: "".concat(prefix$U, "--list-box__menu"),
	    role: "listbox"
	  }, rest), children);
	});
	ListBoxMenu.displayName = 'ListBoxMenu';
	ListBoxMenu.propTypes = {
	  /**
	   * Provide the contents of your ListBoxMenu
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(ListBoxMenuItem),
	  /**
	   * allow single item using the workaround for functional components
	   * https://github.com/facebook/react/issues/2979#issuecomment-222379916
	   */
	  PropTypes.shape({
	    type: PropTypes.oneOf([ListBoxMenuItem])
	  }), PropTypes.bool // used in Dropdown for closed state
	  ]),

	  /**
	   * Specify a custom `id`
	   */
	  id: PropTypes.string.isRequired
	};

	var _defaultTranslations;

	function _defineProperty$c(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$V = settings_1.prefix;
	var translationIds = {
	  'close.menu': 'close.menu',
	  'open.menu': 'open.menu'
	};
	var defaultTranslations = (_defaultTranslations = {}, _defineProperty$c(_defaultTranslations, translationIds['close.menu'], 'Close menu'), _defineProperty$c(_defaultTranslations, translationIds['open.menu'], 'Open menu'), _defaultTranslations);
	/**
	 * `ListBoxMenuIcon` is used to orient the icon up or down depending on the
	 * state of the menu for a given `ListBox`
	 */

	var ListBoxMenuIcon = function ListBoxMenuIcon(_ref) {
	  var isOpen = _ref.isOpen,
	      t = _ref.translateWithId;
	  var className = cx("".concat(prefix$V, "--list-box__menu-icon"), _defineProperty$c({}, "".concat(prefix$V, "--list-box__menu-icon--open"), isOpen));
	  var description = isOpen ? t('close.menu') : t('open.menu');
	  return /*#__PURE__*/React__default.createElement("div", {
	    className: className
	  }, /*#__PURE__*/React__default.createElement(ChevronDown16, {
	    name: "chevron--down",
	    "aria-label": description
	  }, /*#__PURE__*/React__default.createElement("title", null, description)));
	};

	ListBoxMenuIcon.propTypes = {
	  /**
	   * Specify whether the menu is currently open, which will influence the
	   * direction of the menu icon
	   */
	  isOpen: PropTypes.bool.isRequired,

	  /**
	   * i18n hook used to provide the appropriate description for the given menu
	   * icon. This function takes in an id defined in `translationIds` and should
	   * return a string message for that given message id.
	   */
	  translateWithId: PropTypes.func.isRequired
	};
	ListBoxMenuIcon.defaultProps = {
	  translateWithId: function translateWithId(id) {
	    return defaultTranslations[id];
	  }
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$d =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z"
	});

	var Close16 = /*#__PURE__*/React__default.forwardRef(function Close16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$d, children);
	});

	var _defaultTranslations$1;

	function _defineProperty$d(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$W = settings_1.prefix;
	/**
	 * `ListBoxSelection` is used to provide controls for clearing a selection, in
	 * addition to conditionally rendering a badge if the control has more than one
	 * selection.
	 */

	var ListBoxSelection = function ListBoxSelection(_ref) {
	  var _cx;

	  var clearSelection = _ref.clearSelection,
	      selectionCount = _ref.selectionCount,
	      t = _ref.translateWithId,
	      disabled = _ref.disabled,
	      onClearSelection = _ref.onClearSelection;
	  var className = cx("".concat(prefix$W, "--list-box__selection"), (_cx = {}, _defineProperty$d(_cx, "".concat(prefix$W, "--tag--filter"), selectionCount), _defineProperty$d(_cx, "".concat(prefix$W, "--list-box__selection--multi"), selectionCount), _cx));

	  var handleOnClick = function handleOnClick(event) {
	    event.stopPropagation();

	    if (disabled) {
	      return;
	    }

	    clearSelection(event);

	    if (onClearSelection) {
	      onClearSelection(event);
	    }
	  };

	  var handleOnKeyDown = function handleOnKeyDown(event) {
	    event.stopPropagation();

	    if (disabled) {
	      return;
	    } // When a user hits ENTER, we'll clear the selection


	    if (match(event, Enter)) {
	      clearSelection(event);

	      if (onClearSelection) {
	        onClearSelection(event);
	      }
	    }
	  };

	  var description = selectionCount ? t('clear.all') : t('clear.selection');
	  return /*#__PURE__*/React__default.createElement("div", {
	    role: "button",
	    className: className,
	    tabIndex: disabled ? -1 : 0,
	    onClick: handleOnClick,
	    onKeyDown: handleOnKeyDown,
	    "aria-label": "Clear Selection",
	    title: description
	  }, selectionCount, /*#__PURE__*/React__default.createElement(Close16, null));
	};

	var translationIds$1 = {
	  'clear.all': 'clear.all',
	  'clear.selection': 'clear.selection'
	};
	var defaultTranslations$1 = (_defaultTranslations$1 = {}, _defineProperty$d(_defaultTranslations$1, translationIds$1['clear.all'], 'Clear all selected items'), _defineProperty$d(_defaultTranslations$1, translationIds$1['clear.selection'], 'Clear selected item'), _defaultTranslations$1);
	ListBoxSelection.propTypes = {
	  /**
	   * Specify whether or not the clear selection element should be disabled
	   */
	  disabled: PropTypes.bool,

	  /**
	   * Specify a function to be invoked when a user interacts with the clear
	   * selection element.
	   */
	  clearSelection: PropTypes.func.isRequired,

	  /**
	   * Specify an optional `selectionCount` value that will be used to determine
	   * whether the selection should display a badge or a single clear icon.
	   */
	  selectionCount: PropTypes.number,

	  /**
	   * i18n hook used to provide the appropriate description for the given menu
	   * icon. This function takes in an id defined in `translationIds` and should
	   * return a string message for that given message id.
	   */
	  translateWithId: PropTypes.func.isRequired,

	  /**
	   * Specify an optional `onClick` handler that is called when the underlying
	   * clear selection element is clicked
	   */
	  onClick: PropTypes.func,

	  /**
	   * Specify an optional `onKeyDown` handler that is called when the underlying
	   * clear selection element fires a keydown event
	   */
	  onKeyDown: PropTypes.func,

	  /**
	   * Specify an optional `onClearSelection` handler that is called when the underlying
	   * element is cleared
	   */
	  onClearSelection: PropTypes.func
	};
	ListBoxSelection.defaultProps = {
	  translateWithId: function translateWithId(id) {
	    return defaultTranslations$1[id];
	  }
	};

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	ListBox.Field = ListBoxField;
	ListBox.Menu = ListBoxMenu;
	ListBox.MenuIcon = ListBoxMenuIcon;
	ListBox.MenuItem = ListBoxMenuItem;
	ListBox.Selection = ListBoxSelection;

	function _slicedToArray$3(arr, i) {
	  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$3();
	}

	function _nonIterableRest$3() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _unsupportedIterableToArray$2(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
	}

	function _arrayLikeToArray$2(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _iterableToArrayLimit$3(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayWithHoles$3(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Create an adapter that converts an object of props with potentially deprecated
	 * prop names to the replacement prop names in a newer version. Useful for guarding
	 * against breaking changes when a prop has been renamed
	 *
	 * @param {Array} spec - an array of options which specify a text or regex
	 * matcher alongside a replacement if there is a match
	 * @returns {Function}
	 */


	function createPropAdapter(spec) {
	  // if props aren't passed in we should default the prop to empty object
	  return function () {
	    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var output = {};
	    Object.keys(input).forEach(function (key) {
	      var match = spec.find(function (_ref) {
	        var _ref2 = _slicedToArray$3(_ref, 1),
	            regex = _ref2[0];

	        return key.match(regex);
	      });

	      if (match) {
	        var _match = _slicedToArray$3(match, 2),
	            regex = _match[0],
	            replacer = _match[1];

	        output[key.replace(regex, replacer)] = input[key];
	        return;
	      }

	      output[key] = input[key];
	    });
	    return output;
	  };
	}
	/**
	 * TODO: REMOVE IN v11
	 * props staring with "default..." were changed to "initial..." in Downshift v3
	 *
	 * @see https://github.com/downshift-js/downshift/releases/tag/v3.0.0
	 */


	var mapDownshiftProps = createPropAdapter([[/^default/g, 'initial']]);

	function _typeof$2(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$2 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$2 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$2(obj);
	}

	function _extends$b() {
	  _extends$b = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$b.apply(this, arguments);
	}

	function _objectWithoutProperties$d(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$e(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$e(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function ownKeys$b(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$9(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$b(Object(source), true).forEach(function (key) {
	        _defineProperty$e(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$b(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _classCallCheck$3(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$3(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$3(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$3(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$2(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$2(subClass, superClass);
	}

	function _setPrototypeOf$2(o, p) {
	  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$2(o, p);
	}

	function _createSuper$2(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$2(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$2(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$2(this, result);
	  };
	}

	function _possibleConstructorReturn$2(self, call) {
	  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$3(self);
	}

	function _assertThisInitialized$3(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$2() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$2(o) {
	  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$2(o);
	}

	function _defineProperty$e(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$X = settings_1.prefix;

	var defaultItemToString = function defaultItemToString(item) {
	  if (typeof item === 'string') {
	    return item;
	  }

	  return item && item.label;
	};

	var defaultShouldFilterItem = function defaultShouldFilterItem() {
	  return true;
	};

	var getInputValue = function getInputValue(props, state) {
	  if (props.selectedItem) {
	    return props.itemToString(props.selectedItem);
	  } // TODO: consistent `initialSelectedItem` behavior with other listbox components in v11


	  if (props.initialSelectedItem) {
	    return props.itemToString(props.initialSelectedItem);
	  }

	  return state.inputValue || '';
	};

	var findHighlightedIndex = function findHighlightedIndex(_ref, inputValue) {
	  var items = _ref.items,
	      itemToString = _ref.itemToString;

	  if (!inputValue) {
	    return -1;
	  }

	  var searchValue = inputValue.toLowerCase();

	  for (var i = 0; i < items.length; i++) {
	    var item = itemToString(items[i]).toLowerCase();

	    if (item.indexOf(searchValue) !== -1) {
	      return i;
	    }
	  }

	  return -1;
	};

	var getInstanceId = setupGetInstanceId();

	var ComboBox = /*#__PURE__*/function (_React$Component) {
	  _inherits$2(ComboBox, _React$Component);

	  var _super = _createSuper$2(ComboBox);

	  _createClass$3(ComboBox, null, [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(nextProps, state) {
	      var prevSelectedItem = state.prevSelectedItem,
	          doneInitialSelectedItem = state.doneInitialSelectedItem;
	      var selectedItem = nextProps.selectedItem;

	      if (!doneInitialSelectedItem || prevSelectedItem !== selectedItem) {
	        return {
	          doneInitialSelectedItem: true,
	          prevSelectedItem: selectedItem,
	          inputValue: getInputValue(nextProps, state)
	        };
	      }

	      return null;
	    }
	  }]);

	  function ComboBox(props) {
	    var _this;

	    _classCallCheck$3(this, ComboBox);

	    _this = _super.call(this, props);

	    _defineProperty$e(_assertThisInitialized$3(_this), "filterItems", function (items, itemToString, inputValue) {
	      return items.filter(function (item) {
	        return _this.props.shouldFilterItem({
	          item: item,
	          itemToString: itemToString,
	          inputValue: inputValue
	        });
	      });
	    });

	    _defineProperty$e(_assertThisInitialized$3(_this), "handleOnChange", function (selectedItem) {
	      if (_this.props.onChange) {
	        _this.props.onChange({
	          selectedItem: selectedItem
	        });
	      }
	    });

	    _defineProperty$e(_assertThisInitialized$3(_this), "handleOnInputValueChange", function (inputValue) {
	      var onInputChange = _this.props.onInputChange;

	      _this.setState(function () {
	        return {
	          // Default to empty string if we have a false-y `inputValue`
	          inputValue: inputValue || ''
	        };
	      }, function () {
	        if (onInputChange) {
	          onInputChange(inputValue);
	        }
	      });
	    });

	    _defineProperty$e(_assertThisInitialized$3(_this), "handleSelectionClear", function () {
	      var _this$textInput;

	      if ((_this$textInput = _this.textInput) === null || _this$textInput === void 0 ? void 0 : _this$textInput.current) {
	        _this.textInput.current.focus();
	      }
	    });

	    _defineProperty$e(_assertThisInitialized$3(_this), "handleOnStateChange", function (newState, _ref2) {
	      var setHighlightedIndex = _ref2.setHighlightedIndex;

	      if (Object.prototype.hasOwnProperty.call(newState, 'inputValue')) {
	        var inputValue = newState.inputValue;

	        var items = _this.filterItems(_this.props.items, _this.props.itemToString, inputValue);

	        setHighlightedIndex(findHighlightedIndex(_objectSpread$9(_objectSpread$9({}, _this.props), {}, {
	          items: items
	        }), inputValue));
	      }
	    });

	    _defineProperty$e(_assertThisInitialized$3(_this), "onToggleClick", function (isOpen) {
	      return function (event) {
	        if (event.target === _this.textInput.current && isOpen) {
	          event.preventDownshiftDefault = true;
	          event.persist();
	        }
	      };
	    });

	    _this.textInput = /*#__PURE__*/React__default.createRef();
	    _this.comboBoxInstanceId = getInstanceId();
	    _this.state = {
	      inputValue: getInputValue(props, {})
	    };
	    return _this;
	  }

	  _createClass$3(ComboBox, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          containerClassName = _this$props.className,
	          disabled = _this$props.disabled,
	          id = _this$props.id,
	          items = _this$props.items,
	          itemToString = _this$props.itemToString,
	          itemToElement = _this$props.itemToElement,
	          titleText = _this$props.titleText,
	          helperText = _this$props.helperText,
	          placeholder = _this$props.placeholder,
	          initialSelectedItem = _this$props.initialSelectedItem,
	          selectedItem = _this$props.selectedItem,
	          ariaLabel = _this$props.ariaLabel,
	          translateWithId = _this$props.translateWithId,
	          invalid = _this$props.invalid,
	          invalidText = _this$props.invalidText,
	          light = _this$props.light,
	          size = _this$props.size,
	          downshiftProps = _this$props.downshiftProps,
	          direction = _this$props.direction,
	          rest = _objectWithoutProperties$d(_this$props, ["className", "disabled", "id", "items", "itemToString", "itemToElement", "titleText", "helperText", "placeholder", "initialSelectedItem", "selectedItem", "ariaLabel", "translateWithId", "invalid", "invalidText", "light", "type", "size", "shouldFilterItem", "onChange", "onInputChange", "downshiftProps", "direction"]);

	      var className = cx("".concat(prefix$X, "--combo-box"), containerClassName, _defineProperty$e({}, "".concat(prefix$X, "--list-box--up"), direction === 'top'));
	      var titleClasses = cx("".concat(prefix$X, "--label"), _defineProperty$e({}, "".concat(prefix$X, "--label--disabled"), disabled));
	      var comboBoxHelperId = !helperText ? undefined : "combobox-helper-text-".concat(this.comboBoxInstanceId);
	      var helperClasses = cx("".concat(prefix$X, "--form__helper-text"), _defineProperty$e({}, "".concat(prefix$X, "--form__helper-text--disabled"), disabled));
	      var wrapperClasses = cx("".concat(prefix$X, "--list-box__wrapper"));
	      var inputClasses = cx("".concat(prefix$X, "--text-input"), _defineProperty$e({}, "".concat(prefix$X, "--text-input--empty"), !this.state.inputValue)); // needs to be Capitalized for react to render it correctly

	      var ItemToElement = itemToElement;
	      return /*#__PURE__*/React__default.createElement(Downshift, _extends$b({}, mapDownshiftProps(downshiftProps), {
	        onChange: this.handleOnChange,
	        onInputValueChange: this.handleOnInputValueChange,
	        onStateChange: this.handleOnStateChange,
	        inputValue: this.state.inputValue || '',
	        itemToString: itemToString,
	        initialSelectedItem: initialSelectedItem,
	        inputId: id,
	        selectedItem: selectedItem
	      }), function (_ref3) {
	        var getToggleButtonProps = _ref3.getToggleButtonProps,
	            getInputProps = _ref3.getInputProps,
	            getItemProps = _ref3.getItemProps,
	            getLabelProps = _ref3.getLabelProps,
	            isOpen = _ref3.isOpen,
	            inputValue = _ref3.inputValue,
	            selectedItem = _ref3.selectedItem,
	            highlightedIndex = _ref3.highlightedIndex,
	            clearSelection = _ref3.clearSelection,
	            toggleMenu = _ref3.toggleMenu,
	            getMenuProps = _ref3.getMenuProps;
	        return /*#__PURE__*/React__default.createElement("div", {
	          className: wrapperClasses
	        }, titleText && /*#__PURE__*/React__default.createElement("label", _extends$b({
	          className: titleClasses
	        }, getLabelProps()), titleText), /*#__PURE__*/React__default.createElement(ListBox, {
	          className: className,
	          disabled: disabled,
	          invalid: invalid,
	          "aria-label": ariaLabel,
	          invalidText: invalidText,
	          isOpen: isOpen,
	          light: light,
	          size: size
	        }, /*#__PURE__*/React__default.createElement(ListBox.Field, getToggleButtonProps({
	          disabled: disabled,
	          onClick: _this2.onToggleClick(isOpen)
	        }), /*#__PURE__*/React__default.createElement("input", _extends$b({
	          disabled: disabled,
	          className: inputClasses,
	          type: "text",
	          tabIndex: "0",
	          "aria-autocomplete": "list",
	          ref: _this2.textInput
	        }, rest, getInputProps({
	          disabled: disabled,
	          placeholder: placeholder,
	          onKeyDown: function onKeyDown(event) {
	            if (match(event, Space)) {
	              event.stopPropagation();
	            }

	            if (match(event, Enter)) {
	              toggleMenu();
	            }
	          }
	        }))), invalid && /*#__PURE__*/React__default.createElement(WarningFilled16, {
	          className: "".concat(prefix$X, "--list-box__invalid-icon")
	        }), inputValue && /*#__PURE__*/React__default.createElement(ListBox.Selection, {
	          clearSelection: clearSelection,
	          translateWithId: translateWithId,
	          disabled: disabled,
	          onClearSelection: _this2.handleSelectionClear
	        }), /*#__PURE__*/React__default.createElement(ListBox.MenuIcon, {
	          isOpen: isOpen,
	          translateWithId: translateWithId
	        })), isOpen && /*#__PURE__*/React__default.createElement(ListBox.Menu, getMenuProps({
	          'aria-label': ariaLabel
	        }), _this2.filterItems(items, itemToString, inputValue).map(function (item, index) {
	          var itemProps = getItemProps({
	            item: item,
	            index: index
	          });
	          return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends$b({
	            key: itemProps.id,
	            isActive: selectedItem === item,
	            tabIndex: "-1",
	            isHighlighted: highlightedIndex === index || selectedItem && selectedItem.id === item.id || false,
	            title: itemToElement ? item.text : itemToString(item)
	          }, itemProps), itemToElement ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends$b({
	            key: itemProps.id
	          }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React__default.createElement(Checkmark16, {
	            className: "".concat(prefix$X, "--list-box__menu-item__selected-icon")
	          }));
	        }))), helperText && !invalid && /*#__PURE__*/React__default.createElement("div", {
	          id: comboBoxHelperId,
	          className: helperClasses
	        }, helperText));
	      });
	    }
	  }]);

	  return ComboBox;
	}(React__default.Component);

	_defineProperty$e(ComboBox, "propTypes", {
	  /**
	   * 'aria-label' of the ListBox component.
	   */
	  ariaLabel: PropTypes.string,

	  /**
	   * An optional className to add to the container node
	   */
	  className: PropTypes.string,

	  /**
	   * Specify if the control should be disabled, or not
	   */
	  disabled: PropTypes.bool,

	  /**
	   * Specify a custom `id` for the input
	   */
	  id: PropTypes.string.isRequired,

	  /**
	   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)
	   * from their collection that are pre-selected
	   */
	  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),

	  /**
	   * We try to stay as generic as possible here to allow individuals to pass
	   * in a collection of whatever kind of data structure they prefer
	   */
	  items: PropTypes.array.isRequired,

	  /**
	   * Helper function passed to downshift that allows the library to render a
	   * given item to a string label. By default, it extracts the `label` field
	   * from a given item to serve as the item label in the list
	   */
	  itemToString: PropTypes.func,

	  /**
	   * Optional function to render items as custom components instead of strings.
	   * Defaults to null and is overriden by a getter
	   */
	  itemToElement: PropTypes.func,

	  /**
	   * `onChange` is a utility for this controlled component to communicate to a
	   * consuming component when a specific dropdown item is selected.
	   * @param {{ selectedItem }}
	   */
	  onChange: PropTypes.func.isRequired,

	  /**
	   * Used to provide a placeholder text node before a user enters any input.
	   * This is only present if the control has no items selected
	   */
	  placeholder: PropTypes.string.isRequired,

	  /**
	   * Specify your own filtering logic by passing in a `shouldFilterItem`
	   * function that takes in the current input and an item and passes back
	   * whether or not the item should be filtered.
	   */
	  shouldFilterItem: PropTypes.func,

	  /**
	   * Specify if the currently selected value is invalid.
	   */
	  invalid: PropTypes.bool,

	  /**
	   * Message which is displayed if the value is invalid.
	   */
	  invalidText: PropTypes.string,

	  /**
	   * For full control of the selection
	   */
	  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),

	  /**
	   * Specify a custom translation function that takes in a message identifier
	   * and returns the localized string for the message
	   */
	  translateWithId: PropTypes.func,

	  /**
	   * Currently supports either the default type, or an inline variant
	   */
	  type: ListBoxType,

	  /**
	   * Specify the size of the ListBox. Currently supports either `sm`, `lg` or `xl` as an option.
	   */
	  size: ListBoxSize,

	  /**
	   * Callback function to notify consumer when the text input changes.
	   * This provides support to change available items based on the text.
	   * @param {string} inputText
	   */
	  onInputChange: PropTypes.func,

	  /**
	   * should use "light theme" (white background)?
	   */
	  light: PropTypes.bool,

	  /**
	   * Additional props passed to Downshift
	   */
	  downshiftProps: PropTypes.shape(Downshift.propTypes),

	  /**
	   * Specify the direction of the combobox dropdown. Can be either top or bottom.
	   */
	  direction: PropTypes.oneOf(['top', 'bottom']),
	  titleText: PropTypes.string,
	  helperText: PropTypes.string
	});

	_defineProperty$e(ComboBox, "defaultProps", {
	  disabled: false,
	  itemToString: defaultItemToString,
	  itemToElement: null,
	  shouldFilterItem: defaultShouldFilterItem,
	  type: 'default',
	  ariaLabel: 'Choose an item',
	  light: false,
	  direction: 'bottom'
	});

	var stablePrefix$H = settings$1.stablePrefix;
	var prefix$Y = settings_1.prefix;
	/**
	 * Footer language selector component.
	 */

	var LanguageSelector = function LanguageSelector(_ref) {
	  var items = _ref.items,
	      initialSelectedItem = _ref.initialSelectedItem,
	      callback = _ref.callback;

	  var _useClickOutside = useClickOutside(),
	      ref = _useClickOutside.ref;

	  var _useState = React.useState(initialSelectedItem || items[0]),
	      _useState2 = slicedToArray(_useState, 2),
	      selectedItem = _useState2[0],
	      setSelectedItem = _useState2[1];

	  var _useState3 = React.useState(initialSelectedItem || items[0]),
	      _useState4 = slicedToArray(_useState3, 2),
	      lastSelectedItem = _useState4[0],
	      setLastSelectedItem = _useState4[1];
	  /**
	   * Sets the selected item and then runs the callback function
	   *
	   * @param {object} selectedItem Selected item object
	   * @private
	   */


	  function _setSelectedItem(selectedItem) {
	    setSelectedItem(selectedItem);
	    callback(selectedItem);

	    if (selectedItem !== null) {
	      setLastSelectedItem(selectedItem);
	    }
	  }
	  /**
	   * Identifies the click outisde the language selector and resets its value to the previously selected
	   */


	  function useClickOutside() {
	    var ref = React.useRef(null);

	    var handleClickOutside = function handleClickOutside(event) {
	      if (ref.current && !ref.current.contains(event.target)) {
	        setSelectedItem(lastSelectedItem);
	      }
	    };

	    React.useEffect(function () {
	      lib.document.addEventListener('click', handleClickOutside, true);
	      return function () {
	        lib.document.removeEventListener('click', handleClickOutside, true);
	      };
	    });
	    return {
	      ref: ref
	    };
	  }

	  return React__default.createElement("div", {
	    className: "".concat(prefix$Y, "--language-selector__container"),
	    ref: ref
	  }, React__default.createElement(ComboBox, {
	    id: "dds-language-selector",
	    "data-autoid": "".concat(stablePrefix$H, "--language-selector"),
	    className: "".concat(prefix$Y, "--language-selector"),
	    onChange: function onChange(_ref2) {
	      var selectedItem = _ref2.selectedItem;
	      return _setSelectedItem(selectedItem);
	    },
	    items: items,
	    itemToString: function itemToString(item) {
	      return item ? item.text : '';
	    },
	    initialSelectedItem: initialSelectedItem,
	    selectedItem: selectedItem,
	    direction: "top",
	    placeholder: ""
	  }));
	};

	LanguageSelector.propTypes = {
	  /**
	   * Array of items to pass into ComboBox.
	   */
	  items: PropTypes.arrayOf(PropTypes.shape({
	    id: PropTypes.string,
	    text: PropTypes.string
	  })),

	  /**
	   * Initial selected item for the ComboBox.
	   */
	  initialSelectedItem: PropTypes.shape({
	    id: PropTypes.string,
	    text: PropTypes.string
	  }),

	  /**
	   * Callback function when an item is selected.
	   */
	  callback: PropTypes.func
	};
	LanguageSelector.defaultProps = {
	  items: null,
	  initialSelectedItem: null,
	  callback: function callback() {}
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$I = settings$1.stablePrefix;
	var prefix$Z = settings_1.prefix;
	/**
	 * Placeholder <li/> element for injection of the TrustE cookie preferences link
	 *
	 * @param {number} key - the key for the JSX object
	 * @returns {*} JSX object
	 */

	var renderTrusteItem = function renderTrusteItem(key) {
	  return React__default.createElement("li", {
	    className: "".concat(prefix$Z, "--legal-nav__list-item"),
	    "data-autoid": "".concat(stablePrefix$I, "--privacy-cp"),
	    key: key
	  });
	};
	/**
	 * Footer legal nav component.
	 */


	var LegalNav = function LegalNav(_ref) {
	  var links = _ref.links;

	  if (!links || !links.length) {
	    return null;
	  }

	  return React__default.createElement("aside", {
	    "data-autoid": "".concat(stablePrefix$I, "--footer-legal-nav"),
	    className: "".concat(prefix$Z, "--legal-nav__container")
	  }, React__default.createElement("nav", {
	    className: "".concat(prefix$Z, "--legal-nav")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$Z, "--legal-nav__list")
	  }, renderListItems$1(links))));
	};
	/**
	 * Loops through and renders list items for legal nav
	 *
	 * @param {Array} links A list of links to be rendered
	 * @returns {object} JSX object
	 */


	function renderListItems$1(links) {
	  var renderedLinks = links.map(function (_ref2, index) {
	    var title = _ref2.title,
	        url = _ref2.url;

	    if (!title || !url) {
	      return null;
	    }

	    return React__default.createElement("li", {
	      className: "".concat(prefix$Z, "--legal-nav__list-item"),
	      key: index
	    }, React__default.createElement(Link, {
	      "data-autoid": "".concat(stablePrefix$I, "--footer-legal-nav__link"),
	      className: "".concat(prefix$Z, "--footer__link"),
	      href: url
	    }, title));
	  });
	  var key = renderedLinks.length + 1;
	  renderedLinks.push(renderTrusteItem(key));
	  var chunked_arr = [];
	  var index = 0;

	  while (index < renderedLinks.length) {
	    chunked_arr.push(renderedLinks.slice(index, Math.ceil(renderedLinks.length / 3) + index));
	    index += Math.ceil(renderedLinks.length / 3);
	  }

	  return chunked_arr.map(function (elem, index) {
	    return React__default.createElement("ul", {
	      className: "".concat(prefix$Z, "--legal-nav__holder"),
	      key: index
	    }, elem);
	  });
	}

	LegalNav.propTypes = {
	  /**
	   * A list of links to be rendered.
	   */
	  links: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    url: PropTypes.string
	  }))
	};
	LegalNav.defaultProps = {
	  links: null
	};

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }
	}

	var arrayWithoutHoles = _arrayWithoutHoles;

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	var iterableToArray = _iterableToArray;

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	var nonIterableSpread = _nonIterableSpread;

	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
	}

	var toConsumableArray = _toConsumableArray;

	var bind = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);

	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    return fn.apply(thisArg, args);
	  };
	};

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
	var isBuffer = function isBuffer(obj) {
	  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
	};

	/*global toString:true*/
	// utils is a library of generic helper functions non-specific to axios


	var toString = Object.prototype.toString;
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */

	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */


	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */


	function isFormData(val) {
	  return typeof FormData !== 'undefined' && val instanceof FormData;
	}
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */


	function isArrayBufferView(val) {
	  var result;

	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
	  }

	  return result;
	}
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */


	function isString(val) {
	  return typeof val === 'string';
	}
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */


	function isNumber(val) {
	  return typeof val === 'number';
	}
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */


	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */


	function isObject(val) {
	  return val !== null && _typeof_1(val) === 'object';
	}
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */


	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */


	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */


	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */


	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */


	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */


	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */


	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */


	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
	    return false;
	  }

	  return typeof window !== 'undefined' && typeof document !== 'undefined';
	}
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */


	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  } // Force an array if not already something iterable


	  if (_typeof_1(obj) !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */


	function merge()
	/* obj1, obj2, obj3, ... */
	{
	  var result = {};

	  function assignValue(val, key) {
	    if (_typeof_1(result[key]) === 'object' && _typeof_1(val) === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }

	  return result;
	}
	/**
	 * Function equal to merge with the difference being that no reference
	 * to original objects is kept.
	 *
	 * @see merge
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */


	function deepMerge()
	/* obj1, obj2, obj3, ... */
	{
	  var result = {};

	  function assignValue(val, key) {
	    if (_typeof_1(result[key]) === 'object' && _typeof_1(val) === 'object') {
	      result[key] = deepMerge(result[key], val);
	    } else if (_typeof_1(val) === 'object') {
	      result[key] = deepMerge({}, val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }

	  return result;
	}
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */


	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	var utils = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  deepMerge: deepMerge,
	  extend: extend,
	  trim: trim
	};

	function encode(val) {
	  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
	}
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */


	var buildURL = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;

	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }

	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');

	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }

	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	function InterceptorManager() {
	  this.handlers = [];
	}
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */


	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */


	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */


	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */


	var transformData = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	  return data;
	};

	var isCancel = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

	var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */

	var enhanceError = function enhanceError(error, config, code, request, response) {
	  error.config = config;

	  if (code) {
	    error.code = code;
	  }

	  error.request = request;
	  error.response = response;
	  error.isAxiosError = true;

	  error.toJSON = function () {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: this.config,
	      code: this.code
	    };
	  };

	  return error;
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */


	var createError = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */


	var settle = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;

	  if (!validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
	  }
	};

	// c.f. https://nodejs.org/api/http.html#http_message_headers


	var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */

	var parseHeaders = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) {
	    return parsed;
	  }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }

	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });
	  return parsed;
	};

	var isURLSameOrigin = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	function standardBrowserEnv() {
	  var msie = /(msie|trident)/i.test(navigator.userAgent);
	  var urlParsingNode = document.createElement('a');
	  var originURL;
	  /**
	  * Parse a URL to discover it's components
	  *
	  * @param {String} url The URL to be parsed
	  * @returns {Object}
	  */

	  function resolveURL(url) {
	    var href = url;

	    if (msie) {
	      // IE needs attribute set twice to normalize properties
	      urlParsingNode.setAttribute('href', href);
	      href = urlParsingNode.href;
	    }

	    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

	    return {
	      href: urlParsingNode.href,
	      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	      host: urlParsingNode.host,
	      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	      hostname: urlParsingNode.hostname,
	      port: urlParsingNode.port,
	      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
	    };
	  }

	  originURL = resolveURL(window.location.href);
	  /**
	  * Determine if a URL shares the same origin as the current location
	  *
	  * @param {String} requestURL The URL to test
	  * @returns {boolean} True if URL shares the same origin, otherwise false
	  */

	  return function isURLSameOrigin(requestURL) {
	    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
	    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
	  };
	}() : // Non standard browser envs (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return function isURLSameOrigin() {
	    return true;
	  };
	}();

	var cookies = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
	function standardBrowserEnv() {
	  return {
	    write: function write(name, value, expires, path, domain, secure) {
	      var cookie = [];
	      cookie.push(name + '=' + encodeURIComponent(value));

	      if (utils.isNumber(expires)) {
	        cookie.push('expires=' + new Date(expires).toGMTString());
	      }

	      if (utils.isString(path)) {
	        cookie.push('path=' + path);
	      }

	      if (utils.isString(domain)) {
	        cookie.push('domain=' + domain);
	      }

	      if (secure === true) {
	        cookie.push('secure');
	      }

	      document.cookie = cookie.join('; ');
	    },
	    read: function read(name) {
	      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	      return match ? decodeURIComponent(match[3]) : null;
	    },
	    remove: function remove(name) {
	      this.write(name, '', Date.now() - 86400000);
	    }
	  };
	}() : // Non standard browser env (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return {
	    write: function write() {},
	    read: function read() {
	      return null;
	    },
	    remove: function remove() {}
	  };
	}();

	var xhr = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest(); // HTTP basic authentication

	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true); // Set the request timeout in MS

	    request.timeout = config.timeout; // Listen for ready state

	    request.onreadystatechange = function handleLoad() {
	      if (!request || request.readyState !== 4) {
	        return;
	      } // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request


	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      } // Prepare the response


	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	      settle(resolve, reject, response); // Clean up request

	      request = null;
	    }; // Handle browser request cancellation (as opposed to a manual cancellation)


	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

	      request = null;
	    }; // Handle low level network errors


	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request)); // Clean up request

	      request = null;
	    }; // Handle timeout


	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request)); // Clean up request

	      request = null;
	    }; // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.


	    if (utils.isStandardBrowserEnv()) {
	      var cookies$1 = cookies; // Add xsrf header

	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies$1.read(config.xsrfCookieName) : undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    } // Add headers to the request


	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    } // Add withCredentials to request if needed


	    if (config.withCredentials) {
	      request.withCredentials = true;
	    } // Add responseType to request if needed


	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    } // Handle progress if needed


	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    } // Not all browsers support upload events


	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel); // Clean up request

	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    } // Send the request


	    request.send(requestData);
	  });
	};

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter; // Only Node.JS has a process variable that is of [[Class]] process

	  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
	    // For node use HTTP adapter
	    adapter = xhr;
	  } else if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = xhr;
	  }

	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Accept');
	    normalizeHeaderName(headers, 'Content-Type');

	    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
	      return data;
	    }

	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }

	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }

	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }

	    return data;
	  }],
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) {
	        /* Ignore */
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	  maxContentLength: -1,
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	var defaults_1 = defaults;

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */

	var isAbsoluteURL = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */

	var combineURLs = function combineURLs(baseURL, relativeURL) {
	  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
	};

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */


	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */


	var dispatchRequest = function dispatchRequest(config) {
	  throwIfCancellationRequested(config); // Support baseURL config

	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  } // Ensure headers exist


	  config.headers = config.headers || {}; // Transform request data

	  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

	  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
	  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
	    delete config.headers[method];
	  });
	  var adapter = config.adapter || defaults_1.adapter;
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config); // Transform response data

	    response.data = transformData(response.data, response.headers, config.transformResponse);
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config); // Transform response data

	      if (reason && reason.response) {
	        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
	      }
	    }

	    return Promise.reject(reason);
	  });
	};

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */


	var mergeConfig = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};
	  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
	    if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    }
	  });
	  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
	    if (utils.isObject(config2[prop])) {
	      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
	    } else if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    } else if (utils.isObject(config1[prop])) {
	      config[prop] = utils.deepMerge(config1[prop]);
	    } else if (typeof config1[prop] !== 'undefined') {
	      config[prop] = config1[prop];
	    }
	  });
	  utils.forEach(['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'], function defaultToConfig2(prop) {
	    if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    } else if (typeof config1[prop] !== 'undefined') {
	      config[prop] = config1[prop];
	    }
	  });
	  return config;
	};

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */


	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager_1(),
	    response: new InterceptorManager_1()
	  };
	}
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */


	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = arguments[1] || {};
	    config.url = arguments[0];
	  } else {
	    config = config || {};
	  }

	  config = mergeConfig(this.defaults, config);
	  config.method = config.method ? config.method.toLowerCase() : 'get'; // Hook up interceptors middleware

	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	Axios.prototype.getUri = function getUri(config) {
	  config = mergeConfig(this.defaults, config);
	  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
	}; // Provide aliases for supported request methods


	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function (url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function (url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	var Axios_1 = Axios;

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */

	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;
	var Cancel_1 = Cancel;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */


	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel_1(message);
	    resolvePromise(token.reason);
	  });
	}
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */


	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */


	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	var CancelToken_1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */

	var spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */


	function createInstance(defaultConfig) {
	  var context = new Axios_1(defaultConfig);
	  var instance = bind(Axios_1.prototype.request, context); // Copy axios.prototype to instance

	  utils.extend(instance, Axios_1.prototype, context); // Copy context to instance

	  utils.extend(instance, context);
	  return instance;
	} // Create the default instance to be exported


	var axios = createInstance(defaults_1); // Expose Axios class to allow class inheritance

	axios.Axios = Axios_1; // Factory for creating new instances

	axios.create = function create(instanceConfig) {
	  return createInstance(mergeConfig(axios.defaults, instanceConfig));
	}; // Expose Cancel & CancelToken


	axios.Cancel = Cancel_1;
	axios.CancelToken = CancelToken_1;
	axios.isCancel = isCancel; // Expose all/spread

	axios.all = function all(promises) {
	  return Promise.all(promises);
	};

	axios.spread = spread;
	var axios_1 = axios; // Allow use of default import syntax in TypeScript

	var default_1 = axios;
	axios_1.default = default_1;

	var axios$1 = axios_1;

	function asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$1(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	var _endpoint = process && process.env.GEO_API || 'https://api.www.s81c.com/webmaster/dbip/';
	/**
	 * Utility to retrieve user's country code based on their IP address
	 *
	 * @example
	 * import { geolocation } from '@carbon/ibmdotcom-utilities';
	 *
	 * const locationInfo = await geolocation();
	 *
	 * @returns {string} country cc (cc)
	 *
	 */


	function geolocation() {
	  return _geolocation.apply(this, arguments);
	}

	function _geolocation() {
	  _geolocation = _asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee() {
	    var location, cc;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return axios$1.get(_endpoint, {
	              headers: {
	                'Content-Type': 'application/json; charset=utf-8'
	              }
	            }).then(function (response) {
	              return response.data;
	            });

	          case 2:
	            location = _context.sent;
	            cc = location && location.country;
	            return _context.abrupt("return", cc);

	          case 5:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _geolocation.apply(this, arguments);
	}

	var js_cookie = createCommonjsModule(function (module, exports) {

	  (function (factory) {
	    var registeredInModuleLoader;

	    {
	      module.exports = factory();
	      registeredInModuleLoader = true;
	    }

	    if (!registeredInModuleLoader) {
	      var OldCookies = window.Cookies;
	      var api = window.Cookies = factory();

	      api.noConflict = function () {
	        window.Cookies = OldCookies;
	        return api;
	      };
	    }
	  })(function () {
	    function extend() {
	      var i = 0;
	      var result = {};

	      for (; i < arguments.length; i++) {
	        var attributes = arguments[i];

	        for (var key in attributes) {
	          result[key] = attributes[key];
	        }
	      }

	      return result;
	    }

	    function decode(s) {
	      return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	    }

	    function init(converter) {
	      function api() {}

	      function set(key, value, attributes) {
	        if (typeof document === 'undefined') {
	          return;
	        }

	        attributes = extend({
	          path: '/'
	        }, api.defaults, attributes);

	        if (typeof attributes.expires === 'number') {
	          attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
	        } // We're using "expires" because "max-age" is not supported by IE


	        attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

	        try {
	          var result = JSON.stringify(value);

	          if (/^[\{\[]/.test(result)) {
	            value = result;
	          }
	        } catch (e) {}

	        value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
	        key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
	        var stringifiedAttributes = '';

	        for (var attributeName in attributes) {
	          if (!attributes[attributeName]) {
	            continue;
	          }

	          stringifiedAttributes += '; ' + attributeName;

	          if (attributes[attributeName] === true) {
	            continue;
	          } // Considers RFC 6265 section 5.2:
	          // ...
	          // 3.  If the remaining unparsed-attributes contains a %x3B (";")
	          //     character:
	          // Consume the characters of the unparsed-attributes up to,
	          // not including, the first %x3B (";") character.
	          // ...


	          stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
	        }

	        return document.cookie = key + '=' + value + stringifiedAttributes;
	      }

	      function get(key, json) {
	        if (typeof document === 'undefined') {
	          return;
	        }

	        var jar = {}; // To prevent the for loop in the first place assign an empty array
	        // in case there are no cookies at all.

	        var cookies = document.cookie ? document.cookie.split('; ') : [];
	        var i = 0;

	        for (; i < cookies.length; i++) {
	          var parts = cookies[i].split('=');
	          var cookie = parts.slice(1).join('=');

	          if (!json && cookie.charAt(0) === '"') {
	            cookie = cookie.slice(1, -1);
	          }

	          try {
	            var name = decode(parts[0]);
	            cookie = (converter.read || converter)(cookie, name) || decode(cookie);

	            if (json) {
	              try {
	                cookie = JSON.parse(cookie);
	              } catch (e) {}
	            }

	            jar[name] = cookie;

	            if (key === name) {
	              break;
	            }
	          } catch (e) {}
	        }

	        return key ? jar[key] : jar;
	      }

	      api.set = set;

	      api.get = function (key) {
	        return get(key, false
	        /* read as raw */
	        );
	      };

	      api.getJSON = function (key) {
	        return get(key, true
	        /* read as json */
	        );
	      };

	      api.remove = function (key, attributes) {
	        set(key, '', extend(attributes, {
	          expires: -1
	        }));
	      };

	      api.defaults = {};
	      api.withConverter = init;
	      return api;
	    }

	    return init(function () {});
	  });
	});

	function _classCallCheck$4(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$4(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$4(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$4(Constructor, staticProps);
	  return Constructor;
	}
	/**
	 * Name of cookie needed to grab cc and lc
	 *
	 * @type {string}
	 * @private
	 */

	var _cookieName = 'ipcInfo';
	/**
	 * Utility to set and get the ipcInfo cookie needed to determine country and language code
	 */

	var ipcinfoCookie = /*#__PURE__*/function () {
	  function ipcinfoCookie() {
	    _classCallCheck$4(this, ipcinfoCookie);
	  }

	  _createClass$4(ipcinfoCookie, null, [{
	    key: "get",

	    /**
	     * retreive the ipcInfo cookie that contains the cc and lc
	     * decodes and converts to object
	     *
	     * @example
	     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';
	     *
	     * const info = ipcinfoCookie.get();
	     *
	     *
	     * @returns {object} object containing cc and lc
	     */
	    value: function get() {
	      var ipcinfo = js_cookie.get(_cookieName);

	      if (ipcinfo) {
	        var cc;
	        var lc;
	        var info = decodeURIComponent(ipcinfo).split(';');
	        info.map(function (code) {
	          var itemParts = code.split('=');
	          if (itemParts[0] === 'cc') cc = itemParts[1];
	          if (itemParts[0] === 'lc') lc = itemParts[1];
	        });
	        return {
	          cc: cc,
	          lc: lc
	        };
	      }
	    }
	    /**
	     * set the ipcInfo cookie with expiration of a year
	     * takes care of converting to string and encoding
	     *
	     * @param {object} params params object
	     * @param {string} params.cc country code
	     * @param {string} params.lc language code
	     *
	     * @example
	     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';
	     *
	     * const locale = {cc: 'us', lc: 'en'}
	     * ipcinfoCookie.set(locale);
	     *
	     */

	  }, {
	    key: "set",
	    value: function set(_ref) {
	      var cc = _ref.cc,
	          lc = _ref.lc;
	      var info = "cc=".concat(cc, ";lc=").concat(lc);
	      js_cookie.set(_cookieName, encodeURIComponent(info), {
	        expires: 365
	      }, {
	        secure: true
	      });
	    }
	  }]);

	  return ipcinfoCookie;
	}();

	var _root$location;
	/**
	 * @constant {string | string} Host for the Locale API call
	 * @private
	 */

	var _host = process && (process.env.REACT_APP_TRANSLATION_HOST || process.env.TRANSLATION_HOST) || 'https://www.ibm.com';
	/**
	 * @constant {string | string} CORS proxy for lower environment calls
	 * @private
	 */


	var _proxy = ((_root$location = lib.location) === null || _root$location === void 0 ? void 0 : _root$location.host) === 'www.ibm.com' ? '' : // Optional chaining operator in `process.env.ENVVAR` does not work in some build systems, notably Parcel
	process && (process.env.REACT_APP_CORS_PROXY || process.env.CORS_PROXY) || '';
	/**
	 * Sets the default location if nothing is returned
	 *
	 * @type {object}
	 * @private
	 */


	var _localeDefault = {
	  lc: 'en',
	  cc: 'us'
	};
	/**
	 * Default display name for lang combination
	 *
	 * @type {string}
	 * @private
	 */

	var _localeNameDefault = 'United States — English';
	/**
	 * Locale API endpoint
	 *
	 * @type {string}
	 * @private
	 */

	var _endpoint$1 = "".concat(_proxy).concat(_host, "/common/js/dynamicnav/www/countrylist/jsononly");
	/**
	 * Tracking of the country list fetch
	 *
	 * @type {{}}
	 * @private
	 */


	var _listFetch = {};
	/**
	 * Number of times to retry the fetch before failing
	 *
	 * @type {number}
	 * @private
	 */

	var _timeoutRetries$2 = 50;
	/**
	 * Tracks the number of attempts for the fetch
	 *
	 * @type {number}
	 * @private
	 */

	var _attempt$1 = 0;
	/**
	 * Configuration for axios
	 *
	 * @type {{headers: {'Content-Type': string}}}
	 * @private
	 */

	var _axiosConfig = {
	  headers: {
	    'Content-Type': 'application/json; charset=utf-8'
	  }
	};
	/**
	 * Session Storage key for country list
	 *
	 * @type {string}
	 * @private
	 */

	var _sessionListKey = 'dds-countrylist';
	/**
	 * Use the <html> lang attr to determine a return locale object
	 *
	 * @type {object}
	 * @private
	 */

	var _getLocaleByLangAttr = function _getLocaleByLangAttr() {
	  if (lib.document.documentElement.lang) {
	    var lang = lib.document.documentElement.lang.toLowerCase();

	    if (lang.indexOf('-') === -1) {
	      return _localeDefault;
	    } else {
	      var codes = lang.split('-');
	      return {
	        cc: codes[1],
	        lc: codes[0]
	      };
	    }
	  } else {
	    return _localeDefault;
	  }
	};
	/**
	 * The cache for in-flight or resolved requests for the country list, keyed by the initiating locale.
	 *
	 * @type {object<string, LocaleList>}
	 */


	var _requestsList = {};
	/**
	 * Return a locale object based on the DDO API, or "false"
	 * so the consumer can decide what to do next
	 *
	 * @type {(object | boolean)}
	 * @private
	 */

	function _getLocaleFromDDO() {
	  return _getLocaleFromDDO2.apply(this, arguments);
	}
	/**
	 * Locale API class with method of fetching user's locale for
	 * ibm.com
	 */


	function _getLocaleFromDDO2() {
	  _getLocaleFromDDO2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
	    var ddoLocal, pageInfoIBM;
	    return regenerator.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return DDOAPI.getAll();

	          case 2:
	            ddoLocal = _context5.sent;

	            if (!(ddoLocal && ddoLocal.page && ddoLocal.page.pageInfo)) {
	              _context5.next = 10;
	              break;
	            }

	            pageInfoIBM = ddoLocal.page.pageInfo.ibm; // Set proper LC for us to use.

	            if (ddoLocal.page.pageInfo.language) {
	              pageInfoIBM.lc = ddoLocal.page.pageInfo.language.substring(0, 2).toLowerCase();
	            }

	            if (pageInfoIBM) {
	              // Set proper CC for us to use.
	              if (pageInfoIBM.country) {
	                pageInfoIBM.cc = pageInfoIBM.country.toLowerCase().trim(); // If there are multiple countries use just the first one for the CC value

	                if (pageInfoIBM.cc.indexOf(',') > -1) pageInfoIBM.cc = pageInfoIBM.cc.substring(0, pageInfoIBM.cc.indexOf(',')).trim(); // Gb will be uk elsewhere

	                if (pageInfoIBM.cc === 'gb') pageInfoIBM.cc = 'uk'; // Map worldwide (ZZ) pages to US

	                if (pageInfoIBM.cc === 'zz') pageInfoIBM.cc = 'us';
	              }
	            }

	            if (!(!pageInfoIBM.lc || !pageInfoIBM.cc)) {
	              _context5.next = 9;
	              break;
	            }

	            return _context5.abrupt("return", false);

	          case 9:
	            return _context5.abrupt("return", {
	              cc: pageInfoIBM.cc,
	              lc: pageInfoIBM.lc
	            });

	          case 10:
	            return _context5.abrupt("return", false);

	          case 11:
	          case "end":
	            return _context5.stop();
	        }
	      }
	    }, _callee5);
	  }));
	  return _getLocaleFromDDO2.apply(this, arguments);
	}

	var LocaleAPI = /*#__PURE__*/function () {
	  function LocaleAPI() {
	    classCallCheck(this, LocaleAPI);
	  }

	  createClass(LocaleAPI, null, [{
	    key: "clearCache",

	    /**
	     * Clears the cache.
	     */
	    value: function clearCache() {
	      Object.keys(_requestsList).forEach(function (key) {
	        return delete _requestsList[key];
	      });

	      for (var i = 0; i < sessionStorage.length; ++i) {
	        var key = sessionStorage.key(i);

	        if (key.indexOf(_sessionListKey) === 0) {
	          sessionStorage.removeItem(key);
	        }
	      }
	    }
	    /**
	     * Gets the user's locale
	     *
	     * Grab the locale from the `lang` attribute from html, else
	     * check if ipcinfo cookie exists (ipcinfoCookie util)
	     * if not, retrieve the user's locale through geolocation util + gets user's
	     * browser language preference then set the cookie
	     *
	     * @returns {object} object with lc and cc
	     *
	     * @example
	     * import { LocaleAPI } from '@carbon/ibmdotcom-services';
	     *
	     * async function getLocale() {
	     *   const locale = await LocaleAPI.getLocale();
	     *   return locale;
	     * }
	     */

	  }, {
	    key: "getLocale",
	    value: function () {
	      var _getLocale = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	        var cookie, lang, cc, _lang, lc, list, verifiedCodes;

	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                cookie = ipcinfoCookie.get();
	                _context.next = 3;
	                return this.getLang();

	              case 3:
	                lang = _context.sent;

	                if (!lang) {
	                  _context.next = 10;
	                  break;
	                }

	                _context.next = 7;
	                return this.getList(lang);

	              case 7:
	                return _context.abrupt("return", lang);

	              case 10:
	                if (!(cookie && cookie.cc && cookie.lc)) {
	                  _context.next = 16;
	                  break;
	                }

	                _context.next = 13;
	                return this.getList(cookie);

	              case 13:
	                return _context.abrupt("return", cookie);

	              case 16:
	                _context.next = 18;
	                return geolocation();

	              case 18:
	                cc = _context.sent;
	                /**
	                 * get language preference from browser
	                 * can return in either 'en-US' format or 'en' so will need to extract language only
	                 */

	                _lang = lib.navigator.language;
	                lc = _lang.split('-')[0];

	                if (!(cc && lc)) {
	                  _context.next = 28;
	                  break;
	                }

	                _context.next = 24;
	                return this.getList({
	                  cc: cc,
	                  lc: lc
	                });

	              case 24:
	                list = _context.sent;
	                verifiedCodes = this.verifyLocale(cc, lc, list); // set the ipcInfo cookie

	                ipcinfoCookie.set(verifiedCodes);
	                return _context.abrupt("return", verifiedCodes);

	              case 28:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getLocale() {
	        return _getLocale.apply(this, arguments);
	      }

	      return getLocale;
	    }()
	    /**
	     * Checks for DDO object to return the correct cc and lc
	     * Otherwise gets those values from the <html> lang attribute
	     *
	     * @returns {object} locale object
	     *
	     * @example
	     * import { LocaleAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function async getLocale() {
	     *    const locale = await LocaleAPI.getLang();
	     * }
	     */

	  }, {
	    key: "getLang",
	    value: function () {
	      var _getLang = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	        var getLocaleFromDDO;
	        return regenerator.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return _getLocaleFromDDO();

	              case 2:
	                getLocaleFromDDO = _context2.sent;

	                if (!getLocaleFromDDO) {
	                  _context2.next = 7;
	                  break;
	                }

	                return _context2.abrupt("return", getLocaleFromDDO);

	              case 7:
	                return _context2.abrupt("return", _getLocaleByLangAttr());

	              case 8:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2);
	      }));

	      function getLang() {
	        return _getLang.apply(this, arguments);
	      }

	      return getLang;
	    }()
	    /**
	     * This fetches the language display name based on language/locale combo
	     *
	     * @param {object} langCode lang code with cc and lc
	     *
	     * @returns {Promise<string>} Display name of locale/language
	     */

	  }, {
	    key: "getLangDisplay",
	    value: function () {
	      var _getLangDisplay = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(langCode) {
	        var lang, list, countries, location;
	        return regenerator.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!langCode) {
	                  _context3.next = 4;
	                  break;
	                }

	                _context3.t0 = langCode;
	                _context3.next = 7;
	                break;

	              case 4:
	                _context3.next = 6;
	                return this.getLang();

	              case 6:
	                _context3.t0 = _context3.sent;

	              case 7:
	                lang = _context3.t0;
	                _context3.next = 10;
	                return this.getList(lang);

	              case 10:
	                list = _context3.sent; // combines the countryList arrays

	                countries = [];
	                list.regionList.forEach(function (region) {
	                  countries = countries.concat(region.countryList);
	                }); // get match for countries with multiple languages

	                location = countries.filter(function (country) {
	                  var htmlLang = country.locale.findIndex(function (loc) {
	                    return loc[0] === "".concat(lang.lc, "-").concat(lang.cc);
	                  });

	                  if (htmlLang !== -1) {
	                    var _country$locale;

	                    var localeMatch = country.locale.filter(function (l) {
	                      return l.includes("".concat(lang.lc, "-").concat(lang.cc));
	                    });

	                    (_country$locale = country.locale).splice.apply(_country$locale, [0, country.locale.length].concat(toConsumableArray(localeMatch)));

	                    return country;
	                  }
	                });

	                if (!location.length) {
	                  _context3.next = 18;
	                  break;
	                }

	                return _context3.abrupt("return", "".concat(location[0].name, " \u2014 ").concat(location[0].locale[0][1]));

	              case 18:
	                return _context3.abrupt("return", _localeNameDefault);

	              case 19:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getLangDisplay(_x) {
	        return _getLangDisplay.apply(this, arguments);
	      }

	      return getLangDisplay;
	    }()
	    /**
	     * Get the country list of all supported countries and their languages
	     * if not set in session storage
	     *
	     * @param {object} params params object
	     * @param {string} params.cc country code
	     * @param {string} params.lc language code
	     *
	     * @returns {Promise<any>} promise object
	     *
	     * @example
	     * import { LocaleAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function async getLocale() {
	     *    const list = await LocaleAPI.getList({ cc: 'us', lc: 'en' });
	     *    return list;
	     * }
	     */

	  }, {
	    key: "getList",
	    value: function () {
	      var _getList = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(_ref) {
	        var _this = this;

	        var cc, lc, key, cachedRequest;
	        return regenerator.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                cc = _ref.cc, lc = _ref.lc;
	                key = "".concat(lc, "-").concat(cc);
	                cachedRequest = _requestsList[key];

	                if (!cachedRequest) {
	                  _context4.next = 5;
	                  break;
	                }

	                return _context4.abrupt("return", cachedRequest);

	              case 5:
	                return _context4.abrupt("return", _requestsList[key] = new Promise(function (resolve, reject) {
	                  _this.fetchList(cc, lc, resolve, reject);
	                }));

	              case 6:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4);
	      }));

	      function getList(_x2) {
	        return _getList.apply(this, arguments);
	      }

	      return getList;
	    }()
	    /**
	     * Fetches the list data based on cc/lc combination
	     *
	     * @param {string} cc country code
	     * @param {string} lc language code
	     * @param {Function} resolve resolves the Promise
	     * @param {Function} reject rejects the promise
	     */

	  }, {
	    key: "fetchList",
	    value: function fetchList(cc, lc, resolve, reject) {
	      var _this2 = this;

	      var sessionList = JSON.parse(sessionStorage.getItem("".concat(_sessionListKey, "-").concat(cc, "-").concat(lc)));

	      if (sessionList) {
	        resolve(sessionList);
	      } else if (_listFetch["".concat(cc, "-").concat(lc)]) {
	        _attempt$1++;

	        if (_attempt$1 < _timeoutRetries$2) {
	          setTimeout(function () {
	            _this2.fetchList(cc, lc, resolve, reject);
	          }, 100);
	        } else {
	          reject();
	        }
	      } else {
	        var url = "".concat(_endpoint$1, "/").concat(cc).concat(lc, "-utf8.json");
	        _attempt$1 = 0;
	        _listFetch["".concat(cc, "-").concat(lc)] = true;
	        axios$1.get(url, _axiosConfig).then(function (response) {
	          sessionStorage.setItem("".concat(_sessionListKey, "-").concat(cc, "-").concat(lc), JSON.stringify(response.data));
	          _listFetch["".concat(cc, "-").concat(lc)] = false;
	          resolve(response.data);
	        }).catch(function () {
	          if (cc === _localeDefault.cc && lc === _localeDefault.lc) {
	            _listFetch["".concat(cc, "-").concat(lc)] = false;
	            reject();
	          } else {
	            _this2.fetchList(_localeDefault.cc, _localeDefault.lc, resolve, reject);
	          }
	        });
	      }
	    }
	    /**
	     * Verify that the cc and lc combo is in the list of
	     * supported cc-lc combos
	     *
	     * @param {string} cc country code
	     * @param {string} lc language code
	     * @param {object} list country list
	     *
	     * @returns {object} object with lc and cc
	     * @example
	     * import { LocaleAPI } from '@carbon/ibmdotcom-services';
	     *
	     * async function getLocale() {
	     *   const locale = await LocaleAPI.verifyLocale(cc, lc, data);
	     *   return locale;
	     * }
	     */

	  }, {
	    key: "verifyLocale",
	    value: function verifyLocale(cc, lc, list) {
	      var priorityLC;
	      var locale;
	      var language = list && list.regionList.forEach(function (region) {
	        return region.countryList.forEach(function (country) {
	          var code = country.locale[0][0].split('-');
	          var countryCode = code[1];
	          var languageCode = code[0];

	          if (countryCode === cc && languageCode === lc) {
	            locale = {
	              cc: cc,
	              lc: lc
	            };
	          } // save the priority language associated with the user's country code
	          else if (countryCode === cc && !priorityLC) {
	              priorityLC = languageCode;
	            }
	        });
	      });

	      if (!language && priorityLC) {
	        locale = {
	          cc: cc,
	          lc: priorityLC
	        };
	      }

	      return locale;
	    }
	  }]);

	  return LocaleAPI;
	}();

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$e =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M16,2A14,14,0,1,0,30,16,14.0158,14.0158,0,0,0,16,2ZM4.02,16.394l1.3384.4458L7,19.3027v1.2831a1,1,0,0,0,.2929.7071L10,24v2.3765A11.9941,11.9941,0,0,1,4.02,16.394ZM16,28a11.9682,11.9682,0,0,1-2.5718-.2847L14,26l1.8046-4.5116a1,1,0,0,0-.0964-.9261l-1.4113-2.117A1,1,0,0,0,13.4648,18h-4.93L7.2866,16.1274,9.4141,14H11v2h2V13.2656l3.8682-6.7695-1.7364-.9922L14.2769,7H11.5352l-1.086-1.6289A11.861,11.861,0,0,1,20,4.7V8a1,1,0,0,0,1,1h1.4648a1,1,0,0,0,.8321-.4453l.8769-1.3154A12.0331,12.0331,0,0,1,26.8945,11H22.82a1,1,0,0,0-.9806.8039l-.7221,4.4708a1,1,0,0,0,.54,1.0539L25,19l.6851,4.0557A11.9793,11.9793,0,0,1,16,28Z"
	});

	var EarthFilled20 = /*#__PURE__*/React__default.forwardRef(function EarthFilled20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$e, children);
	});

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	/**
	 * Utility to grab all alternative languages on the page. this scrapes the page
	 * of all <link rel="alternate" hreflang="" href="" /> elements and returns
	 * as a readable object
	 *
	 * @example
	 * import { altlangs } from '@carbon/ibmdotcom-utilities';
	 *
	 * const langs = altlangs();
	 *
	 * console.log(langs); // { 'us-en': 'https://www.ibm.com/us-en', ... }
	 *
	 * @returns {object} object of available languages and corresponding URLs
	 *
	 */

	function altlangs() {
	  var links = [];
	  var langs = {};

	  if (lib.document) {
	    links = lib.document.querySelectorAll('link[rel="alternate"]');
	    links.forEach(function (link) {
	      langs[link.getAttribute('hreflang')] = link.getAttribute('href');
	    });
	  }

	  return langs;
	}

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$f =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M16,2A14,14,0,1,0,30,16,14.0158,14.0158,0,0,0,16,2ZM4.02,16.394l1.3384.4458L7,19.3027v1.2831a1,1,0,0,0,.2929.7071L10,24v2.3765A11.9941,11.9941,0,0,1,4.02,16.394ZM16,28a11.9682,11.9682,0,0,1-2.5718-.2847L14,26l1.8046-4.5116a1,1,0,0,0-.0964-.9261l-1.4113-2.117A1,1,0,0,0,13.4648,18h-4.93L7.2866,16.1274,9.4141,14H11v2h2V13.2656l3.8682-6.7695-1.7364-.9922L14.2769,7H11.5352l-1.086-1.6289A11.861,11.861,0,0,1,20,4.7V8a1,1,0,0,0,1,1h1.4648a1,1,0,0,0,.8321-.4453l.8769-1.3154A12.0331,12.0331,0,0,1,26.8945,11H22.82a1,1,0,0,0-.9806.8039l-.7221,4.4708a1,1,0,0,0,.54,1.0539L25,19l.6851,4.0557A11.9793,11.9793,0,0,1,16,28Z"
	});

	var EarthFilled16 = /*#__PURE__*/React__default.forwardRef(function EarthFilled16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$f, children);
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$g =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M15,14.3L10.7,10c1.9-2.3,1.6-5.8-0.7-7.7S4.2,0.7,2.3,3S0.7,8.8,3,10.7c2,1.7,5,1.7,7,0l4.3,4.3L15,14.3z M2,6.5\tC2,4,4,2,6.5,2S11,4,11,6.5S9,11,6.5,11S2,9,2,6.5z"
	});

	var Search16 = /*#__PURE__*/React__default.forwardRef(function Search16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$g, children);
	});

	function _typeof$3(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$3 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$3 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$3(obj);
	}

	function _extends$c() {
	  _extends$c = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$c.apply(this, arguments);
	}

	function _objectWithoutProperties$e(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$f(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$f(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _classCallCheck$5(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$5(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$5(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$5(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$5(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$3(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$3(subClass, superClass);
	}

	function _setPrototypeOf$3(o, p) {
	  _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$3(o, p);
	}

	function _createSuper$3(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$3(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$3(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$3(this, result);
	  };
	}

	function _possibleConstructorReturn$3(self, call) {
	  if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$4(self);
	}

	function _assertThisInitialized$4(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$3() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$3(o) {
	  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$3(o);
	}

	function _defineProperty$f(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$_ = settings_1.prefix;

	var Search = /*#__PURE__*/function (_Component) {
	  _inherits$3(Search, _Component);

	  var _super = _createSuper$3(Search);

	  function Search() {
	    var _this;

	    _classCallCheck$5(this, Search);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _super.call.apply(_super, [this].concat(args));

	    _defineProperty$f(_assertThisInitialized$4(_this), "state", {
	      hasContent: _this.props.value || _this.props.defaultValue || false,
	      prevValue: _this.props.value
	    });

	    _defineProperty$f(_assertThisInitialized$4(_this), "clearInput", function (evt) {
	      if (!_this.props.value) {
	        _this.input.value = '';

	        _this.props.onChange(evt);
	      } else {
	        var clearedEvt = Object.assign({}, evt.target, {
	          target: {
	            value: ''
	          }
	        });

	        _this.props.onChange(clearedEvt);
	      }

	      _this.setState({
	        hasContent: false
	      }, function () {
	        return _this.input.focus();
	      });
	    });

	    _defineProperty$f(_assertThisInitialized$4(_this), "handleChange", function (evt) {
	      _this.setState({
	        hasContent: evt.target.value !== ''
	      });

	      _this.props.onChange(evt);
	    });

	    return _this;
	  }

	  _createClass$5(Search, [{
	    key: "render",
	    value: function render() {
	      var _classNames,
	          _classNames2,
	          _this2 = this;

	      var _this$props = this.props,
	          className = _this$props.className,
	          type = _this$props.type,
	          _this$props$id = _this$props.id,
	          id = _this$props$id === void 0 ? this._inputId = this._inputId || "search__input__id_".concat(Math.random().toString(36).substr(2)) : _this$props$id,
	          placeHolderText = _this$props.placeHolderText,
	          labelText = _this$props.labelText,
	          closeButtonLabelText = _this$props.closeButtonLabelText,
	          small = _this$props.small,
	          _this$props$size = _this$props.size,
	          size = _this$props$size === void 0 ? !small ? 'xl' : 'sm' : _this$props$size,
	          light = _this$props.light,
	          other = _objectWithoutProperties$e(_this$props, ["className", "type", "id", "placeHolderText", "labelText", "closeButtonLabelText", "small", "size", "light"]);

	      var hasContent = this.state.hasContent;
	      var searchClasses = cx((_classNames = {}, _defineProperty$f(_classNames, "".concat(prefix$_, "--search"), true), _defineProperty$f(_classNames, "".concat(prefix$_, "--search--").concat(size), size), _defineProperty$f(_classNames, "".concat(prefix$_, "--search--light"), light), _defineProperty$f(_classNames, className, className), _classNames));
	      var clearClasses = cx((_classNames2 = {}, _defineProperty$f(_classNames2, "".concat(prefix$_, "--search-close"), true), _defineProperty$f(_classNames2, "".concat(prefix$_, "--search-close--hidden"), !hasContent), _classNames2));
	      var searchId = "".concat(id, "-search");
	      return /*#__PURE__*/React__default.createElement("div", {
	        role: "search",
	        "aria-labelledby": searchId,
	        className: searchClasses
	      }, /*#__PURE__*/React__default.createElement(Search16, {
	        className: "".concat(prefix$_, "--search-magnifier")
	      }), /*#__PURE__*/React__default.createElement("label", {
	        id: searchId,
	        htmlFor: id,
	        className: "".concat(prefix$_, "--label")
	      }, labelText), /*#__PURE__*/React__default.createElement("input", _extends$c({
	        role: "searchbox",
	        autoComplete: "off"
	      }, other, {
	        type: type,
	        className: "".concat(prefix$_, "--search-input"),
	        id: id,
	        placeholder: placeHolderText,
	        onChange: this.handleChange,
	        ref: function ref(input) {
	          _this2.input = input;
	        }
	      })), /*#__PURE__*/React__default.createElement("button", {
	        className: clearClasses,
	        onClick: this.clearInput,
	        type: "button",
	        "aria-label": closeButtonLabelText
	      }, /*#__PURE__*/React__default.createElement(Close16, null)));
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(_ref, state) {
	      var value = _ref.value;
	      var prevValue = state.prevValue;
	      return prevValue === value ? null : {
	        hasContent: !!value,
	        prevValue: value
	      };
	    }
	  }]);

	  return Search;
	}(React.Component);

	_defineProperty$f(Search, "propTypes", {
	  /**
	   * Specify an optional className to be applied to the container node
	   */
	  className: PropTypes.string,

	  /**
	   * Optional prop to specify the type of the `<input>`
	   */
	  type: PropTypes.string,

	  /**
	   * Specify whether the Search should be a small variant
	   */

	  /**
	   * Specify whether the load was successful
	   */
	  small: deprecate(PropTypes.bool, "\nThe prop `small` for Search has been deprecated in favor of `size`. Please use `size=\"sm\"` instead."),

	  /**
	   * Specify the search size
	   */
	  size: PropTypes.oneOf(['sm', 'lg', 'xl']),

	  /**
	   * Provide an optional placeholder text for the Search.
	   * Note: if the label and placeholder differ,
	   * VoiceOver on Mac will read both
	   */
	  placeHolderText: PropTypes.string,

	  /**
	   * Provide the label text for the Search icon
	   */
	  labelText: PropTypes.node.isRequired,

	  /**
	   * Specify light version or default version of this control
	   */
	  light: PropTypes.bool,

	  /**
	   * Specify a custom `id` for the input
	   */
	  id: PropTypes.string,

	  /**
	   * Specify a label to be read by screen readers on the "close" button
	   */
	  closeButtonLabelText: PropTypes.string,

	  /**
	   * Specify the value of the <input>
	   */
	  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

	  /**
	   * Optionally provide the default value of the <input>
	   */
	  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

	  /**
	   * Optional callback called when the search value changes.
	   */
	  onChange: PropTypes.func
	});

	_defineProperty$f(Search, "defaultProps", {
	  type: 'text',
	  placeHolderText: '',
	  closeButtonLabelText: 'Clear search input',
	  onChange: function onChange() {}
	});

	var stablePrefix$J = settings$1.stablePrefix;
	var prefix$$ = settings_1.prefix;
	/**
	 * LocaleModalCountries component
	 *
	 * @param {object} props props object
	 * @param {object} props.regionList object of country and language codes
	 * @param {Function} props.setClearResults set flag to determine whether to reset the filtered results
	 * @param {string} props.currentRegion current region
	 * @returns {*} LocaleModal component
	 */

	var LocaleModalCountries = function LocaleModalCountries(_ref) {
	  var regionList = _ref.regionList,
	      setClearResults = _ref.setClearResults,
	      currentRegion = _ref.currentRegion,
	      modalLabels = objectWithoutProperties(_ref, ["regionList", "setClearResults", "currentRegion"]);

	  var localList = React.useRef(null);
	  React.useEffect(function () {
	    localList.current.scrollTop = 0;
	  }, [currentRegion, regionList]);
	  React.useEffect(function () {
	    var localeFilter = document.getElementById("".concat(prefix$$, "--locale-modal__filter"));
	    var localeText = document.querySelector(".".concat(prefix$$, "--locale-modal__search-text"));
	    var closeBtn = document.querySelector(".".concat(prefix$$, "--search .").concat(prefix$$, "--search-close"));
	    var localeHidden = "".concat(prefix$$, "--locale-modal__locales-hidden");
	    localeFilter === null || localeFilter === void 0 ? void 0 : localeFilter.addEventListener('keyup', filterLocale.bind(null, setClearResults, localeFilter, localeHidden, localeText, modalLabels));
	    /**
	     * Show all links when close button clicked
	     *
	     */

	    closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener('click', setClearResults.bind(null, true));
	    return function () {
	      closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.removeEventListener('click', setClearResults.bind(null, true));
	      localeFilter === null || localeFilter === void 0 ? void 0 : localeFilter.removeEventListener('keyup', filterLocale.bind(null, setClearResults, localeFilter, localeHidden, localeText, modalLabels));
	    };
	  });
	  return React__default.createElement("div", {
	    className: "".concat(prefix$$, "--locale-modal__filter")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$$, "--locale-modal__search")
	  }, React__default.createElement(Search, {
	    "data-autoid": "".concat(stablePrefix$J, "--locale-modal__filter"),
	    placeHolderText: modalLabels.searchPlaceholder,
	    labelText: modalLabels.searchLabel,
	    closeButtonLabelText: modalLabels.searchClearText,
	    id: "".concat(prefix$$, "--locale-modal__filter"),
	    tabIndex: "0"
	  }), React__default.createElement("p", {
	    className: "".concat(prefix$$, "--locale-modal__search-text")
	  }, modalLabels.availabilityText)), React__default.createElement("ul", {
	    className: "".concat(prefix$$, "--locale-modal__list"),
	    ref: localList
	  }, regionList === null || regionList === void 0 ? void 0 : regionList.map(function (region) {
	    return currentRegion === region.name && region.countries.map(function (country, index) {
	      return React__default.createElement("li", {
	        key: index
	      }, React__default.createElement("a", {
	        className: "".concat(prefix$$, "--locale-modal__locales"),
	        onClick: function onClick() {
	          return _setCookie(country.locale);
	        },
	        href: country.href,
	        "data-region": country.region
	      }, React__default.createElement("div", {
	        className: "".concat(prefix$$, "--locale-modal__locales__name")
	      }, country.name), React__default.createElement("div", {
	        className: "".concat(prefix$$, "--locale-modal__locales__name")
	      }, country.language)));
	    });
	  })));
	};
	/**
	 * @property {object} propTypes LocaleModalCountries propTypes
	 * @description Defined property types for component
	 * @type {{regionList: Array, availabilityText: string, unavailabilityText: string, placeHolderText: string, labelText: string}}
	 */


	LocaleModalCountries.propTypes = {
	  /**
	   * Array of regions, countries, and languages.
	   */
	  regionList: PropTypes.array,

	  /**
	   * Func to clear search input.
	   */
	  setClearResults: PropTypes.func,

	  /**
	   * String of current region.
	   */
	  currentRegion: PropTypes.string
	};
	LocaleModalCountries.defaultProps = {
	  searchLabel: 'Search by location or language'
	};
	/**
	 * method to handle when country/region has been selected
	 * sets the ipcInfo cookie with selected locale
	 *
	 * @param {object} locale selected country/region
	 * @private
	 */

	var _setCookie = function _setCookie(locale) {
	  var localeSplit = locale.split('-');
	  var localeObj = {
	    cc: localeSplit[1],
	    lc: localeSplit[0]
	  };
	  ipcinfoCookie.set(localeObj);
	};
	/**
	 * Filter locale links based on search input
	 *
	 */

	var filterLocale = function filterLocale(setClearResults, localeFilter, localeHidden, localeText, modalLabels) {
	  var localeItems = document.querySelectorAll(".".concat(prefix$$, "--locale-modal__list a:not(.").concat(prefix$$, "--locale-modal__locales-filtered)"));
	  setClearResults(false);
	  var filterVal = localeFilter.value.toUpperCase();

	  toConsumableArray(localeItems).map(function (item) {
	    var locale = item.getElementsByTagName('div');
	    var country = locale[0].textContent || locale[0].innerText;
	    var language = locale[1].textContent || locale[1].innerText;

	    if (country.toUpperCase().indexOf(filterVal) > -1 || language.toUpperCase().indexOf(filterVal) > -1) {
	      item.classList.remove(localeHidden);
	    } else {
	      item.classList.add(localeHidden);
	    }
	  });
	  /**
	   * Update locale copy when no results
	   *
	   */


	  var localeItemsHidden = document.querySelectorAll(".".concat(localeHidden));
	  localeText.innerHTML = localeItems.length === localeItemsHidden.length ? modalLabels.unavailabilityText : modalLabels.availabilityText;
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$h =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M2,16H2A14,14,0,1,0,16,2,14,14,0,0,0,2,16Zm23.15,7.75L8.25,6.85a12,12,0,0,1,16.9,16.9ZM8.24,25.16A12,12,0,0,1,6.84,8.27L23.73,25.16a12,12,0,0,1-15.49,0Z"
	});

	var Error20 = /*#__PURE__*/React__default.forwardRef(function Error20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$h, children);
	});

	var stablePrefix$K = settings$1.stablePrefix;
	var prefix$10 = settings_1.prefix;
	/**
	 * LocaleModalRegions component
	 *
	 * @param {object} props props object
	 * @param {object} props.regionList object of regions
	 * @param {Function} props.setCurrentRegion sets state for region name
	 * @param {boolean} props.setIsFiltering true when search filter is visible
	 * @param {Function} props.setClearResults set flag to determine whether to reset the filtered results
	 * @param {string} props.closeModalLabel label for the close button
	 * @param {string} props.returnButtonLabel label for the return button
	 * @returns {*} LocaleModalRegions component
	 */

	var LocaleModalRegions = function LocaleModalRegions(_ref) {
	  var regionList = _ref.regionList,
	      setCurrentRegion = _ref.setCurrentRegion,
	      setIsFiltering = _ref.setIsFiltering,
	      setClearResults = _ref.setClearResults,
	      returnButtonLabel = _ref.returnButtonLabel,
	      closeModalLabel = _ref.closeModalLabel;
	  React.useEffect(function () {
	    var regionLink = document.querySelectorAll(".".concat(prefix$10, "--card"));

	    toConsumableArray(regionLink).forEach(function (link) {
	      link.setAttribute('tabindex', '0');
	      link.addEventListener('click', function () {
	        var searchInput = document.getElementById("".concat(prefix$10, "--locale-modal__filter"));
	        searchInput.focus();
	        setCurrentRegion(link.getElementsByTagName('h3')[0].innerHTML);
	        setIsFiltering(true);
	        /**
	         * go back to region selection
	         *
	         */

	        var localeBackBtn = document.querySelectorAll(".".concat(prefix$10, "--locale-modal__back .").concat(prefix$10, "--modal-header__label,\n          .").concat(prefix$10, "--locale-modal__back .").concat(prefix$10, "--modal-close"));
	        addLocaleBackBtnListeners(localeBackBtn, returnButtonLabel, setIsFiltering, setClearResults, closeModalLabel);
	      });
	    });
	  });
	  return React__default.createElement("div", {
	    className: "".concat(prefix$10, "--grid ").concat(prefix$10, "--no-gutter ").concat(prefix$10, "--locale-modal__regions")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$10, "--row")
	  }, regionList && regionList.map(function (region) {
	    var hasCountries = region.countries.length !== 0;
	    return React__default.createElement("div", {
	      key: "".concat(region.name),
	      className: "".concat(prefix$10, "--col-sm-4 ").concat(prefix$10, "--col-md-8 ").concat(prefix$10, "--col-lg-8 ").concat(prefix$10, "--col-xlg-8 ").concat(prefix$10, "--no-gutter")
	    }, React__default.createElement(CardLink, {
	      "data-autoid": "".concat(stablePrefix$K, "--locale-modal__geo-btn-").concat(region.key),
	      key: region.key,
	      card: {
	        'data-region': region.key,
	        heading: region.name,
	        cta: {
	          type: 'local',
	          href: hasCountries ? '#' : null,
	          icon: {
	            src: hasCountries ? ArrowRight20 : Error20
	          }
	        },
	        handleClick: function handleClick(e) {
	          return e.preventDefault();
	        }
	      }
	    }));
	  })));
	};
	/**
	 * Removes tabindex and role as it goes back
	 *
	 * @param {*} btn btn element
	 */


	var localeBackActive = function localeBackActive(btn, setIsFiltering, setClearResults) {
	  setIsFiltering(false);
	  setClearResults(true);
	  var filter = document.getElementById("".concat(prefix$10, "--locale-modal__filter"));

	  if (filter) {
	    filter.value = '';
	  }

	  btn.removeAttribute('tabindex');
	  btn.removeAttribute('role');
	  btn.removeAttribute('aria-label');
	};
	/**
	 * Add listeners and appropriate role, tab-index and aria-label to the buttons provided
	 *
	 * @param {Array} buttons buttons to be processed
	 * @param {Function} returnButtonLabel hook from props
	 * @param {Function} setIsFiltering hook from props
	 * @param {Function} setClearResults hook from props
	 * @param {Function} closeModalLabel hook from props
	 */

	var addLocaleBackBtnListeners = function addLocaleBackBtnListeners(buttons, returnButtonLabel, setIsFiltering, setClearResults, closeModalLabel) {
	  toConsumableArray(buttons).forEach(function (btn) {
	    btn.setAttribute('tabindex', '0');
	    btn.setAttribute('role', 'button');
	    btn.setAttribute('aria-label', btn.tagName.toLowerCase() === 'button' ? closeModalLabel : returnButtonLabel);
	    btn.addEventListener('click', function click() {
	      localeBackActive(btn, setIsFiltering, setClearResults);
	      btn.removeEventListener('click', click);
	    });
	    btn.addEventListener('keyup', function keyup(e) {
	      if (e.keyCode === 32 || e.keyCode === 13) {
	        localeBackActive(btn, setIsFiltering, setClearResults);
	        btn.removeEventListener('keyup', keyup);
	      }
	    });
	  });
	};
	/**
	 * @property {object} propTypes LocaleModalRegions propTypes
	 * @description Defined property types for component
	 * @type {{}}
	 */

	LocaleModalRegions.propTypes = {
	  /**
	   * Object with region list json data
	   * https://1.www.s81c.com/common/js/dynamicnav/www/countrylist/jsononly/usen-utf8.json
	   */
	  regionList: PropTypes.array,

	  /**
	   * Sets current region
	   */
	  setCurrentRegion: PropTypes.func,

	  /**
	   * Sets region filter
	   */
	  setIsFiltering: PropTypes.func,

	  /**
	   * Clears filter input and resets list
	   */
	  setClearResults: PropTypes.func,

	  /**
	   * Back button copy
	   */
	  returnButtonLabel: PropTypes.string,

	  /**
	   * Close button copy
	   */
	  closeModalLabel: PropTypes.string
	};

	var stablePrefix$L = settings$1.stablePrefix;
	var prefix$11 = settings_1.prefix;
	/**
	 * LocaleModal component.
	 */

	var LocaleModal = function LocaleModal(_ref) {
	  var isOpen = _ref.isOpen,
	      setIsOpen = _ref.setIsOpen,
	      localeData = _ref.localeData,
	      localeDisplay = _ref.localeDisplay;

	  var _useState = React.useState({}),
	      _useState2 = slicedToArray(_useState, 2),
	      list = _useState2[0],
	      setList = _useState2[1];

	  var _useState3 = React.useState(),
	      _useState4 = slicedToArray(_useState3, 2),
	      langDisplay = _useState4[0],
	      setLangDisplay = _useState4[1];

	  var _useState5 = React.useState({}),
	      _useState6 = slicedToArray(_useState5, 2),
	      modalLabels = _useState6[0],
	      setModalLabels = _useState6[1];

	  var _useState7 = React.useState(false),
	      _useState8 = slicedToArray(_useState7, 2),
	      isFiltering = _useState8[0],
	      setIsFiltering = _useState8[1];

	  var _useState9 = React.useState(false),
	      _useState10 = slicedToArray(_useState9, 2),
	      clearResults = _useState10[0],
	      setClearResults = _useState10[1];

	  var _useState11 = React.useState(),
	      _useState12 = slicedToArray(_useState11, 2),
	      currentRegion = _useState12[0],
	      setCurrentRegion = _useState12[1];

	  var filterClass = cx(defineProperty({}, "".concat(prefix$11, "--locale-modal__filtering"), isFiltering));
	  React.useEffect(function () {
	    var stale = false;

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var _document$querySelect;

	      var list, getLangDisplay, pair, locale, localeModalContainer;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (!(localeData && localeDisplay)) {
	                _context.next = 5;
	                break;
	              }

	              list = Object.assign({}, localeData);
	              getLangDisplay = localeDisplay;
	              _context.next = 17;
	              break;

	            case 5:
	              _context.next = 7;
	              return Promise.all([LocaleAPI.getLocale(), LocaleAPI.getLangDisplay()]);

	            case 7:
	              pair = _context.sent;

	              if (stale) {
	                _context.next = 17;
	                break;
	              }

	              locale = pair[0];
	              getLangDisplay = pair[1];
	              _context.t0 = locale;

	              if (!_context.t0) {
	                _context.next = 16;
	                break;
	              }

	              _context.next = 15;
	              return LocaleAPI.getList(locale);

	            case 15:
	              _context.t0 = _context.sent;

	            case 16:
	              list = _context.t0;

	            case 17:
	              setLangDisplay(getLangDisplay);
	              setList(list);
	              setModalLabels(list.localeModal);
	              (_document$querySelect = document.querySelector(".".concat(prefix$11, "--modal-header__heading"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute('tabindex', '0');
	              localeModalContainer = document.querySelector(".".concat(prefix$11, "--locale-modal-container .").concat(prefix$11, "--modal-container"));
	              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('role', 'dialog');
	              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('tabindex', '-1');
	              localeModalContainer === null || localeModalContainer === void 0 ? void 0 : localeModalContainer.setAttribute('aria-modal', 'true');

	            case 25:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))(); // reset the country search results when clicking close icon or back to region button


	    if (clearResults) {
	      var localeItems = document.querySelectorAll(".".concat(prefix$11, "--locale-modal__locales"));
	      var localeHidden = "".concat(prefix$11, "--locale-modal__locales-hidden");

	      toConsumableArray(localeItems).map(function (item) {
	        item.classList.remove(localeHidden);
	      });
	    }

	    return function () {
	      stale = true;
	    };
	  }, [clearResults, localeData, localeDisplay]);
	  return React__default.createElement(ComposedModal, {
	    open: isOpen,
	    onClose: function onClose() {
	      _close(setIsOpen);
	    },
	    className: "".concat(prefix$11, "--locale-modal-container"),
	    "data-autoid": "".concat(stablePrefix$L, "--locale-modal"),
	    selectorPrimaryFocus: ".".concat(prefix$11, "--modal-close")
	  }, isFiltering ? React__default.createElement(ModalHeader, {
	    "data-autoid": "".concat(stablePrefix$L, "--locale-modal__region-back"),
	    label: [React__default.createElement(ArrowLeft20, {
	      className: "".concat(prefix$11, "--locale-modal__label-arrow"),
	      key: "arrow-left"
	    }), modalLabels.headerTitle],
	    title: currentRegion,
	    className: "".concat(prefix$11, "--locale-modal__back")
	  }) : React__default.createElement(ModalHeader, {
	    label: [langDisplay, React__default.createElement(EarthFilled16, {
	      key: "earthfilled",
	      className: "".concat(prefix$11, "--locale-modal__label-globe")
	    })],
	    title: modalLabels.headerTitle,
	    iconDescription: modalLabels.modalClose
	  }), React__default.createElement(ModalBody, {
	    className: "".concat(prefix$11, "--locale-modal ").concat(filterClass)
	  }, React__default.createElement(LocaleModalRegions, {
	    regionList: sortList(list),
	    setCurrentRegion: setCurrentRegion,
	    setIsFiltering: setIsFiltering,
	    setClearResults: setClearResults,
	    returnButtonLabel: modalLabels.headerTitle,
	    closeModalLabel: modalLabels.modalClose
	  }), React__default.createElement(LocaleModalCountries, _extends_1({
	    regionList: sortList(list),
	    setClearResults: setClearResults,
	    currentRegion: currentRegion
	  }, modalLabels))));
	};

	LocaleModal.propTypes = {
	  /**
	   * `true` to open modal in its initial state.
	   */
	  isOpen: PropTypes.bool,

	  /**
	   * The setter for `isOpen`.
	   */
	  setIsOpen: PropTypes.func,

	  /**
	   * Locale/Language data to bypass the service call.
	   */
	  localeData: PropTypes.shape({
	    regionList: PropTypes.arrayOf(PropTypes.shape({
	      name: PropTypes.string,
	      key: PropTypes.string,
	      countryList: PropTypes.shape({
	        name: PropTypes.string,
	        locale: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))
	      })
	    })),
	    localeModal: PropTypes.shape({
	      headerTitle: PropTypes.string,
	      modalClose: PropTypes.string,
	      searchLabel: PropTypes.string,
	      searchClearText: PropTypes.string,
	      searchPlaceholder: PropTypes.string,
	      availabilityText: PropTypes.string,
	      unavailabilityText: PropTypes.string
	    })
	  }),

	  /**
	   * Display text for current locale/language to bypass service call.
	   */
	  localeDisplay: PropTypes.string
	};
	LocaleModal.defaultProps = {
	  isOpen: false,
	  setIsOpen: function setIsOpen() {},
	  localeData: null,
	  localeDisplay: null
	};
	/**
	 *  New region/country list based lang attributes available on page
	 *
	 * @param {object} list country list
	 *
	 * @returns {object} list item
	 */

	var sortList = function sortList(list) {
	  var pageLangs = altlangs();
	  var filterList = [];
	  list.regionList && list.regionList.map(function (region, index) {
	    filterList.push({
	      name: region.name,
	      key: region.key,
	      countries: []
	    });

	    var _loop = function _loop() {
	      var _Object$entries$_i = slicedToArray(_Object$entries[_i], 2),
	          key = _Object$entries$_i[0],
	          value = _Object$entries$_i[1];

	      region.countryList.map(function (country) {
	        country.locale.map(function (loc) {
	          if (loc[0].includes(key)) {
	            filterList[index].countries.push({
	              region: region.key,
	              name: country.name,
	              locale: loc[0],
	              language: loc[1],
	              href: value
	            });
	          }
	        });
	      });
	    };

	    for (var _i = 0, _Object$entries = Object.entries(pageLangs); _i < _Object$entries.length; _i++) {
	      _loop();
	    }

	    filterList[index].countries.sort(function (a, b) {
	      return a.name > b.name ? 1 : -1;
	    });
	  });
	  return filterList;
	};
	/**
	 * Sets modal state to closed
	 *
	 * @private
	 */

	var _close = function _close(setIsOpen) {
	  setIsOpen(false);
	  var footerBtn = document.querySelector(".".concat(prefix$11, "--locale-btn__container .").concat(prefix$11, "--btn--secondary"));
	  setTimeout(function () {
	    footerBtn === null || footerBtn === void 0 ? void 0 : footerBtn.focus();
	  }, 100);
	};

	var stablePrefix$M = settings$1.stablePrefix;
	var prefix$12 = settings_1.prefix;
	/**
	 * Renders the locale button.
	 */

	var LocaleButton = function LocaleButton(_ref) {
	  var displayLang = _ref.displayLang,
	      aria = _ref.aria;

	  var _useState = React.useState(false),
	      _useState2 = slicedToArray(_useState, 2),
	      isOpen = _useState2[0],
	      setIsOpen = _useState2[1];

	  return React__default.createElement("div", {
	    className: "".concat(prefix$12, "--locale-btn__container")
	  }, React__default.createElement(Button, {
	    "data-autoid": "".concat(stablePrefix$M, "--locale-btn"),
	    className: "".concat(prefix$12, "--locale-btn"),
	    kind: "secondary",
	    onClick: open,
	    renderIcon: EarthFilled20,
	    iconDescription: "Earth Filled Icon",
	    "aria-label": aria
	  }, displayLang), isOpen && React__default.createElement(LocaleModal, {
	    isOpen: isOpen,
	    setIsOpen: setIsOpen
	  }));
	  /**
	   * Sets modal state to open
	   *
	   * @private
	   */

	  function open() {
	    setIsOpen(true);
	  }
	};

	LocaleButton.propTypes = {
	  /**
	   * Display language for locale button.
	   */
	  displayLang: PropTypes.string,

	  /**
	   * `aria-label`` value.
	   */
	  aria: PropTypes.string
	};

	var _root$location$1;
	/**
	 * @constant {string | string} Host for the Translation API call
	 * @private
	 */

	var _host$1 = process && (process.env.REACT_APP_TRANSLATION_HOST || process.env.TRANSLATION_HOST) || 'https://www.ibm.com';
	/**
	 * @constant {string | string} CORS proxy for lower environment calls
	 * @private
	 */


	var _proxy$1 = ((_root$location$1 = lib.location) === null || _root$location$1 === void 0 ? void 0 : _root$location$1.host) === 'www.ibm.com' ? '' : // Optional chaining operator in `process.env.ENVVAR` does not work in some build systems, notably Parcel
	process && (process.env.REACT_APP_CORS_PROXY || process.env.CORS_PROXY) || '';
	/**
	 * Translation API endpoint
	 *
	 * @type {string}
	 * @private
	 */


	var _endpoint$2 = "".concat(_host$1, "/common/v18/js/data/jsononly");
	/**
	 * Session Storage key for translation data
	 *
	 * @type {string}
	 * @private
	 */


	var _sessionTranslationKey = 'dds-translation';
	/**
	 * Tracking of the translation fetch
	 *
	 * @type {{}}
	 * @private
	 */

	var _translationFetch = {};
	/**
	 * Number of times to retry the fetch before failing
	 *
	 * @type {number}
	 * @private
	 */

	var _timeoutRetries$3 = 50;
	/**
	 * Tracks the number of attempts for the fetch
	 *
	 * @type {number}
	 * @private
	 */

	var _attempt$2 = 0;
	/**
	 * The cache for in-flight or resolved requests for the i18n data, keyed by the initiating locale.
	 *
	 * @type {object<string, Translation>}
	 */

	var _requestsTranslation = {};
	/**
	 * Translation API class with methods for fetching i18n data for ibm.com
	 */

	var TranslationAPI = /*#__PURE__*/function () {
	  function TranslationAPI() {
	    classCallCheck(this, TranslationAPI);
	  }

	  createClass(TranslationAPI, null, [{
	    key: "clearCache",

	    /**
	     * Clears the cache.
	     */
	    value: function clearCache() {
	      Object.keys(_requestsTranslation).forEach(function (key) {
	        return delete _requestsTranslation[key];
	      });

	      for (var i = 0; i < sessionStorage.length; ++i) {
	        var key = sessionStorage.key(i);

	        if (key.indexOf(_sessionTranslationKey) === 0) {
	          sessionStorage.removeItem(key);
	        }
	      }
	    }
	    /**
	     * Returns translation i18n data
	     *
	     * @param {object} codes object containing lc and cc
	     *
	     * @returns {Promise<any>} Translation data
	     * @example
	     * import { TranslationAPI } from '@carbon/ibmdotcom-services';
	     *
	     * async function getTranslation() {
	     *   const response = await TranslationAPI.getTranslation({
	     *     lc: 'en',
	     *     cc: 'us',
	     *   });
	     *   return response;
	     * }
	     */

	  }, {
	    key: "getTranslation",
	    value: function () {
	      var _getTranslation = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(codes) {
	        var _this = this;

	        var lang, country, locale, key, cachedRequest;
	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                lang = 'en';
	                country = 'us';

	                if (!(codes && codes.lc && codes.cc)) {
	                  _context.next = 7;
	                  break;
	                }

	                lang = codes.lc;
	                country = codes.cc;
	                _context.next = 12;
	                break;

	              case 7:
	                _context.next = 9;
	                return LocaleAPI.getLocale();

	              case 9:
	                locale = _context.sent;
	                lang = locale.lc;
	                country = locale.cc;

	              case 12:
	                key = "".concat(lang, "-").concat(country);
	                cachedRequest = _requestsTranslation[key];

	                if (!cachedRequest) {
	                  _context.next = 16;
	                  break;
	                }

	                return _context.abrupt("return", cachedRequest);

	              case 16:
	                return _context.abrupt("return", _requestsTranslation[key] = new Promise(function (resolve, reject) {
	                  _this.fetchTranslation(lang, country, resolve, reject);
	                }));

	              case 17:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));

	      function getTranslation(_x) {
	        return _getTranslation.apply(this, arguments);
	      }

	      return getTranslation;
	    }()
	    /**
	     * Fetches the translation data from sessionStorage or data fetch
	     *
	     * @param {string} lang Language code
	     * @param {string} country Country code
	     * @param {Function} resolve resolves the Promise
	     * @param {Function} reject rejects the promise
	     */

	  }, {
	    key: "fetchTranslation",
	    value: function fetchTranslation(lang, country, resolve, reject) {
	      var _this2 = this;

	      var sessionTranslation = JSON.parse(sessionStorage.getItem("".concat(_sessionTranslationKey, "-").concat(country, "-").concat(lang)));

	      if (sessionTranslation) {
	        resolve(sessionTranslation);
	      } else if (_translationFetch["".concat(country, "-").concat(lang)]) {
	        _attempt$2++;

	        if (_attempt$2 < _timeoutRetries$3) {
	          setTimeout(function () {
	            _this2.fetchTranslation(lang, country, resolve, reject);
	          }, 100);
	        } else {
	          reject();
	        }
	      } else {
	        var proxy = '';

	        if (lib.location) {
	          var currenthost = "".concat(lib.location.protocol, "//").concat(lib.location.host);
	          proxy = currenthost !== _host$1 ? _proxy$1 : '';
	        }

	        var url = "".concat(proxy).concat(_endpoint$2, "/").concat(country).concat(lang, ".json");
	        _attempt$2 = 0;
	        _translationFetch["".concat(country, "-").concat(lang)] = true;
	        axios$1.get(url, {
	          headers: {
	            'Content-Type': 'text/plain',
	            origin: _host$1
	          }
	        }).then(function (response) {
	          var data = _this2.transformData(response.data);

	          sessionStorage.setItem("".concat(_sessionTranslationKey, "-").concat(country, "-").concat(lang), JSON.stringify(data));
	          _translationFetch["".concat(country, "-").concat(lang)] = false;
	          resolve(data);
	        }).catch(function (error) {
	          _translationFetch["".concat(country, "-").concat(lang)] = false;
	          reject(error);
	        });
	      }
	    }
	    /**
	     * Transforms translation data
	     *
	     * @param   {object} data translation data to be transformed
	     * @returns {object} Translation data
	     */

	  }, {
	    key: "transformData",
	    value: function transformData(data) {
	      data.footerMenu.push(data.socialFollow);
	      return data;
	    }
	  }]);

	  return TranslationAPI;
	}();

	var stablePrefix$N = settings$1.stablePrefix;
	var prefix$13 = settings_1.prefix;
	/**
	 * Footer component.
	 */

	var Footer = function Footer(_ref) {
	  var type = _ref.type,
	      navigation = _ref.navigation,
	      langCode = _ref.langCode,
	      disableLocaleButton = _ref.disableLocaleButton,
	      languageOnly = _ref.languageOnly,
	      languageItems = _ref.languageItems,
	      languageInitialItem = _ref.languageInitialItem,
	      languageCallback = _ref.languageCallback;

	  var _useState = React.useState([]),
	      _useState2 = slicedToArray(_useState, 2),
	      footerMenuData = _useState2[0],
	      setFooterMenuData = _useState2[1];

	  var _useState3 = React.useState([]),
	      _useState4 = slicedToArray(_useState3, 2),
	      footerLegalData = _useState4[0],
	      setFooterLegalData = _useState4[1];

	  var _useState5 = React.useState(''),
	      _useState6 = slicedToArray(_useState5, 2),
	      displayLang = _useState6[0],
	      setDisplayLang = _useState6[1];

	  var _useState7 = React.useState(''),
	      _useState8 = slicedToArray(_useState7, 2),
	      localeButtonAria = _useState8[0],
	      setLocaleButtonAria = _useState8[1];

	  React.useEffect(function () {
	    // initialize global execution calls
	    globalInit();
	  }, []);
	  React.useEffect(function () {
	    var stale = false;

	    if (!navigation) {
	      asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	        var response;
	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.prev = 0;
	                _context.next = 3;
	                return TranslationAPI.getTranslation();

	              case 3:
	                response = _context.sent;

	                if (!stale) {
	                  setFooterMenuData(response.footerMenu);
	                  setFooterLegalData(response.footerThin);
	                }

	                _context.next = 10;
	                break;

	              case 7:
	                _context.prev = 7;
	                _context.t0 = _context["catch"](0);
	                console.error('Error populating footer data:', _context.t0);

	              case 10:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, null, [[0, 7]]);
	      }))();
	    }

	    return function () {
	      stale = true;
	    };
	  }, [navigation]);
	  React.useEffect(function () {
	    var stale = false;

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	      var response, locale, list;
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return LocaleAPI.getLangDisplay(langCode);

	            case 2:
	              response = _context2.sent;

	              if (!stale) {
	                _context2.next = 5;
	                break;
	              }

	              return _context2.abrupt("return");

	            case 5:
	              setDisplayLang(response);
	              _context2.next = 8;
	              return LocaleAPI.getLocale();

	            case 8:
	              locale = _context2.sent;

	              if (!stale) {
	                _context2.next = 11;
	                break;
	              }

	              return _context2.abrupt("return");

	            case 11:
	              _context2.next = 13;
	              return LocaleAPI.getList(locale);

	            case 13:
	              list = _context2.sent;

	              if (!stale) {
	                _context2.next = 16;
	                break;
	              }

	              return _context2.abrupt("return");

	            case 16:
	              setLocaleButtonAria(list.localeModal.headerTitle);

	            case 17:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }))();

	    return function () {
	      stale = true;
	    };
	  }, [langCode]);

	  if (navigation) {
	    footerMenuData = navigation.footerMenu;
	    footerLegalData = navigation.footerThin;
	  }

	  return React__default.createElement("footer", {
	    "data-autoid": "".concat(stablePrefix$N, "--footer"),
	    className: cx("".concat(prefix$13, "--footer"), defineProperty({}, "".concat(prefix$13, "--footer--short"), type === 'short'))
	  }, React__default.createElement("section", {
	    className: "".concat(prefix$13, "--footer__main")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$13, "--footer__main-container")
	  }, React__default.createElement(Logo, null), _optionalFooterNav(type, footerMenuData), _loadLocaleLanguage(disableLocaleButton, localeButtonAria, displayLang, languageOnly, languageItems, languageInitialItem, languageCallback))), React__default.createElement(LegalNav, {
	    links: footerLegalData
	  }));
	};
	/**
	 * Loads in the locale modal, language selector, or null
	 *
	 * @param {boolean} disableLocaleButton Flag to disable to locale button
	 * @param {string} localeButtonAria String for the aria label
	 * @param {string} displayLang display language for locale button
	 * @param {boolean} languageOnly Switches to the language selector
	 * @param {Array} languageItems Array of language data for the dropdown
	 * @param {object} languageInitialItem Initial language selected
	 * @param {Function} languageCallback Callback function when language is selected
	 * @returns {null|*} JSX or null
	 * @private
	 */


	function _loadLocaleLanguage(disableLocaleButton, localeButtonAria, displayLang, languageOnly, languageItems, languageInitialItem, languageCallback) {
	  if (DDS_LANGUAGE_SELECTOR && languageOnly) {
	    return React__default.createElement(LanguageSelector, {
	      items: languageItems,
	      initialSelectedItem: languageInitialItem,
	      callback: languageCallback
	    });
	  } else if (!disableLocaleButton) {
	    return React__default.createElement(LocaleButton, {
	      aria: localeButtonAria,
	      displayLang: displayLang
	    });
	  } else {
	    return null;
	  }
	}
	/**
	 * renders optional footer nav for tall
	 *
	 * @param {string} type type of footer in use
	 * @param {string} data footer menu data
	 * @returns {object} JSX object
	 * @private
	 */


	function _optionalFooterNav(type, data) {
	  if (type !== 'short') {
	    return React__default.createElement(FooterNav, {
	      groups: data
	    });
	  }
	}

	Footer.propTypes = {
	  /**
	   * Navigation data object for Footer, used for server-side rendering.
	   */
	  navigation: PropTypes.shape({
	    footerMenu: PropTypes.arrayOf(PropTypes.shape({
	      title: PropTypes.string,
	      links: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        url: PropTypes.string
	      }))
	    })),
	    footerThin: PropTypes.arrayOf(PropTypes.shape({
	      title: PropTypes.string,
	      url: PropTypes.string
	    }))
	  }),

	  /**
	   * Type of Footer. Choose from:
	   *
	   * | Name    | Description                                                                 |
	   * | ------- | --------------------------------------------------------------------------- |
	   * | `tall`  | Default footer variant includes additional navigation taking up more space. |
	   * | `short` | Short footer variant reduces space by removing any additional navigation.   |
	   */
	  type: PropTypes.oneOf(['tall', 'short']),

	  /**
	   * Language code for fetching the display name.
	   */
	  langCode: PropTypes.shape({
	    cc: PropTypes.string,
	    lc: PropTypes.string
	  }),

	  /**
	   * `true` to disable the Locale button.
	   */
	  disableLocaleButton: PropTypes.bool,

	  /**
	   * `true` to switch the locale button with a language dropdown (experimental).
	   */
	  languageOnly: PropTypes.bool,

	  /**
	   * Array of items for the language dropdown,
	   * utilizes the [Carbon ComboBox](https://react.carbondesignsystem.com/?path=/story/combobox--default) (experimental).
	   */
	  languageItems: PropTypes.arrayOf(PropTypes.object),

	  /**
	   * Sets the initial value when the component is loaded (experimental).
	   * The default is the first item.
	   */
	  languageInitialItem: PropTypes.shape({
	    id: PropTypes.string,
	    text: PropTypes.string
	  }),

	  /**
	   * Callback function onChange of the language dropdown (experimental).
	   */
	  languageCallback: PropTypes.func
	};
	/**
	 * @property {object} defaultProps default Footer props
	 * @type {{navigation: null, langCode: null, disableLocaleButton: boolean,
	 * type: string}}
	 */

	Footer.defaultProps = {
	  navigation: null,
	  type: 'full',
	  langCode: null,
	  disableLocaleButton: false,
	  languageOnly: false,
	  languageItems: [],
	  languageCallback: function languageCallback() {}
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Utility to calculate the total width of elements
	 *
	 * @example
	 * import {calculateTotalWidth} from '@carbon/ibmdotcom-utilities';
	 *
	 * const elements = ['bx--classname1', 'bx--classname2','bx--classname3','bx--classname4'];
	 *
	 * calculateTotalWidth(elements);
	 *
	 * @param {Array} elements array of classnames
	 * @returns {number} total width of the elements
	 */
	function calculateTotalWidth(elements) {
	  var totalWidth = 0;
	  elements.forEach(function (ele) {
	    var item = document.getElementsByClassName(ele);
	    if (item[0]) totalWidth += item[0].offsetWidth;
	  });
	  return totalWidth;
	}

	function ownKeys$c(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$a(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$c(Object(source), true).forEach(function (key) {
	        _defineProperty$g(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$c(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty$g(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * @param {object<string, Function>} propTypes The list of type checkers, keyed by prop names.
	 * @returns {object<string, Function>}
	 *   The new prop type checkers that checks if one of the given props exist,
	 *   in addition to the original type checkings.
	 */


	function isRequiredOneOf(propTypes) {
	  var names = Object.keys(propTypes);

	  var checker = function checker(propType) {
	    return function (props, propName, componentName) {
	      if ( names.every(function (name) {
	        return typeof props[name] === 'undefined';
	      })) {
	        return new Error("".concat(componentName, " requires one of the following props: ").concat(names.join(', ')));
	      }

	      for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	        rest[_key - 3] = arguments[_key];
	      }

	      return propType.apply(void 0, [props, propName, componentName].concat(rest));
	    };
	  };

	  return names.reduce(function (o, name) {
	    return _objectSpread$a(_objectSpread$a({}, o), {}, _defineProperty$g({}, name, checker(propTypes[name])));
	  }, {});
	}

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var AriaLabelPropType = isRequiredOneOf({
	  'aria-label': PropTypes.string,
	  'aria-labelledby': PropTypes.string
	});

	function ownKeys$d(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$b(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$d(Object(source), true).forEach(function (key) {
	        _defineProperty$h(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$d(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty$h(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends$d() {
	  _extends$d = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$d.apply(this, arguments);
	}

	function _objectWithoutProperties$f(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$g(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$g(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$14 = settings_1.prefix;

	var Header = function Header(_ref) {
	  var customClassName = _ref.className,
	      children = _ref.children,
	      rest = _objectWithoutProperties$f(_ref, ["className", "children"]);

	  var className = cx("".concat(prefix$14, "--header"), customClassName);
	  return /*#__PURE__*/React__default.createElement("header", _extends$d({}, rest, {
	    className: className
	  }), children);
	};

	Header.propTypes = _objectSpread$b(_objectSpread$b({}, AriaLabelPropType), {}, {
	  /**
	   * Optionally provide a custom class name that is applied to the underlying <header>
	   */
	  className: PropTypes.string
	});

	function _slicedToArray$4(arr, i) {
	  return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$4();
	}

	function _nonIterableRest$4() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _unsupportedIterableToArray$3(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
	}

	function _arrayLikeToArray$3(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _iterableToArrayLimit$4(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayWithHoles$4(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var HeaderContainer = function HeaderContainer(_ref) {
	  var isSideNavExpanded = _ref.isSideNavExpanded,
	      Children = _ref.render; //state for expandable sidenav

	  var _useState = React.useState(isSideNavExpanded),
	      _useState2 = _slicedToArray$4(_useState, 2),
	      isSideNavExpandedState = _useState2[0],
	      setIsSideNavExpandedState = _useState2[1];

	  var handleHeaderMenuButtonClick = React.useCallback(function () {
	    setIsSideNavExpandedState(!isSideNavExpandedState);
	  }, [isSideNavExpandedState, setIsSideNavExpandedState]);
	  return /*#__PURE__*/React__default.createElement(Children, {
	    isSideNavExpanded: isSideNavExpandedState,
	    onClickSideNavExpand: handleHeaderMenuButtonClick
	  });
	};

	HeaderContainer.propTypes = {
	  /**
	   * Optionally provide a custom class name that is applied to the underlying <header>
	   */
	  isSideNavExpanded: PropTypes.bool
	};
	HeaderContainer.defaultProps = {
	  isSideNavExpanded: false
	};

	function ownKeys$e(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$c(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$e(Object(source), true).forEach(function (key) {
	        _defineProperty$i(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$e(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty$i(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$g(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$h(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$h(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var wrapComponent = function wrapComponent(_ref) {
	  var name = _ref.name,
	      className = _ref.className,
	      type = _ref.type;

	  var Component = function Component(_ref2) {
	    var baseClassName = _ref2.className,
	        other = _objectWithoutProperties$g(_ref2, ["className"]);

	    var componentClass = cx(className, baseClassName);
	    return /*#__PURE__*/React__default.createElement(type, _objectSpread$c(_objectSpread$c({}, other), {}, {
	      // Prevent Weird quirk where `cx` will evaluate to an empty string, '',
	      // and so we have empty `class` attributes in the resulting markup
	      // eslint-disable-next-line no-extra-boolean-cast
	      className: !!componentClass ? componentClass : undefined
	    }));
	  };

	  Component.displayName = name;
	  Component.propTypes = {
	    className: PropTypes.string
	  };
	  return Component;
	};

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var prefix$15 = settings_1.prefix;
	/**
	 * Generic container for `HeaderGlobalAction` components
	 */

	var HeaderGlobalBar = wrapComponent({
	  name: 'HeaderGlobalBar',
	  className: "".concat(prefix$15, "--header__global"),
	  type: 'div'
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$i =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M2 14.8H18V16H2zM2 11.2H18V12.399999999999999H2zM2 7.6H18V8.799999999999999H2zM2 4H18V5.2H2z"
	});

	var Menu20 = /*#__PURE__*/React__default.forwardRef(function Menu20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 20 20",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$i, children);
	});

	function ownKeys$f(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$d(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$f(Object(source), true).forEach(function (key) {
	        _defineProperty$j(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$f(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _extends$e() {
	  _extends$e = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$e.apply(this, arguments);
	}

	function _defineProperty$j(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$h(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$i(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$i(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$16 = settings_1.prefix;

	var HeaderMenuButton = function HeaderMenuButton(_ref) {
	  var _cx;

	  var ariaLabel = _ref['aria-label'],
	      ariaLabelledBy = _ref['aria-labelledby'],
	      customClassName = _ref.className,
	      onClick = _ref.onClick,
	      isActive = _ref.isActive,
	      isCollapsible = _ref.isCollapsible,
	      rest = _objectWithoutProperties$h(_ref, ["aria-label", "aria-labelledby", "className", "onClick", "isActive", "isCollapsible"]);

	  var className = cx((_cx = {}, _defineProperty$j(_cx, customClassName, !!customClassName), _defineProperty$j(_cx, "".concat(prefix$16, "--header__action"), true), _defineProperty$j(_cx, "".concat(prefix$16, "--header__menu-trigger"), true), _defineProperty$j(_cx, "".concat(prefix$16, "--header__action--active"), isActive), _defineProperty$j(_cx, "".concat(prefix$16, "--header__menu-toggle"), true), _defineProperty$j(_cx, "".concat(prefix$16, "--header__menu-toggle__hidden"), !isCollapsible), _cx));
	  var accessibilityLabel = {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy
	  };
	  return /*#__PURE__*/React__default.createElement("button", _extends$e({}, rest, accessibilityLabel, {
	    className: className,
	    title: ariaLabel,
	    type: "button",
	    onClick: onClick
	  }), isActive ? /*#__PURE__*/React__default.createElement(Close20, null) : /*#__PURE__*/React__default.createElement(Menu20, null));
	};

	HeaderMenuButton.propTypes = _objectSpread$d(_objectSpread$d({}, AriaLabelPropType), {}, {
	  /**
	   * Optionally provide a custom class name that is applied to the underlying
	   * button
	   */
	  className: PropTypes.string,

	  /**
	   * Optionally provide an onClick handler that is called when the underlying
	   * button fires it's onclick event
	   */
	  onClick: PropTypes.func,
	  isActive: PropTypes.bool
	});

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var MastheadLogo = function MastheadLogo(props) {
	  return React__default.createElement("svg", props, React__default.createElement("path", {
	    d: "M58 21.467V23h-7.632v-1.533H58zm-18.316 0V23h-7.631v-1.533h7.631zm5.955 0L45.025 23l-.606-1.533h1.22zm-17.097 0A6.285 6.285 0 0 1 24.391 23H12.21v-1.533zm-17.858 0V23H0v-1.533h10.684zm29-3.067v1.533h-7.631V18.4h7.631zm7.148 0l-.594 1.533H43.82l-.598-1.533h3.609zm-16.764 0a5.719 5.719 0 0 1-.64 1.533H12.21V18.4zm-19.384 0v1.533H0V18.4h10.684zM58 18.4v1.533h-7.632V18.4H58zm-3.053-3.067v1.534h-4.579v-1.534h4.58zm-15.263 0v1.534h-4.579v-1.534h4.58zm8.345 0l-.6 1.534h-4.806l-.604-1.534h6.01zm-18.174 0c.137.49.213 1.003.213 1.534h-5.647v-1.534zm-10.013 0v1.534h-4.579v-1.534h4.58zm-12.21 0v1.534h-4.58v-1.534h4.58zm47.315-3.066V13.8h-4.579v-1.533h4.58zm-15.263 0V13.8h-4.579v-1.533h4.58zm9.541 0l-.597 1.533h-7.22l-.591-1.533h8.408zm-21.248 0c.527.432.98.951 1.328 1.533H15.263v-1.533zm-20.345 0V13.8h-4.58v-1.533h4.58zM44.599 9.2l.427 1.24.428-1.24h9.493v1.533h-4.579V9.324l-.519 1.41h-9.661l-.504-1.41v1.41h-4.579V9.2H44.6zm-36.967 0v1.533h-4.58V9.2h4.58zm21.673 0a5.95 5.95 0 0 1-1.328 1.533H15.263V9.2zm25.642-3.067v1.534h-8.964l.54-1.534h8.424zm-11.413 0l.54 1.534h-8.969V6.133h8.43zm-13.466 0c0 .531-.076 1.045-.213 1.534H24.42V6.133zm-10.226 0v1.534h-4.579V6.133h4.58zm-12.21 0v1.534h-4.58V6.133h4.58zm34.845-3.066l.53 1.533H32.054V3.067h10.424zm15.523 0V4.6H47.04l.55-1.533H58zm-28.573 0c.284.473.504.988.641 1.533H12.211V3.067zm-18.743 0V4.6H0V3.067h10.684zM41.406 0l.54 1.533h-9.893V0h9.353zM58 0v1.533h-9.881L48.647 0H58zM24.39 0c1.601 0 3.057.581 4.152 1.533H12.211V0zM10.685 0v1.533H0V0h10.684z",
	    fill: "#161616",
	    fillRule: "evenodd"
	  }));
	};

	MastheadLogo.defaultProps = {
	  width: "58",
	  height: "23",
	  viewBox: "0 0 58 23",
	  xmlns: "http://www.w3.org/2000/svg"
	};
	var prefix$17 = settings_1.prefix;
	/**
	 * IBM Logo 8-bar component.
	 */

	var IbmLogo = function IbmLogo(_ref) {
	  var autoid = _ref.autoid;
	  return React__default.createElement("div", {
	    className: "".concat(prefix$17, "--header__logo")
	  }, React__default.createElement("a", {
	    "aria-label": "IBM\xAE",
	    "data-autoid": autoid,
	    href: "https://www.ibm.com/"
	  }, React__default.createElement(MastheadLogo, null)));
	};
	IbmLogo.propTypes = {
	  /**
	   * data-autoid attribute for analytics
	   */
	  autoid: PropTypes.string
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$j =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M6.7 12.3L2.9 8.5 15 8.5 15 7.5 2.9 7.5 6.7 3.7 6 3 1 8 6 13z"
	});

	var ArrowLeft16 = /*#__PURE__*/React__default.forwardRef(function ArrowLeft16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$j, children);
	});

	function _assertThisInitialized$5(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized$5;

	function _possibleConstructorReturn$4(self, call) {
	  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	var possibleConstructorReturn = _possibleConstructorReturn$4;

	var getPrototypeOf = createCommonjsModule(function (module) {
	  function _getPrototypeOf(o) {
	    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	      return o.__proto__ || Object.getPrototypeOf(o);
	    };
	    return _getPrototypeOf(o);
	  }

	  module.exports = _getPrototypeOf;
	});

	var setPrototypeOf = createCommonjsModule(function (module) {
	  function _setPrototypeOf(o, p) {
	    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	      o.__proto__ = p;
	      return o;
	    };

	    return _setPrototypeOf(o, p);
	  }

	  module.exports = _setPrototypeOf;
	});

	function _inherits$4(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf(subClass, superClass);
	}

	var inherits = _inherits$4;

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$k =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M16 22L6 12 7.4 10.6 16 19.2 24.6 10.6 26 12z"
	});

	var ChevronDown20 = /*#__PURE__*/React__default.forwardRef(function ChevronDown20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$k, children);
	});

	function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$g(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var prefix$18 = settings_1.prefix;

	var defaultRenderMenuContent = function defaultRenderMenuContent() {
	  return React__default.createElement(ChevronDown20, {
	    className: "".concat(prefix$18, "--header__menu-arrow")
	  });
	};
	/**
	 * `HeaderMenu` is used to render submenu's in the `Header`. Most often children
	 * will be a `HeaderMenuItem`. It handles certain keyboard events to help
	 * with managing focus. It also passes along refs to each child so that it can
	 * help manage focus state of its children.
	 */


	var HeaderMenu = /*#__PURE__*/function (_React$Component) {
	  inherits(HeaderMenu, _React$Component);

	  function HeaderMenu(props) {
	    var _this;

	    classCallCheck(this, HeaderMenu);

	    _this = possibleConstructorReturn(this, getPrototypeOf(HeaderMenu).call(this, props));

	    defineProperty(assertThisInitialized(_this), "handleOnClick", function (event) {
	      _this.menuLinkRef.current.focus();

	      _this.setState(function (prevState) {
	        if (prevState.expanded) {
	          var _root$document, _root$document$body;

	          _this.props.setOverlay(false);

	          (_root$document = lib.document) === null || _root$document === void 0 ? void 0 : (_root$document$body = _root$document.body) === null || _root$document$body === void 0 ? void 0 : _root$document$body.classList.remove("".concat(prefix$18, "--body__lock-scroll"));
	        } else {
	          var _root$document2, _root$document2$body;

	          _this.props.setOverlay(true);

	          (_root$document2 = lib.document) === null || _root$document2 === void 0 ? void 0 : (_root$document2$body = _root$document2.body) === null || _root$document2$body === void 0 ? void 0 : _root$document2$body.classList.add("".concat(prefix$18, "--body__lock-scroll"));
	        }

	        return {
	          expanded: !prevState.expanded
	        };
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleOnKeyDown", function (event) {
	      // Handle enter or space key for toggling the expanded state of the menu.
	      if (matches(event, [Enter, Space])) {
	        event.stopPropagation();
	        event.preventDefault();

	        _this.handleOnClick();

	        return;
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "checkMenuItems", function (event) {
	      var megamenuItems = ["".concat(prefix$18, "--masthead__megamenu__category-headline"), "".concat(prefix$18, "--masthead__megamenu__category-group"), "".concat(prefix$18, "--masthead__megamenu__view-all-cta"), "".concat(prefix$18, "--masthead__megamenu__l0-nav"), "".concat(prefix$18, "--header__menu")];
	      return megamenuItems.filter(function (item) {
	        var _event$relatedTarget$;

	        return (_event$relatedTarget$ = event.relatedTarget.parentElement.className) === null || _event$relatedTarget$ === void 0 ? void 0 : _event$relatedTarget$.includes(item);
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleOnBlur", function (event) {
	      if (!event.currentTarget.contains(event.relatedTarget)) {
	        var _root$document3, _root$document3$body;

	        _this.setState({
	          expanded: false,
	          selectedIndex: null
	        });

	        (_root$document3 = lib.document) === null || _root$document3 === void 0 ? void 0 : (_root$document3$body = _root$document3.body) === null || _root$document3$body === void 0 ? void 0 : _root$document3$body.classList.remove("".concat(prefix$18, "--body__lock-scroll"));
	      }

	      if (!event.relatedTarget || !_this.checkMenuItems(event).length) {
	        _this.props.setOverlay(false);
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleMenuButtonRef", function (node) {
	      if (_this.props.focusRef) {
	        _this.props.focusRef(node);
	      }

	      _this.menuButtonRef = node;
	    });

	    defineProperty(assertThisInitialized(_this), "handleItemRef", function (index) {
	      return function (node) {
	        _this.items[index] = node;
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "handleMenuClose", function (event) {
	      // Handle ESC keydown for closing the expanded menu.
	      if (matches(event, [Escape]) && _this.state.expanded) {
	        event.stopPropagation();
	        event.preventDefault();

	        _this.setState(function () {
	          return {
	            expanded: false,
	            selectedIndex: null
	          };
	        }); // remove overlay


	        _this.props.setOverlay(false); // Return focus to menu button when the user hits ESC.


	        _this.menuButtonRef.focus();

	        return;
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "_renderMenuItem", function (item, index) {
	      return React__default.cloneElement(item, {
	        ref: _this.handleItemRef(index),
	        role: 'none'
	      });
	    });

	    _this.state = {
	      // Used to manage the expansion state of the menu
	      expanded: false,
	      // Refers to the menuitem that is currently focused
	      // Note: children should have `role="menuitem"` on node consuming ref
	      selectedIndex: null
	    };
	    _this.items = [];
	    _this.menuLinkRef = React__default.createRef();
	    return _this;
	  }
	  /**
	   * Toggle the expanded state of the menu on click.
	   */


	  createClass(HeaderMenu, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          ariaLabel = _this$props['aria-label'],
	          ariaLabelledBy = _this$props['aria-labelledby'],
	          customClassName = _this$props.className,
	          children = _this$props.children,
	          MenuContent = _this$props.renderMenuContent,
	          menuLinkName = _this$props.menuLinkName,
	          autoId = _this$props.autoId;
	      var accessibilityLabel = {
	        'aria-label': ariaLabel,
	        'aria-labelledby': ariaLabelledBy
	      };
	      var className = cx("".concat(prefix$18, "--header__submenu"), customClassName); // Notes on eslint comments and based on the examples in:
	      // https://www.w3.org/TR/wai-aria-practices/examples/menubar/menubar-1/menubar-1.html#
	      // - The focus is handled by the <a> menuitem, onMouseOver is for mouse
	      // users
	      // - aria-haspopup can definitely have the value "menu"
	      // - aria-expanded is on their example node with role="menuitem"
	      // - href can be set to javascript:void(0), ideally this will be a button

	      return React__default.createElement("li", {
	        // eslint-disable-line jsx-a11y/mouse-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions
	        className: className,
	        "data-autoid": autoId,
	        onKeyDown: this.handleMenuClose,
	        onBlur: this.handleOnBlur
	      }, React__default.createElement("a", _extends_1(defineProperty({
	        // eslint-disable-line jsx-a11y/role-supports-aria-props,jsx-a11y/anchor-is-valid
	        "aria-haspopup": "menu" // eslint-disable-line jsx-a11y/aria-proptypes
	        ,
	        "aria-expanded": this.state.expanded,
	        className: "".concat(prefix$18, "--header__menu-item ").concat(prefix$18, "--header__menu-title"),
	        href: "#",
	        onClick: this.handleOnClick,
	        onKeyDown: this.handleOnKeyDown,
	        ref: this.handleMenuButtonRef,
	        role: "menuitem",
	        tabIndex: 0
	      }, "ref", this.menuLinkRef), accessibilityLabel), menuLinkName, React__default.createElement(MenuContent, null)), React__default.createElement("ul", _extends_1({}, accessibilityLabel, {
	        className: "".concat(prefix$18, "--header__menu"),
	        role: "menu"
	      }), React__default.Children.map(children, this._renderMenuItem)));
	    }
	    /**
	     * Render an individual menuitem, passing along `role: 'none'` because the
	     * host node <li> doesn't apply when in a <ul> with `role="menu"` and so we
	     * need to revert the semantics.
	     *
	     * We also capture the `ref` for each child inside of `this.items` to properly
	     * manage focus. In addition to this focus management, all items receive a
	     * `tabIndex: -1` so the user won't hit a large number of items in their tab
	     * sequence when they might not want to go through all the items.
	     */

	  }]);

	  return HeaderMenu;
	}(React__default.Component);

	defineProperty(HeaderMenu, "propTypes", _objectSpread$e({}, AriaLabelPropType, {
	  /**
	   * Provide a custom ref handler for the menu button
	   */
	  focusRef: PropTypes.func,

	  /**
	   * Optionally provide a tabIndex for the underlying menu button
	   */
	  tabIndex: PropTypes.number,

	  /**
	   * Provide a label for the link text
	   */
	  menuLinkName: PropTypes.string.isRequired,

	  /**
	   * Optional component to render instead of string
	   */
	  renderMenuContent: PropTypes.func,

	  /**
	   * function to toogle overlay that appears when opening menu
	   */
	  setOverlay: PropTypes.func
	}));

	defineProperty(HeaderMenu, "defaultProps", {
	  renderMenuContent: defaultRenderMenuContent,
	  setOverlay: function setOverlay() {}
	});

	var HeaderMenu$1 = React__default.forwardRef(function (props, ref) {
	  return React__default.createElement(HeaderMenu, _extends_1({}, props, {
	    focusRef: ref
	  }));
	});

	function ownKeys$h(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$f(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$h(Object(source), true).forEach(function (key) {
	        _defineProperty$k(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$h(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty$k(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$i(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$j(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$j(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	/**
	 * Link is a custom component that allows us to supporting rendering elements
	 * other than `a` in our markup. The goal is to allow users to support passing
	 * in their own components to support use-cases like `react-router` or
	 * `@reach/router`
	 */

	var Link$1 = /*#__PURE__*/React__default.forwardRef(function Link(props, ref) {
	  var element = props.element,
	      rest = _objectWithoutProperties$i(props, ["element"]);

	  return /*#__PURE__*/React__default.createElement(element, _objectSpread$f(_objectSpread$f({}, rest), {}, {
	    ref: ref
	  }));
	});
	var LinkPropTypes = {
	  /**
	   * The base element to use to build the link. Defaults to `a`, can also accept
	   * alternative tag names or custom components like `Link` from `react-router`.
	   */
	  element: PropTypes.elementType,

	  /**
	   * Property to indicate if the side nav container is open (or not). Use to
	   * keep local state and styling in step with the SideNav expansion state.
	   */
	  isSideNavExpanded: PropTypes.bool
	};
	Link$1.displayName = 'Link';
	Link$1.propTypes = LinkPropTypes;
	Link$1.defaultProps = {
	  element: 'a'
	};

	function ownKeys$i(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$g(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$i(Object(source), true).forEach(function (key) {
	        _defineProperty$l(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$i(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _extends$f() {
	  _extends$f = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$f.apply(this, arguments);
	}

	function _defineProperty$l(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$j(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$k(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$k(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$19 = settings_1.prefix;
	var HeaderMenuItem = /*#__PURE__*/React__default.forwardRef(function HeaderMenuItem(_ref, ref) {
	  var _cx;

	  var className = _ref.className,
	      isCurrentPage = _ref.isCurrentPage,
	      ariaCurrent = _ref['aria-current'],
	      children = _ref.children,
	      role = _ref.role,
	      rest = _objectWithoutProperties$j(_ref, ["className", "isCurrentPage", "aria-current", "children", "role"]);

	  var linkClassName = cx((_cx = {}, _defineProperty$l(_cx, "".concat(prefix$19, "--header__menu-item"), true), _defineProperty$l(_cx, "".concat(prefix$19, "--header__menu-item--current"), isCurrentPage && ariaCurrent !== 'page'), _cx));
	  return /*#__PURE__*/React__default.createElement("li", {
	    className: className,
	    role: role
	  }, /*#__PURE__*/React__default.createElement(Link$1, _extends$f({}, rest, {
	    "aria-current": ariaCurrent,
	    className: linkClassName,
	    ref: ref,
	    tabIndex: 0
	  }), /*#__PURE__*/React__default.createElement("span", {
	    className: "".concat(prefix$19, "--text-truncate--end")
	  }, children)));
	});
	HeaderMenuItem.propTypes = _objectSpread$g(_objectSpread$g({}, LinkPropTypes), {}, {
	  /**
	   * Optionally provide a custom class to apply to the underlying <li> node
	   */
	  className: PropTypes.string,

	  /**
	   * Pass in children that are either a string or can be read as a string by
	   * screen readers
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Optionally supply a role for the underlying <li> node. Useful for resetting
	   * <ul> semantics for menus.
	   */
	  role: PropTypes.string,

	  /**
	   * Applies selected styles to the item if a user sets this to true and aria-current !== 'page'.
	   */
	  isCurrentPage: PropTypes.bool
	});

	function ownKeys$j(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$h(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$j(Object(source), true).forEach(function (key) {
	        _defineProperty$m(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$j(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _typeof$4(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$4 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$4 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$4(obj);
	}

	function _extends$g() {
	  _extends$g = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$g.apply(this, arguments);
	}

	function _objectWithoutProperties$k(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$l(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$l(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _classCallCheck$6(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$6(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$6(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$6(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$6(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$5(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$4(subClass, superClass);
	}

	function _setPrototypeOf$4(o, p) {
	  _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$4(o, p);
	}

	function _createSuper$4(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$4(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$4(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$5(this, result);
	  };
	}

	function _possibleConstructorReturn$5(self, call) {
	  if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$6(self);
	}

	function _assertThisInitialized$6(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$4() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$4(o) {
	  _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$4(o);
	}

	function _defineProperty$m(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$1a = settings_1.prefix;

	var HeaderNavigation = /*#__PURE__*/function (_React$Component) {
	  _inherits$5(HeaderNavigation, _React$Component);

	  var _super = _createSuper$4(HeaderNavigation);

	  function HeaderNavigation(props) {
	    var _this;

	    _classCallCheck$6(this, HeaderNavigation);

	    _this = _super.call(this, props);

	    _defineProperty$m(_assertThisInitialized$6(_this), "handleItemRef", function (index) {
	      return function (node) {
	        _this.items[index] = node;
	      };
	    });

	    _defineProperty$m(_assertThisInitialized$6(_this), "_renderNavItem", function (child, index) {
	      if ( /*#__PURE__*/React__default.isValidElement(child)) {
	        return /*#__PURE__*/React__default.cloneElement(child, {
	          ref: _this.handleItemRef(index)
	        });
	      }
	    });

	    _this.items = [];
	    _this.state = {
	      selectedIndex: 0
	    };
	    return _this;
	  }
	  /**
	   * Handles individual menuitem refs. We assign them to a class instance
	   * property so that we can properly manage focus of our children.
	   */


	  _createClass$6(HeaderNavigation, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          ariaLabel = _this$props['aria-label'],
	          ariaLabelledBy = _this$props['aria-labelledby'],
	          children = _this$props.children,
	          customClassName = _this$props.className,
	          rest = _objectWithoutProperties$k(_this$props, ["aria-label", "aria-labelledby", "children", "className"]);

	      var className = cx("".concat(prefix$1a, "--header__nav"), customClassName); // Assign both label strategies in this option, only one should be defined
	      // so when we spread that should be the one that is applied to the node

	      var accessibilityLabel = {
	        'aria-label': ariaLabel,
	        'aria-labelledby': ariaLabelledBy
	      };
	      return /*#__PURE__*/React__default.createElement("nav", _extends$g({}, rest, accessibilityLabel, {
	        className: className
	      }), /*#__PURE__*/React__default.createElement("ul", _extends$g({}, accessibilityLabel, {
	        className: "".concat(prefix$1a, "--header__menu-bar"),
	        role: "menubar"
	      }), React__default.Children.map(children, this._renderNavItem)));
	    }
	    /**
	     * Render an individual menuitem, adding a `ref` for each child inside of
	     * `this.items` to properly manage focus.
	     */

	  }]);

	  return HeaderNavigation;
	}(React__default.Component);

	_defineProperty$m(HeaderNavigation, "propTypes", _objectSpread$h(_objectSpread$h({}, AriaLabelPropType), {}, {
	  /**
	   * Optionally provide a custom class to apply to the underlying <nav> node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide valid children of HeaderNavigation, for example `HeaderMenuItem`
	   * or `HeaderMenu`
	   */
	  children: PropTypes.node
	}));

	var stablePrefix$O = settings$1.stablePrefix;
	var prefix$1b = settings_1.prefix;
	/**
	 * MastHead L1 component.
	 */

	var MastheadL1 = function MastheadL1(_ref) {
	  var _cx;

	  var isShort = _ref.isShort,
	      title = _ref.title,
	      titleLink = _ref.titleLink,
	      eyebrowText = _ref.eyebrowText,
	      eyebrowLink = _ref.eyebrowLink,
	      navigationL1 = _ref.navigationL1,
	      rest = objectWithoutProperties(_ref, ["isShort", "title", "titleLink", "eyebrowText", "eyebrowLink", "navigationL1"]);

	  var className = cx((_cx = {}, defineProperty(_cx, "".concat(prefix$1b, "--masthead__l1"), true), defineProperty(_cx, "".concat(prefix$1b, "--masthead__l1--short"), isShort), _cx));
	  var mastheadL1Links = navigationL1.map(function (link, index) {
	    if (link.hasMenu) {
	      return React__default.createElement(HeaderMenu$1, {
	        "aria-label": link.title,
	        menuLinkName: link.title,
	        "data-autoid": "".concat(stablePrefix$O, "--masthead-").concat(rest.navType, "__l1-nav").concat(index),
	        key: index
	      }, renderNav(link.menuSections, rest.navType));
	    } else {
	      return React__default.createElement(HeaderMenuItem, {
	        href: link.url,
	        "data-autoid": "".concat(stablePrefix$O, "--masthead-").concat(rest.navType, "__l1-nav").concat(index),
	        key: index
	      }, link.title);
	    }
	  });
	  return React__default.createElement("div", {
	    className: className
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1b, "--masthead__l1-name")
	  }, eyebrowText && eyebrowLink && React__default.createElement("span", {
	    className: "".concat(prefix$1b, "--masthead__l1-name-eyebrow"),
	    "data-autoid": "".concat(stablePrefix$O, "--masthead-").concat(rest.navType, "__l1-productname")
	  }, React__default.createElement(ArrowLeft16, null), React__default.createElement("a", {
	    href: eyebrowLink
	  }, eyebrowText)), React__default.createElement("span", {
	    className: "".concat(prefix$1b, "--masthead__l1-name-title")
	  }, React__default.createElement("a", {
	    href: titleLink
	  }, title))), React__default.createElement(HeaderNavigation, {
	    className: "".concat(prefix$1b, "--masthead__l1-nav"),
	    "aria-label": ""
	  }, mastheadL1Links));
	};
	/**
	 * Loops through and renders a list of links for the masthead nav
	 *
	 * @param {Array} sections A list of links to be rendered
	 * @param {string} navType navigation type for autoids
	 * @returns {object} JSX object
	 */


	function renderNav(sections, navType) {
	  var navItems = [];
	  sections.forEach(function (section, i) {
	    section.menuItems.forEach(function (item, j) {
	      navItems.push(React__default.createElement(HeaderMenuItem, {
	        href: item.url,
	        "data-autoid": "".concat(stablePrefix$O, "--masthead-").concat(navType, "__l1-nav").concat(i, "-item").concat(j),
	        key: item.title
	      }, item.title));
	    });
	  });
	  return navItems;
	}

	MastheadL1.propTypes = {
	  /**
	   * `true` to make this L1 short.
	   */
	  isShort: PropTypes.bool,

	  /**
	   * The title (experimental).
	   */
	  title: PropTypes.string,

	  /**
	   * The optional title link (experimental)
	   */
	  titleLink: PropTypes.string,

	  /**
	   * Text for the eyebrow link (experimental).
	   */
	  eyebrowText: PropTypes.string,

	  /**
	   * URL for the eyebrow link (experimental).
	   */
	  eyebrowLink: PropTypes.string,

	  /**
	   * Object containing masthead l1 navigation elements.
	   */
	  navigationL1: PropTypes.arrayOf(PropTypes.shape({
	    hasMenu: PropTypes.bool,
	    title: PropTypes.string,
	    url: PropTypes.string,
	    menuSections: PropTypes.arrayOf(PropTypes.shape({
	      menuItems: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        url: PropTypes.string
	      }))
	    }))
	  }))
	};
	MastheadL1.defaultProps = {
	  navigationL1: [],
	  titleLink: null
	};

	function _defineProperty$n(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$1c = settings_1.prefix;

	var HeaderSideNavItems = function HeaderSideNavItems(_ref) {
	  var _cx;

	  var customClassName = _ref.className,
	      children = _ref.children,
	      hasDivider = _ref.hasDivider;
	  var className = cx((_cx = {}, _defineProperty$n(_cx, "".concat(prefix$1c, "--side-nav__header-navigation"), true), _defineProperty$n(_cx, "".concat(prefix$1c, "--side-nav__header-divider"), hasDivider), _cx), customClassName);
	  return /*#__PURE__*/React__default.createElement("div", {
	    className: className
	  }, children);
	};

	HeaderSideNavItems.propTypes = {
	  /**
	   * Optionally provide a custom class name that is applied to the underlying
	   * button
	   */
	  className: PropTypes.string,

	  /**
	   * Optionally specify if container will have a bottom divider to differentiate
	   * between original sidenav items and header menu items. False by default.
	   */
	  hasDivider: PropTypes.bool,

	  /**
	   * The child nodes to be rendered
	   */
	  children: PropTypes.node
	};
	HeaderSideNavItems.defaultProps = {
	  hasDivider: false
	};

	function ownKeys$k(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$i(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$k(Object(source), true).forEach(function (key) {
	        _defineProperty$o(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$k(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _extends$h() {
	  _extends$h = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$h.apply(this, arguments);
	}

	function _defineProperty$o(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _slicedToArray$5(arr, i) {
	  return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest$5();
	}

	function _nonIterableRest$5() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _unsupportedIterableToArray$4(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
	}

	function _arrayLikeToArray$4(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _iterableToArrayLimit$5(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayWithHoles$5(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	// import SideNavFooter from './SideNavFooter';

	var prefix$1d = settings_1.prefix;
	var SideNav = /*#__PURE__*/React__default.forwardRef(function SideNav(props, ref) {
	  var _cx, _cx2;

	  var expandedProp = props.expanded,
	      defaultExpanded = props.defaultExpanded,
	      isChildOfHeader = props.isChildOfHeader,
	      ariaLabel = props['aria-label'],
	      ariaLabelledBy = props['aria-labelledby'],
	      children = props.children,
	      onToggle = props.onToggle,
	      customClassName = props.className,
	      isFixedNav = props.isFixedNav,
	      isRail = props.isRail,
	      isPersistent = props.isPersistent,
	      addFocusListeners = props.addFocusListeners,
	      addMouseListeners = props.addMouseListeners;

	  var _useRef = React.useRef(expandedProp !== undefined),
	      controlled = _useRef.current;

	  var _useState = React.useState(defaultExpanded),
	      _useState2 = _slicedToArray$5(_useState, 2),
	      expandedState = _useState2[0],
	      setExpandedState = _useState2[1];

	  var _useState3 = React.useState(defaultExpanded),
	      _useState4 = _slicedToArray$5(_useState3, 2),
	      expandedViaHoverState = _useState4[0],
	      setExpandedViaHoverState = _useState4[1];

	  var expanded = controlled ? expandedProp : expandedState;

	  var handleToggle = function handleToggle(event) {
	    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;

	    if (!controlled) {
	      setExpandedState(value);
	    }

	    if (onToggle) {
	      onToggle(event, value);
	    }

	    if (controlled || isRail) {
	      setExpandedViaHoverState(value);
	    }
	  };

	  var accessibilityLabel = {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy
	  }; // TO-DO: comment back in when footer is added for rails
	  // const assistiveText = expanded
	  //   ? t('carbon.sidenav.state.open')
	  //   : t('carbon.sidenav.state.closed');

	  var className = cx((_cx = {}, _defineProperty$o(_cx, "".concat(prefix$1d, "--side-nav"), true), _defineProperty$o(_cx, "".concat(prefix$1d, "--side-nav--expanded"), expanded || expandedViaHoverState), _defineProperty$o(_cx, "".concat(prefix$1d, "--side-nav--collapsed"), !expanded && isFixedNav), _defineProperty$o(_cx, "".concat(prefix$1d, "--side-nav--rail"), isRail), _defineProperty$o(_cx, customClassName, !!customClassName), _defineProperty$o(_cx, "".concat(prefix$1d, "--side-nav--ux"), isChildOfHeader), _defineProperty$o(_cx, "".concat(prefix$1d, "--side-nav--hidden"), !isPersistent), _cx));
	  var overlayClassName = cx((_cx2 = {}, _defineProperty$o(_cx2, "".concat(prefix$1d, "--side-nav__overlay"), true), _defineProperty$o(_cx2, "".concat(prefix$1d, "--side-nav__overlay-active"), expanded), _cx2));
	  var childrenToRender = children; // if a rail, pass the expansion state as a prop, so children can update themselves to match

	  if (isRail) {
	    childrenToRender = React__default.Children.map(children, function (child) {
	      // if we are controlled, check for if we have hovered over or the expanded state, else just use the expanded state (uncontrolled)
	      var currentExpansionState = controlled ? expandedViaHoverState || expanded : expanded;
	      return /*#__PURE__*/React__default.cloneElement(child, {
	        isSideNavExpanded: currentExpansionState
	      });
	    });
	  }

	  var eventHandlers = {};

	  if (addFocusListeners) {
	    eventHandlers.onFocus = function (event) {
	      if (!event.currentTarget.contains(event.relatedTarget)) {
	        handleToggle(event, true);
	      }
	    };

	    eventHandlers.onBlur = function (event) {
	      if (!event.currentTarget.contains(event.relatedTarget)) {
	        handleToggle(event, false);
	      }
	    };
	  }

	  if (addMouseListeners && isRail) {
	    eventHandlers.onMouseEnter = function () {
	      return handleToggle(true, true);
	    };

	    eventHandlers.onMouseLeave = function () {
	      return handleToggle(false, false);
	    };
	  }

	  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, isFixedNav ? null : /*#__PURE__*/React__default.createElement("div", {
	    className: overlayClassName
	  }), /*#__PURE__*/React__default.createElement("nav", _extends$h({
	    ref: ref,
	    className: "".concat(prefix$1d, "--side-nav__navigation ").concat(className)
	  }, accessibilityLabel, eventHandlers), childrenToRender));
	});
	SideNav.defaultProps = {
	  translateById: function translateById(id) {
	    var translations = {
	      'carbon.sidenav.state.open': 'Close',
	      'carbon.sidenav.state.closed': 'Open'
	    };
	    return translations[id];
	  },
	  defaultExpanded: false,
	  isChildOfHeader: true,
	  isFixedNav: false,
	  isPersistent: true,
	  addFocusListeners: true,
	  addMouseListeners: true
	};
	SideNav.propTypes = _objectSpread$i(_objectSpread$i({
	  /**
	   * If `true`, the SideNav will be expanded, otherwise it will be collapsed.
	   * Using this prop causes SideNav to become a controled component.
	   */
	  expanded: PropTypes.bool,

	  /**
	   * If `true`, the SideNav will be open on initial render.
	   */
	  defaultExpanded: PropTypes.bool,

	  /**
	   * An optional listener that is called when an event that would cause
	   * toggling the SideNav occurs.
	   *
	   * @param {object} event
	   * @param {boolean} value
	   */
	  onToggle: PropTypes.func
	}, AriaLabelPropType), {}, {
	  /**
	   * Optionally provide a custom class to apply to the underlying <li> node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide a custom function for translating all message ids within this
	   * component. This function will take in two arguments: the mesasge Id and the
	   * state of the component. From this, you should return a string representing
	   * the label you want displayed or read by screen readers.
	   */
	  translateById: PropTypes.func,

	  /**
	   * Optionally provide a custom class to apply to the underlying <li> node
	   */
	  isChildOfHeader: PropTypes.bool,

	  /**
	   * Optional prop to display the side nav rail.
	   */
	  isRail: PropTypes.bool,

	  /**
	   * Specify if sideNav is standalone
	   */
	  isFixedNav: PropTypes.bool,

	  /**
	   * Specify if the sideNav will be persistent above the lg breakpoint
	   */
	  isPersistent: PropTypes.bool,

	  /**
	   * Specify whether focus and blur listeners are added. They are by default.
	   */
	  addFocusListeners: PropTypes.bool,

	  /**
	   * Specify whether mouse entry/exit listeners are added. They are by default.
	   */
	  addMouseListeners: PropTypes.bool
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var prefix$1e = settings_1.prefix;

	var SideNavItems = function SideNavItems(_ref) {
	  var customClassName = _ref.className,
	      children = _ref.children,
	      isSideNavExpanded = _ref.isSideNavExpanded;
	  var className = cx(["".concat(prefix$1e, "--side-nav__items")], customClassName);
	  var childrenWithExpandedState = React__default.Children.map(children, function (child) {
	    if ( /*#__PURE__*/React__default.isValidElement(child)) {
	      return /*#__PURE__*/React__default.cloneElement(child, {
	        isSideNavExpanded: isSideNavExpanded
	      });
	    }
	  });
	  return /*#__PURE__*/React__default.createElement("ul", {
	    className: className
	  }, childrenWithExpandedState);
	};

	SideNavItems.propTypes = {
	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide a single icon as the child to `SideNavIcon` to render in the
	   * container
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Property to indicate if the side nav container is open (or not). Use to
	   * keep local state and styling in step with the SideNav expansion state.
	   */
	  isSideNavExpanded: PropTypes.bool
	};

	function _defineProperty$p(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$1f = settings_1.prefix;

	var SideNavIcon = function SideNavIcon(_ref) {
	  var _cx;

	  var children = _ref.children,
	      customClassName = _ref.className,
	      small = _ref.small;
	  var className = cx((_cx = {}, _defineProperty$p(_cx, "".concat(prefix$1f, "--side-nav__icon"), true), _defineProperty$p(_cx, "".concat(prefix$1f, "--side-nav__icon--small"), small), _defineProperty$p(_cx, customClassName, !!customClassName), _cx));
	  return /*#__PURE__*/React__default.createElement("div", {
	    className: className
	  }, children);
	};

	SideNavIcon.propTypes = {
	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide a single icon as the child to `SideNavIcon` to render in the
	   * container
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Specify whether the icon should be placed in a smaller bounding box
	   */
	  small: PropTypes.bool.isRequired
	};
	SideNavIcon.defaultProps = {
	  small: false
	};

	function _defineProperty$q(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$1g = settings_1.prefix;

	var SideNavItem = function SideNavItem(_ref) {
	  var _cx;

	  var customClassName = _ref.className,
	      children = _ref.children,
	      _ref$large = _ref.large,
	      large = _ref$large === void 0 ? false : _ref$large;
	  var className = cx((_cx = {}, _defineProperty$q(_cx, "".concat(prefix$1g, "--side-nav__item"), true), _defineProperty$q(_cx, "".concat(prefix$1g, "--side-nav__item--large"), large), _defineProperty$q(_cx, customClassName, !!customClassName), _cx));
	  return /*#__PURE__*/React__default.createElement("li", {
	    className: className
	  }, children);
	};

	SideNavItem.propTypes = {
	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide a single icon as the child to `SideNavIcon` to render in the
	   * container
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Specify if this is a large variation of the SideNavItem
	   */
	  large: PropTypes.bool
	};

	function _extends$i() {
	  _extends$i = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$i.apply(this, arguments);
	}

	function _objectWithoutProperties$l(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$m(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$m(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$1h = settings_1.prefix;

	var SideNavLinkText = function SideNavLinkText(_ref) {
	  var customClassName = _ref.className,
	      children = _ref.children,
	      rest = _objectWithoutProperties$l(_ref, ["className", "children"]);

	  var className = cx("".concat(prefix$1h, "--side-nav__link-text"), customClassName);
	  return /*#__PURE__*/React__default.createElement("span", _extends$i({}, rest, {
	    className: className
	  }), children);
	};

	SideNavLinkText.propTypes = {
	  /**
	   * Provide the content for the link text
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string
	};

	function ownKeys$l(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$j(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$l(Object(source), true).forEach(function (key) {
	        _defineProperty$r(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$l(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _extends$j() {
	  _extends$j = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$j.apply(this, arguments);
	}

	function _defineProperty$r(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$m(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$n(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$n(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$1i = settings_1.prefix;

	var SideNavLink = function SideNavLink(_ref) {
	  var _cx;

	  var customClassName = _ref.className,
	      children = _ref.children,
	      IconElement = _ref.renderIcon,
	      isActive = _ref.isActive,
	      large = _ref.large,
	      rest = _objectWithoutProperties$m(_ref, ["className", "children", "renderIcon", "isActive", "large", "isSideNavExpanded"]);

	  var className = cx((_cx = {}, _defineProperty$r(_cx, "".concat(prefix$1i, "--side-nav__link"), true), _defineProperty$r(_cx, "".concat(prefix$1i, "--side-nav__link--current"), isActive), _defineProperty$r(_cx, customClassName, !!customClassName), _cx));
	  return /*#__PURE__*/React__default.createElement(SideNavItem, {
	    large: large
	  }, /*#__PURE__*/React__default.createElement(Link$1, _extends$j({}, rest, {
	    className: className
	  }), IconElement && /*#__PURE__*/React__default.createElement(SideNavIcon, {
	    small: true
	  }, /*#__PURE__*/React__default.createElement(IconElement, null)), /*#__PURE__*/React__default.createElement(SideNavLinkText, null, children)));
	};

	SideNavLink.propTypes = _objectSpread$j(_objectSpread$j({}, LinkPropTypes), {}, {
	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide an icon to render in the side navigation link. Should be a React class.
	   */
	  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

	  /**
	   * Specify the text content for the link
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Property to indicate if the side nav container is open (or not). Use to
	   * keep local state and styling in step with the SideNav expansion state.
	   */
	  isSideNavExpanded: PropTypes.bool,

	  /**
	   * Specify if this is a large variation of the SideNavLink
	   */
	  large: PropTypes.bool
	});
	SideNavLink.defaultProps = {
	  element: 'a',
	  large: false
	};

	function _extends$k() {
	  _extends$k = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$k.apply(this, arguments);
	}

	function _defineProperty$s(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$n(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$o(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$o(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$1j = settings_1.prefix;
	var SideNavMenuItem = /*#__PURE__*/React__default.forwardRef(function SideNavMenuItem(props, ref) {
	  var _cx;

	  var children = props.children,
	      customClassName = props.className,
	      isActive = props.isActive,
	      rest = _objectWithoutProperties$n(props, ["children", "className", "isActive"]);

	  var className = cx("".concat(prefix$1j, "--side-nav__menu-item"), customClassName);
	  var linkClassName = cx((_cx = {}, _defineProperty$s(_cx, "".concat(prefix$1j, "--side-nav__link"), true), _defineProperty$s(_cx, "".concat(prefix$1j, "--side-nav__link--current"), isActive), _cx));
	  return /*#__PURE__*/React__default.createElement("li", {
	    className: className
	  }, /*#__PURE__*/React__default.createElement(Link$1, _extends$k({}, rest, {
	    className: linkClassName,
	    ref: ref
	  }), /*#__PURE__*/React__default.createElement(SideNavLinkText, null, children)));
	});
	SideNavMenuItem.propTypes = {
	  /**
	   * Specify the childrento be rendered inside of the `SideNavMenuItem`
	   */
	  children: PropTypes.node,

	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Optionally specify whether the link is "active". An active link is one that
	   * has an href that is the same as the current page. Can also pass in
	   * `aria-current="page"`, as well.
	   */
	  isActive: PropTypes.bool
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$l =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M10 16L20 6 21.4 7.4 12.8 16 21.4 24.6 20 26z"
	});

	var ChevronLeft20 = /*#__PURE__*/React__default.forwardRef(function ChevronLeft20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$l, children);
	});

	var prefix$1k = settings_1.prefix;

	var SideNavIcon$1 = function SideNavIcon(_ref) {
	  var _cx;

	  var children = _ref.children,
	      customClassName = _ref.className,
	      small = _ref.small;
	  var className = cx((_cx = {}, defineProperty(_cx, "".concat(prefix$1k, "--side-nav__icon"), true), defineProperty(_cx, "".concat(prefix$1k, "--side-nav__icon--small"), small), defineProperty(_cx, customClassName, !!customClassName), _cx));
	  return React__default.createElement("div", {
	    className: className
	  }, children);
	};

	SideNavIcon$1.propTypes = {
	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide a single icon as the child to `SideNavIcon` to render in the
	   * container
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Specify whether the icon should be placed in a smaller bounding box
	   */
	  small: PropTypes.bool.isRequired
	};
	SideNavIcon$1.defaultProps = {
	  small: false
	};

	var prefix$1l = settings_1.prefix;
	var SideNavMenu = /*#__PURE__*/function (_React$Component) {
	  inherits(SideNavMenu, _React$Component);

	  function SideNavMenu(props) {
	    var _this;

	    classCallCheck(this, SideNavMenu);

	    _this = possibleConstructorReturn(this, getPrototypeOf(SideNavMenu).call(this, props));

	    defineProperty(assertThisInitialized(_this), "handleToggleExpand", function (event) {
	      var onToggle = _this.props.onToggle;
	      event.persist();

	      _this.setState(function (state) {
	        return {
	          isExpanded: !state.isExpanded
	        };
	      }, function () {
	        if (onToggle) {
	          onToggle(event, {
	            isExpanded: _this.state.isExpanded
	          });
	        }
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleKeyToggleExpand", function (event) {
	      if (event.charCode === 13 || event.charCode === ' ') {
	        var onToggle = _this.props.onToggle;
	        event.persist();

	        _this.setState(function (state) {
	          return {
	            isExpanded: !state.isExpanded
	          };
	        }, function () {
	          if (onToggle) {
	            onToggle(event, {
	              isExpanded: _this.state.isExpanded
	            });
	          }
	        });
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "_renderSideNavItem", function (item, index) {
	      if (item) {
	        return React__default.cloneElement(item, {
	          onClick: item.props.isbackbutton === 'true' ? _this.handleToggleExpand.bind(assertThisInitialized(_this)) : null,
	          onKeyPress: item.props.isbackbutton === 'true' ? _this.handleKeyToggleExpand.bind(assertThisInitialized(_this)) : null
	        });
	      }
	    });

	    _this.state = {
	      isExpanded: props.defaultExpanded || false,
	      wasPreviouslyExpanded: props.defaultExpanded || false
	    };
	    return _this;
	  }

	  createClass(SideNavMenu, [{
	    key: "render",
	    value: function render() {
	      var _cx;

	      var _this$props = this.props,
	          buttonRef = _this$props.buttonRef,
	          customClassName = _this$props.className,
	          children = _this$props.children,
	          IconElement = _this$props.renderIcon,
	          isActive = _this$props.isActive,
	          title = _this$props.title,
	          large = _this$props.large,
	          rest = objectWithoutProperties(_this$props, ["buttonRef", "className", "children", "renderIcon", "isActive", "title", "large", "isbackbutton"]);

	      var isExpanded = this.state.isExpanded;
	      var hasActiveChild;

	      if (children) {
	        // if we have children, either a single or multiple, find if it is active
	        hasActiveChild = Array.isArray(children) ? children.some(function (child) {
	          if (child && child.props && (child.props.isActive === true || child.props['aria-current'])) {
	            return true;
	          }

	          return false;
	        }) : children.props && (children.props.isActive === true || children.props['aria-current']);
	      }

	      var className = cx((_cx = {}, defineProperty(_cx, "".concat(prefix$1l, "--side-nav__item"), true), defineProperty(_cx, "".concat(prefix$1l, "--side-nav__item--active"), isActive || hasActiveChild && !isExpanded), defineProperty(_cx, "".concat(prefix$1l, "--side-nav__item--icon"), IconElement), defineProperty(_cx, "".concat(prefix$1l, "--side-nav__item--large"), large), defineProperty(_cx, customClassName, !!customClassName), _cx));
	      return React__default.createElement("li", {
	        className: className
	      }, React__default.createElement("button", {
	        "aria-haspopup": "true",
	        "aria-expanded": isExpanded,
	        className: "".concat(prefix$1l, "--side-nav__submenu"),
	        onClick: this.handleToggleExpand,
	        ref: buttonRef,
	        type: "button"
	      }, IconElement && React__default.createElement(SideNavIcon$1, null, React__default.createElement(IconElement, null)), React__default.createElement("span", {
	        className: "".concat(prefix$1l, "--side-nav__submenu-title"),
	        "data-autoid": "".concat(rest.autoid)
	      }, title), React__default.createElement(SideNavIcon$1, {
	        className: "".concat(prefix$1l, "--side-nav__submenu-chevron"),
	        small: true
	      }, React__default.createElement(ChevronDown20, null))), React__default.createElement("ul", {
	        className: "".concat(prefix$1l, "--side-nav__menu"),
	        role: "menu"
	      }, React__default.Children.map(children, this._renderSideNavItem)));
	    }
	  }]);

	  return SideNavMenu;
	}(React__default.Component);

	defineProperty(SideNavMenu, "propTypes", {
	  /**
	   * Provide an optional class to be applied to the containing node
	   */
	  className: PropTypes.string,

	  /**
	   * Provide <SideNavMenuItem>'s inside of the `SideNavMenu`
	   */
	  children: PropTypes.node,

	  /**
	   * Pass in a custom icon to render next to the `SideNavMenu` title
	   */
	  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

	  /**
	   * Specify whether the `SideNavMenu` is "active". `SideNavMenu` should be
	   * considered active if one of its menu items are a link for the current
	   * page.
	   */
	  isActive: PropTypes.bool,

	  /**
	   * Provide the text for the overall menu name
	   */
	  title: PropTypes.string.isRequired,

	  /**
	   * Specify whether the menu should default to expanded. By default, it will
	   * be closed.
	   */
	  defaultExpanded: PropTypes.bool,

	  /**
	   * Property to indicate if the side nav container is open (or not). Use to
	   * keep local state and styling in step with the SideNav expansion state.
	   */
	  isSideNavExpanded: PropTypes.bool,

	  /**
	   * Specify if this is a large variation of the SideNavMenu
	   */
	  large: PropTypes.bool,

	  /**
	   * For submenu back button to toggle expand/collapse
	   */
	  isbackbutton: PropTypes.string,

	  /**
	   * A callback that is called when this side nav menu is toggled by user gesture.
	   */
	  onToggle: PropTypes.func
	});

	defineProperty(SideNavMenu, "defaultProps", {
	  defaultExpanded: false,
	  isActive: false,
	  large: false
	});

	defineProperty(SideNavMenu, "getDerivedStateFromProps", function (props, state) {
	  var derivedState = null;

	  if (props.isSideNavExpanded === false && state.isExpanded === true) {
	    derivedState = {
	      isExpanded: props.isSideNavExpanded,
	      wasPreviouslyExpanded: true
	    };
	  } else if (props.isSideNavExpanded === true && state.wasPreviouslyExpanded === true) {
	    derivedState = {
	      isExpanded: props.isSideNavExpanded,
	      wasPreviouslyExpanded: false
	    };
	  }

	  return derivedState;
	});

	var SideNavMenu$1 = React__default.forwardRef(function (props, ref) {
	  return React__default.createElement(SideNavMenu, _extends_1({}, props, {
	    buttonRef: ref
	  }));
	});

	var stablePrefix$P = settings$1.stablePrefix;
	var prefix$1m = settings_1.prefix;
	/**
	 * Side nav menu with back button
	 *
	 * @returns {*} SideNavMenuWithBackFoward menu items
	 */

	var SideNavMenuWithBackForward = function SideNavMenuWithBackForward(_ref) {
	  var title = _ref.title,
	      titleUrl = _ref.titleUrl,
	      backButtonText = _ref.backButtonText,
	      children = _ref.children,
	      rest = objectWithoutProperties(_ref, ["title", "titleUrl", "backButtonText", "children"]);

	  var refSideNavMenu = React.useRef(null);
	  var handleToggle = React.useCallback(function (event, detail) {
	    var sideNavMenuNode = refSideNavMenu.current;
	    var sideNav = sideNavMenuNode.closest('.bx--side-nav');

	    if (sideNav) {
	      var list = Array.prototype.forEach.call(sideNav.querySelectorAll('.bx--side-nav__menu'), function (elem) {
	        var hasExpandedSubmenu = elem.querySelector('.bx--side-nav__submenu[aria-expanded="true"]');
	        elem.classList.toggle('bx--side-nav__menu--hasactivechildren', hasExpandedSubmenu);
	      });
	    }
	  }, []);
	  return React__default.createElement(SideNavMenu$1, {
	    autoid: rest.autoid,
	    title: title,
	    onToggle: handleToggle,
	    ref: refSideNavMenu
	  }, React__default.createElement(SideNavMenuItem, {
	    onClick: function onClick(event) {
	      return event.preventDefault();
	    },
	    className: "".concat(prefix$1m, "--masthead__side-nav--submemu-back"),
	    "data-autoid": "".concat(stablePrefix$P, "--masthead-").concat(rest.navType, "-sidenav__l0-back"),
	    isbackbutton: "true",
	    role: "button",
	    tabIndex: "0"
	  }, React__default.createElement(ChevronLeft20, null), backButtonText), titleUrl ? React__default.createElement(SideNavLink, {
	    className: "".concat(prefix$1m, "--masthead__side-nav--submemu-section-title"),
	    href: titleUrl
	  }, title, React__default.createElement("div", {
	    className: "".concat(prefix$1m, "--masthead__side-nav--submemu-section-title__icon")
	  }, React__default.createElement(ArrowRight20, null))) : React__default.createElement("li", {
	    className: "".concat(prefix$1m, "--masthead__side-nav--submemu-title")
	  }, title), children);
	};

	SideNavMenuWithBackForward.propTypes = {
	  /**
	   * Submenu nav section title
	   */
	  title: PropTypes.string.isRequired,

	  /**
	   * Submenu nav section title url
	   */
	  titleUrl: PropTypes.string,

	  /**
	   * Back button text
	   */
	  backButtonText: PropTypes.string,

	  /**
	   * Sidenav child elements to be rendered
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])
	};

	var stablePrefix$Q = settings$1.stablePrefix;
	var prefix$1n = settings_1.prefix;
	/**
	 * Masthead left nav component.
	 */

	var MastheadLeftNav = function MastheadLeftNav(_ref) {
	  var backButtonText = _ref.backButtonText,
	      navigation = _ref.navigation,
	      isSideNavExpanded = _ref.isSideNavExpanded,
	      platform = _ref.platform,
	      rest = objectWithoutProperties(_ref, ["backButtonText", "navigation", "isSideNavExpanded", "platform"]);

	  var sideNavRef = React.useRef();

	  var preventOutFocus = function preventOutFocus() {
	    if (isSideNavExpanded && React.useRef) {
	      var _sideNavRef$current;

	      (_sideNavRef$current = sideNavRef.current) === null || _sideNavRef$current === void 0 ? void 0 : _sideNavRef$current.parentNode.querySelector(".".concat(prefix$1n, "--header__menu-toggle")).focus();
	    }
	  };
	  /**
	   * Left side navigation
	   *
	   * @returns {*} Left side navigation
	   */


	  var sideNav = navigation.map(function (link, i) {
	    if (link.hasMenu) {
	      var autoid = "".concat(stablePrefix$Q, "--masthead-").concat(rest.navType, "-sidenav__l0-nav").concat(i);

	      if (navigation.length === i + 1) {
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement(SideNavMenuWithBackForward, {
	          title: link.title,
	          backButtonText: backButtonText,
	          key: i,
	          autoid: autoid,
	          navType: rest.navType
	        }, renderNavSections(link.menuSections, backButtonText, autoid, rest.navType)), React__default.createElement("button", {
	          className: "".concat(prefix$1n, "--masthead__focus"),
	          onFocus: preventOutFocus,
	          "aria-hidden": true
	        }));
	      }

	      return React__default.createElement(SideNavMenuWithBackForward, {
	        title: link.title,
	        backButtonText: backButtonText,
	        key: i,
	        autoid: autoid,
	        navType: rest.navType
	      }, renderNavSections(link.menuSections, backButtonText, autoid, rest.navType));
	    } else {
	      if (navigation.length === i + 1) {
	        return React__default.createElement(React__default.Fragment, null, React__default.createElement(SideNavLink, {
	          href: link.url,
	          "data-autoid": "".concat(stablePrefix$Q, "--masthead-").concat(rest.navType, "-sidenav__l0-nav").concat(i),
	          key: i
	        }, link.title), React__default.createElement("button", {
	          className: "".concat(prefix$1n, "--masthead__focus}"),
	          onFocus: preventOutFocus,
	          "aria-hidden": true,
	          href: "#"
	        }));
	      }

	      return React__default.createElement(SideNavLink, {
	        href: link.url,
	        "data-autoid": "".concat(stablePrefix$Q, "--masthead-").concat(rest.navType, "-sidenav__l0-nav").concat(i),
	        key: i
	      }, link.title);
	    }
	  });
	  return React__default.createElement(SideNav, {
	    "aria-label": "Side navigation",
	    expanded: isSideNavExpanded,
	    isPersistent: false,
	    ref: sideNavRef
	  }, React__default.createElement("nav", {
	    "data-autoid": "".concat(stablePrefix$Q, "--masthead-").concat(rest.navType, "-sidenav__l0")
	  }, platform && React__default.createElement("a", {
	    // eslint-disable-line jsx-a11y/role-supports-aria-props
	    "data-autoid": "".concat(stablePrefix$Q, "--masthead-").concat(rest.navType, "-sidenav__l0-productname"),
	    href: platform.url,
	    "aria-haspopup": "true",
	    className: "".concat(prefix$1n, "--side-nav__submenu ").concat(prefix$1n, "--side-nav__submenu-platform")
	  }, platform.name), React__default.createElement(SideNavItems, null, React__default.createElement(HeaderSideNavItems, null, sideNav))));
	};
	/**
	 * Loops through and renders a list of links for the side nav
	 *
	 * @param {Array} sections A list of link sections to be rendered
	 * @param {string} backButtonText back button text
	 * @param {string} autoid autoid predecessor
	 * @param {string} navType navigation type
	 * @returns {object} JSX object
	 */


	function renderNavSections(sections, backButtonText, autoid, navType) {
	  var sectionItems = [];
	  sections.forEach(function (section) {
	    section.menuItems.forEach(function (item, j) {
	      var dataAutoId = "".concat(autoid, "-list").concat(j);

	      if (item.megapanelContent) {
	        sectionItems.push(React__default.createElement(SideNavMenuWithBackForward, {
	          title: item.title,
	          titleUrl: item.url,
	          backButtonText: backButtonText,
	          autoid: dataAutoId,
	          navType: navType,
	          key: j
	        }, renderNavItem(item.megapanelContent.quickLinks.links, dataAutoId)));
	      } else {
	        sectionItems.push(React__default.createElement(SideNavMenuItem, {
	          href: item.url,
	          "data-autoid": dataAutoId,
	          key: item.title
	        }, item.title));
	      }
	    });
	  });
	  return sectionItems;
	}
	/**
	 * Loops through and renders a list of links for the side nav
	 *
	 * @param {Array} items A list of links to be rendered
	 * @param {string} autoid autoid predecessor
	 * @returns {object} JSX object
	 */


	function renderNavItem(items, autoid) {
	  var navItems = [];
	  items.forEach(function (item, i) {
	    var dataAutoId = "".concat(autoid, "-item").concat(i);
	    navItems.push(React__default.createElement(SideNavMenuItem, {
	      href: item.url,
	      "data-autoid": dataAutoId,
	      key: item.title
	    }, item.title));
	  });
	  return navItems;
	}

	MastheadLeftNav.propTypes = {
	  /**
	   * Back button text
	   */
	  backButtonText: PropTypes.string,

	  /**
	   * Object containing left navigation elements.
	   */
	  navigation: PropTypes.arrayOf(PropTypes.shape({
	    hasMenu: PropTypes.bool,
	    title: PropTypes.string,
	    url: PropTypes.string,
	    menuSections: PropTypes.arrayOf(PropTypes.shape({
	      menuItems: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        url: PropTypes.string
	      }))
	    }))
	  })),

	  /**
	   * `true` to make the sidenav expanded.
	   */
	  isSideNavExpanded: PropTypes.bool,

	  /**
	   * Platform object with name and url
	   */
	  platform: PropTypes.shape({
	    name: PropTypes.string,
	    url: PropTypes.string
	  })
	};
	MastheadLeftNav.defaultProps = {
	  backButtonText: 'Back'
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;

	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame

	    throw error;
	  }
	};

	var browser$2 = invariant;

	function _typeof$5(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$5 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$5 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$5(obj);
	}

	function _classCallCheck$7(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$7(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$7(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$7(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$6(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$5(subClass, superClass);
	}

	function _setPrototypeOf$5(o, p) {
	  _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$5(o, p);
	}

	function _createSuper$5(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$5(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$5(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$6(this, result);
	  };
	}

	function _possibleConstructorReturn$6(self, call) {
	  if (call && (_typeof$5(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$7(self);
	}

	function _assertThisInitialized$7(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$5() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$5(o) {
	  _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$5(o);
	}

	function _defineProperty$t(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	/**
	 * Generic component used for reacting to a click event happening outside of a
	 * given `children` element.
	 */

	var ClickListener = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(ClickListener, _React$Component);

	  var _super = _createSuper$5(ClickListener);

	  function ClickListener(props) {
	    var _this;

	    _classCallCheck$7(this, ClickListener);

	    _this = _super.call(this, props); // We manually bind handlers in this Component, versus using class
	    // properties, so that we can properly test the `handleRef` handler with
	    // enzyme.

	    _this.handleRef = _this.handleRef.bind(_assertThisInitialized$7(_this));
	    _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized$7(_this));
	    return _this;
	  }

	  _createClass$7(ClickListener, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      document.addEventListener('click', this.handleDocumentClick);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      document.removeEventListener('click', this.handleDocumentClick);
	    }
	  }, {
	    key: "handleDocumentClick",
	    value: function handleDocumentClick(evt) {
	      if (this.element) {
	        if (this.element.contains && !this.element.contains(evt.target)) {
	          this.props.onClickOutside(evt);
	        }
	      }
	    }
	  }, {
	    key: "handleRef",
	    value: function handleRef(el) {
	      var children = this.props.children;
	      this.element = el;
	      /**
	       * One important note, `children.ref` corresponds to a `ref` prop passed in
	       * directly to the child, not necessarily a `ref` defined in the component.
	       * This means that here we target the following `ref` location:
	       *
	       * <ClickListener onClickOutside={() => {}}>
	       *   <Child ref={targetedRefHere} />
	       * </ClickListener>
	       */

	      if (children.ref && typeof children.ref === 'function') {
	        children.ref(el);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/React__default.cloneElement(this.props.children, {
	        ref: this.handleRef
	      });
	    }
	  }]);

	  return ClickListener;
	}(React__default.Component);

	_defineProperty$t(ClickListener, "propTypes", {
	  children: PropTypes.element.isRequired,
	  onClickOutside: PropTypes.func.isRequired
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var OptimizedResize = function optimizedResize() {
	  var callbacks = [];
	  var running = false; // run the actual callbacks

	  function runCallbacks() {
	    callbacks.forEach(function (callback) {
	      callback();
	    });
	    running = false;
	  } // fired on resize event


	  function resize() {
	    if (!running) {
	      running = true;
	      lib.requestAnimationFrame(runCallbacks);
	    }
	  } // adds callback to loop


	  function addCallback(callback) {
	    if (callback) {
	      var index = callbacks.indexOf(callback);

	      if (index < 0) {
	        callbacks.push(callback);
	      }
	    }
	  }

	  return {
	    // public method to add additional callback
	    add: function add(callback) {
	      if (!callbacks.length) {
	        lib.addEventListener('resize', resize);
	      }

	      addCallback(callback);
	      return {
	        release: function release() {
	          var index = callbacks.indexOf(callback);

	          if (index >= 0) {
	            callbacks.splice(index, 1);
	          }
	        }
	      };
	    }
	  };
	}();

	function ownKeys$m(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$k(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$m(Object(source), true).forEach(function (key) {
	        _defineProperty$u(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$m(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _classCallCheck$8(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$8(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$8(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$8(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$7(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$6(subClass, superClass);
	}

	function _setPrototypeOf$6(o, p) {
	  _setPrototypeOf$6 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$6(o, p);
	}

	function _createSuper$6(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$6(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$6(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$7(this, result);
	  };
	}

	function _possibleConstructorReturn$7(self, call) {
	  if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$8(self);
	}

	function _assertThisInitialized$8(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$6() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$6(o) {
	  _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$6(o);
	}

	function _defineProperty$u(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _typeof$6(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$6 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$6 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$6(obj);
	}
	var prefix$1o = settings_1.prefix;
	/**
	 * The structure for the position of floating menu.
	 * @typedef {object} FloatingMenu~position
	 * @property {number} left The left position.
	 * @property {number} top The top position.
	 * @property {number} right The right position.
	 * @property {number} bottom The bottom position.
	 */

	/**
	 * The structure for the size of floating menu.
	 * @typedef {object} FloatingMenu~size
	 * @property {number} width The width.
	 * @property {number} height The height.
	 */

	/**
	 * The structure for the position offset of floating menu.
	 * @typedef {object} FloatingMenu~offset
	 * @property {number} top The top position.
	 * @property {number} left The left position.
	 */

	/**
	 * The structure for the target container.
	 * @typedef {object} FloatingMenu~container
	 * @property {DOMRect} rect Return of element.getBoundingClientRect()
	 * @property {string} position Position style (static, absolute, relative...)
	 */

	var DIRECTION_LEFT = 'left';
	var DIRECTION_TOP = 'top';
	var DIRECTION_RIGHT = 'right';
	var DIRECTION_BOTTOM = 'bottom';
	/**
	 * @param {FloatingMenu~offset} [oldMenuOffset={}] The old value.
	 * @param {FloatingMenu~offset} [menuOffset={}] The new value.
	 * @returns `true` if the parent component wants to change in the adjustment of the floating menu position.
	 * @private
	 */

	var hasChangeInOffset = function hasChangeInOffset() {
	  var oldMenuOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var menuOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (_typeof$6(oldMenuOffset) !== _typeof$6(menuOffset)) {
	    return true;
	  } else if (Object(menuOffset) === menuOffset && typeof menuOffset !== 'function') {
	    return oldMenuOffset.top !== menuOffset.top || oldMenuOffset.left !== menuOffset.left;
	  }

	  return oldMenuOffset !== menuOffset;
	};
	/**
	 * @param {object} params The parameters.
	 * @param {FloatingMenu~size} params.menuSize The size of the menu.
	 * @param {FloatingMenu~position} params.refPosition The position of the triggering element.
	 * @param {FloatingMenu~offset} [params.offset={ left: 0, top: 0 }] The position offset of the menu.
	 * @param {string} [params.direction=bottom] The menu direction.
	 * @param {number} [params.scrollX=0] The scroll position of the viewport.
	 * @param {number} [params.scrollY=0] The scroll position of the viewport.
	 * @param {FloatingMenu~container} [params.container] The size and position type of target element.
	 * @returns {FloatingMenu~offset} The position of the menu, relative to the top-left corner of the viewport.
	 * @private
	 */


	var getFloatingPosition = function getFloatingPosition(_ref) {
	  var _DIRECTION_LEFT$DIREC;

	  var menuSize = _ref.menuSize,
	      _ref$refPosition = _ref.refPosition,
	      refPosition = _ref$refPosition === void 0 ? {} : _ref$refPosition,
	      _ref$offset = _ref.offset,
	      offset = _ref$offset === void 0 ? {} : _ref$offset,
	      _ref$direction = _ref.direction,
	      direction = _ref$direction === void 0 ? DIRECTION_BOTTOM : _ref$direction,
	      _ref$scrollX = _ref.scrollX,
	      scrollX = _ref$scrollX === void 0 ? 0 : _ref$scrollX,
	      _ref$scrollY = _ref.scrollY,
	      scrollY = _ref$scrollY === void 0 ? 0 : _ref$scrollY,
	      container = _ref.container;
	  var _refPosition$left = refPosition.left,
	      refLeft = _refPosition$left === void 0 ? 0 : _refPosition$left,
	      _refPosition$top = refPosition.top,
	      refTop = _refPosition$top === void 0 ? 0 : _refPosition$top,
	      _refPosition$right = refPosition.right,
	      refRight = _refPosition$right === void 0 ? 0 : _refPosition$right,
	      _refPosition$bottom = refPosition.bottom,
	      refBottom = _refPosition$bottom === void 0 ? 0 : _refPosition$bottom;
	  var relativeDiff = container.position !== 'static' ? {
	    top: container.rect.top,
	    left: container.rect.left
	  } : {
	    top: 0,
	    left: 0
	  };
	  var width = menuSize.width,
	      height = menuSize.height;
	  var _offset$top = offset.top,
	      top = _offset$top === void 0 ? 0 : _offset$top,
	      _offset$left = offset.left,
	      left = _offset$left === void 0 ? 0 : _offset$left;
	  var refCenterHorizontal = (refLeft + refRight) / 2;
	  var refCenterVertical = (refTop + refBottom) / 2;
	  return (_DIRECTION_LEFT$DIREC = {}, _defineProperty$u(_DIRECTION_LEFT$DIREC, DIRECTION_LEFT, function () {
	    return {
	      left: refLeft - width + scrollX - left - relativeDiff.left,
	      top: refCenterVertical - height / 2 + scrollY + top - 9 - relativeDiff.top
	    };
	  }), _defineProperty$u(_DIRECTION_LEFT$DIREC, DIRECTION_TOP, function () {
	    return {
	      left: refCenterHorizontal - width / 2 + scrollX + left - relativeDiff.left,
	      top: refTop - height + scrollY - top - relativeDiff.top
	    };
	  }), _defineProperty$u(_DIRECTION_LEFT$DIREC, DIRECTION_RIGHT, function () {
	    return {
	      left: refRight + scrollX + left - relativeDiff.left,
	      top: refCenterVertical - height / 2 + scrollY + top + 3 - relativeDiff.top
	    };
	  }), _defineProperty$u(_DIRECTION_LEFT$DIREC, DIRECTION_BOTTOM, function () {
	    return {
	      left: refCenterHorizontal - width / 2 + scrollX + left - relativeDiff.left,
	      top: refBottom + scrollY + top - relativeDiff.top
	    };
	  }), _DIRECTION_LEFT$DIREC)[direction]();
	};
	/**
	 * A menu that is detached from the triggering element.
	 * Useful when the container of the triggering element cannot have `overflow:visible` style, etc.
	 */


	var FloatingMenu = /*#__PURE__*/function (_React$Component) {
	  _inherits$7(FloatingMenu, _React$Component);

	  var _super = _createSuper$6(FloatingMenu);

	  function FloatingMenu() {
	    var _this;

	    _classCallCheck$8(this, FloatingMenu);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _super.call.apply(_super, [this].concat(args));

	    _defineProperty$u(_assertThisInitialized$8(_this), "_placeInProgress", false);

	    _defineProperty$u(_assertThisInitialized$8(_this), "state", {
	      /**
	       * The position of the menu, relative to the top-left corner of the viewport.
	       * @type {FloatingMenu~offset}
	       */
	      floatingPosition: undefined
	    });

	    _defineProperty$u(_assertThisInitialized$8(_this), "_menuContainer", null);

	    _defineProperty$u(_assertThisInitialized$8(_this), "_menuBody", null);

	    _defineProperty$u(_assertThisInitialized$8(_this), "startSentinel", /*#__PURE__*/React__default.createRef());

	    _defineProperty$u(_assertThisInitialized$8(_this), "endSentinel", /*#__PURE__*/React__default.createRef());

	    _defineProperty$u(_assertThisInitialized$8(_this), "_updateMenuSize", function () {
	      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var menuBody = _this._menuBody;
	        browser(menuBody, 'The DOM node for menu body for calculating its position is not available. Skipping...')  ;

	      if (!menuBody) {
	        return;
	      }

	      var _prevProps$menuOffset = prevProps.menuOffset,
	          oldMenuOffset = _prevProps$menuOffset === void 0 ? {} : _prevProps$menuOffset,
	          oldMenuDirection = prevProps.menuDirection;
	      var _this$props = _this.props,
	          _this$props$menuOffse = _this$props.menuOffset,
	          menuOffset = _this$props$menuOffse === void 0 ? {} : _this$props$menuOffse,
	          menuDirection = _this$props.menuDirection;

	      if (hasChangeInOffset(oldMenuOffset, menuOffset) || oldMenuDirection !== menuDirection) {
	        var _this$props2 = _this.props,
	            flipped = _this$props2.flipped,
	            triggerRef = _this$props2.triggerRef;
	        var triggerEl = triggerRef.current;
	        var menuSize = menuBody.getBoundingClientRect();
	        var refPosition = triggerEl && triggerEl.getBoundingClientRect();
	        var offset = typeof menuOffset !== 'function' ? menuOffset : menuOffset(menuBody, menuDirection, triggerEl, flipped); // Skips if either in the following condition:
	        // a) Menu body has `display:none`
	        // b) `menuOffset` as a callback returns `undefined` (The callback saw that it couldn't calculate the value)

	        if (menuSize.width > 0 && menuSize.height > 0 || !offset) {
	          _this.setState({
	            floatingPosition: getFloatingPosition({
	              menuSize: menuSize,
	              refPosition: refPosition,
	              direction: menuDirection,
	              offset: offset,
	              scrollX: lib.pageXOffset,
	              scrollY: lib.pageYOffset,
	              container: {
	                rect: _this.props.target().getBoundingClientRect(),
	                position: getComputedStyle(_this.props.target()).position
	              }
	            })
	          });
	        }
	      }
	    });

	    _defineProperty$u(_assertThisInitialized$8(_this), "_focusMenuContent", function (menuBody) {
	      var primaryFocusNode = menuBody.querySelector(_this.props.selectorPrimaryFocus || null);
	      var tabbableNode = menuBody.querySelector(selectorTabbable);
	      var focusableNode = menuBody.querySelector(selectorFocusable);
	      var focusTarget = primaryFocusNode || // User defined focusable node
	      tabbableNode || // First sequentially focusable node
	      focusableNode || // First programmatic focusable node
	      menuBody;
	      focusTarget.focus();

	      if (focusTarget === menuBody && "development" !== "production") {
	          browser(focusableNode === null, 'Floating Menus must have at least a programmatically focusable child. ' + 'This can be accomplished by adding tabIndex="-1" to the content element.')  ;
	      }
	    });

	    _defineProperty$u(_assertThisInitialized$8(_this), "_menuRef", function (menuBody) {
	      var menuRef = _this.props.menuRef;
	      _this._placeInProgress = !!menuBody;
	      menuRef && menuRef(_this._menuBody = menuBody);

	      if (menuBody) {
	        _this._updateMenuSize();
	      }
	    });

	    _defineProperty$u(_assertThisInitialized$8(_this), "_getChildrenWithProps", function () {
	      var _this$props3 = _this.props,
	          styles = _this$props3.styles,
	          children = _this$props3.children;
	      var pos = _this.state.floatingPosition; // If no pos available, we need to hide the element (offscreen to the left)
	      // This is done so we can measure the content before positioning it correctly.

	      var positioningStyle = pos ? {
	        left: "".concat(pos.left, "px"),
	        top: "".concat(pos.top, "px"),
	        right: 'auto'
	      } : {
	        visibility: 'hidden',
	        top: '0px'
	      };
	      return /*#__PURE__*/React__default.cloneElement(children, {
	        ref: _this._menuRef,
	        style: _objectSpread$k(_objectSpread$k(_objectSpread$k({}, styles), positioningStyle), {}, {
	          position: 'absolute',
	          margin: 0,
	          opacity: 1
	        })
	      });
	    });

	    _defineProperty$u(_assertThisInitialized$8(_this), "handleBlur", function (_ref2) {
	      var oldActiveNode = _ref2.target,
	          currentActiveNode = _ref2.relatedTarget;

	      if (currentActiveNode && oldActiveNode) {
	        var startSentinelNode = _this.startSentinel.current;
	        var endSentinelNode = _this.endSentinel.current;
	        wrapFocus({
	          bodyNode: _this._menuBody,
	          startSentinelNode: startSentinelNode,
	          endSentinelNode: endSentinelNode,
	          currentActiveNode: currentActiveNode,
	          oldActiveNode: oldActiveNode
	        });
	      }
	    });

	    return _this;
	  }

	  _createClass$8(FloatingMenu, [{
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.hResize.release();
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this2 = this;

	      this.hResize = OptimizedResize.add(function () {
	        _this2._updateMenuSize();
	      });
	    }
	    /**
	     * Set focus on floating menu content after menu placement.
	     * @param {Element} menuBody The DOM element of the menu body.
	     * @private
	     */

	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      this._updateMenuSize(prevProps);

	      var onPlace = this.props.onPlace;

	      if (this._placeInProgress && this.state.floatingPosition) {
	        if (this._menuBody && !this._menuBody.contains(document.activeElement)) {
	          this._focusMenuContent(this._menuBody);
	        }

	        if (typeof onPlace === 'function') {
	          onPlace(this._menuBody);
	          this._placeInProgress = false;
	        }
	      }
	    }
	    /**
	     * A callback for called when menu body is mounted or unmounted.
	     * @param {Element} menuBody The menu body being mounted. `null` if the menu body is being unmounted.
	     */

	  }, {
	    key: "render",
	    value: function render() {
	      if (typeof document !== 'undefined') {
	        var _this$props4 = this.props,
	            focusTrap = _this$props4.focusTrap,
	            target = _this$props4.target;
	        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React__default.createElement("div", {
	          onBlur: focusTrap ? this.handleBlur : null
	        }, /*#__PURE__*/React__default.createElement("span", {
	          ref: this.startSentinel,
	          tabIndex: "0",
	          role: "link",
	          className: "".concat(prefix$1o, "--visually-hidden")
	        }, "Focus sentinel"), this._getChildrenWithProps(), /*#__PURE__*/React__default.createElement("span", {
	          ref: this.endSentinel,
	          tabIndex: "0",
	          role: "link",
	          className: "".concat(prefix$1o, "--visually-hidden")
	        }, "Focus sentinel")), !target ? document.body : target());
	      }

	      return null;
	    }
	  }]);

	  return FloatingMenu;
	}(React__default.Component);

	_defineProperty$u(FloatingMenu, "propTypes", {
	  /**
	   * Contents to put into the floating menu.
	   */
	  children: PropTypes.object,

	  /**
	   * The query selector indicating where the floating menu body should be placed.
	   */
	  target: PropTypes.func,

	  /**
	   * Where to put the tooltip, relative to the trigger button.
	   */
	  menuDirection: PropTypes.oneOf([DIRECTION_LEFT, DIRECTION_TOP, DIRECTION_RIGHT, DIRECTION_BOTTOM]),

	  /**
	   * The adjustment of the floating menu position, considering the position of dropdown arrow, etc.
	   */
	  menuOffset: PropTypes.oneOfType([PropTypes.shape({
	    top: PropTypes.number,
	    left: PropTypes.number
	  }), PropTypes.func]),

	  /**
	   * Specify a CSS selector that matches the DOM element that should
	   * be focused when the Modal opens
	   */
	  selectorPrimaryFocus: PropTypes.string,

	  /**
	   * The additional styles to put to the floating menu.
	   */
	  styles: PropTypes.object,

	  /**
	   * The callback called when the menu body has been mounted to/will be unmounted from the DOM.
	   */
	  menuRef: PropTypes.func,

	  /**
	   * The callback called when the menu body has been mounted and positioned.
	   */
	  onPlace: PropTypes.func,

	  /**
	   * `true` if the menu alignment should be flipped.
	   */
	  flipped: PropTypes.bool,

	  /**
	   * The element ref of the tooltip's trigger button.
	   */
	  triggerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
	    current: PropTypes.any
	  })]),

	  /**
	   * Enable or disable focus trap behavior
	   */
	  focusTrap: PropTypes.bool
	});

	_defineProperty$u(FloatingMenu, "defaultProps", {
	  menuOffset: {},
	  menuDirection: DIRECTION_BOTTOM
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$m =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("circle", {
	  cx: "16",
	  cy: "8",
	  r: "2"
	});

	var _ref3$6 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("circle", {
	  cx: "16",
	  cy: "16",
	  r: "2"
	});

	var _ref4 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("circle", {
	  cx: "16",
	  cy: "24",
	  r: "2"
	});

	var OverflowMenuVertical16 = /*#__PURE__*/React__default.forwardRef(function OverflowMenuVertical16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$m, _ref3$6, _ref4, children);
	});

	/**
	 * Copyright IBM Corp. 2016, 2018
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * @param {...Ref<Element>} refs List of React refs to merge.
	 * @returns {Ref<Element>} Merged React ref.
	 */
	var mergeRefs = function mergeRefs() {
	  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
	    refs[_key] = arguments[_key];
	  }

	  return function (el) {
	    refs.forEach(function (ref) {
	      // https://github.com/facebook/react/issues/13029#issuecomment-410002316
	      if (typeof ref === 'function') {
	        ref(el);
	      } else if (Object(ref) === ref) {
	        ref.current = el;
	      }
	    });
	  };
	};

	var _triggerButtonPositio, _triggerButtonPositio2;

	function _typeof$7(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$7 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$7 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$7(obj);
	}

	function _extends$l() {
	  _extends$l = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$l.apply(this, arguments);
	}

	function _objectWithoutProperties$o(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$p(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$p(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _classCallCheck$9(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$9(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$9(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$9(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$9(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$8(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$7(subClass, superClass);
	}

	function _setPrototypeOf$7(o, p) {
	  _setPrototypeOf$7 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$7(o, p);
	}

	function _createSuper$7(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$7(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$7(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$8(this, result);
	  };
	}

	function _possibleConstructorReturn$8(self, call) {
	  if (call && (_typeof$7(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$9(self);
	}

	function _assertThisInitialized$9(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$7() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$7(o) {
	  _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$7(o);
	}

	function _defineProperty$v(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$1p = settings_1.prefix;

	var on = function on(element) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  element.addEventListener.apply(element, args);
	  return {
	    release: function release() {
	      element.removeEventListener.apply(element, args);
	      return null;
	    }
	  };
	};
	/**
	 * The CSS property names of the arrow keyed by the floating menu direction.
	 * @type {object<string, string>}
	 */


	var triggerButtonPositionProps = (_triggerButtonPositio = {}, _defineProperty$v(_triggerButtonPositio, DIRECTION_TOP, 'bottom'), _defineProperty$v(_triggerButtonPositio, DIRECTION_BOTTOM, 'top'), _triggerButtonPositio);
	/**
	 * Determines how the position of arrow should affect the floating menu position.
	 * @type {object<string, number>}
	 */

	var triggerButtonPositionFactors = (_triggerButtonPositio2 = {}, _defineProperty$v(_triggerButtonPositio2, DIRECTION_TOP, -2), _defineProperty$v(_triggerButtonPositio2, DIRECTION_BOTTOM, -1), _triggerButtonPositio2);
	/**
	 * @param {Element} menuBody The menu body with the menu arrow.
	 * @param {string} direction The floating menu direction.
	 * @returns {FloatingMenu~offset} The adjustment of the floating menu position, upon the position of the menu arrow.
	 * @private
	 */

	var getMenuOffset = function getMenuOffset(menuBody, direction, trigger, flip) {
	  var triggerButtonPositionProp = triggerButtonPositionProps[direction];
	  var triggerButtonPositionFactor = triggerButtonPositionFactors[direction];

	  {
	    !(triggerButtonPositionProp && triggerButtonPositionFactor) ?    browser$2(false, '[OverflowMenu] wrong floating menu direction: `%s`', direction)    : void 0;
	  }

	  var menuWidth = menuBody.offsetWidth,
	      menuHeight = menuBody.offsetHeight;

	  switch (triggerButtonPositionProp) {
	    case 'top':
	    case 'bottom':
	      {
	        // TODO: Ensure `trigger` is there for `<OverflowMenu open>`
	        var triggerWidth = !trigger ? 0 : trigger.offsetWidth;
	        return {
	          left: (!flip ? 1 : -1) * (menuWidth / 2 - triggerWidth / 2),
	          top: 0
	        };
	      }

	    case 'left':
	    case 'right':
	      {
	        // TODO: Ensure `trigger` is there for `<OverflowMenu open>`
	        var triggerHeight = !trigger ? 0 : trigger.offsetHeight;
	        return {
	          left: 0,
	          top: (!flip ? 1 : -1) * (menuHeight / 2 - triggerHeight / 2)
	        };
	      }

	    default:
	      break;
	  }
	};

	var OverflowMenu = /*#__PURE__*/function (_Component) {
	  _inherits$8(OverflowMenu, _Component);

	  var _super = _createSuper$7(OverflowMenu);

	  function OverflowMenu() {
	    var _this;

	    _classCallCheck$9(this, OverflowMenu);

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    _this = _super.call.apply(_super, [this].concat(args));

	    _defineProperty$v(_assertThisInitialized$9(_this), "state", {});

	    _defineProperty$v(_assertThisInitialized$9(_this), "_hFocusIn", null);

	    _defineProperty$v(_assertThisInitialized$9(_this), "_hBlurTimeout", void 0);

	    _defineProperty$v(_assertThisInitialized$9(_this), "_triggerRef", /*#__PURE__*/React__default.createRef());

	    _defineProperty$v(_assertThisInitialized$9(_this), "handleClick", function (evt) {
	      if (!_this._menuBody || !_this._menuBody.contains(evt.target)) {
	        _this.setState({
	          open: !_this.state.open
	        });

	        _this.props.onClick(evt);
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "handleKeyDown", function (evt) {
	      if (matches(evt, [ArrowDown])) {
	        _this.setState({
	          open: !_this.state.open
	        });

	        _this.props.onClick(evt);
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "handleKeyPress", function (evt) {
	      if (_this.state.open && matches(evt, [ArrowUp, ArrowRight, ArrowDown, ArrowLeft])) {
	        evt.preventDefault();
	      } // Close the overflow menu on escape


	      if (matches(evt, [Escape])) {
	        _this.closeMenu(); // Stop the esc keypress from bubbling out and closing something it shouldn't


	        evt.stopPropagation();
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "handleClickOutside", function (evt) {
	      if (_this.state.open && (!_this._menuBody || !_this._menuBody.contains(evt.target))) {
	        _this.closeMenu();
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "closeMenu", function () {
	      var wasOpen = _this.state.open;

	      _this.setState({
	        open: false
	      }, function () {
	        if (wasOpen) {
	          _this.focusMenuEl();
	        }

	        _this.props.onClose();
	      });
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "focusMenuEl", function () {
	      var triggerEl = _this._triggerRef.current;

	      if (triggerEl) {
	        triggerEl.focus();
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "handleOverflowMenuItemFocus", function (_ref) {
	      var _overflowMenuItem$cur;

	      var currentIndex = _ref.currentIndex,
	          direction = _ref.direction;
	      var enabledIndices = React__default.Children.toArray(_this.props.children).reduce(function (acc, curr, i) {
	        if (!curr.props.disabled) {
	          acc.push(i);
	        }

	        return acc;
	      }, []);

	      var nextValidIndex = function () {
	        var nextIndex = enabledIndices.indexOf(currentIndex) + direction;

	        switch (enabledIndices.indexOf(currentIndex) + direction) {
	          case -1:
	            return enabledIndices.length - 1;

	          case enabledIndices.length:
	            return 0;

	          default:
	            return nextIndex;
	        }
	      }();

	      var overflowMenuItem = _this["overflowMenuItem".concat(enabledIndices[nextValidIndex])].overflowMenuItem;

	      overflowMenuItem === null || overflowMenuItem === void 0 ? void 0 : (_overflowMenuItem$cur = overflowMenuItem.current) === null || _overflowMenuItem$cur === void 0 ? void 0 : _overflowMenuItem$cur.focus();
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "_bindMenuBody", function (menuBody) {
	      if (!menuBody) {
	        _this._menuBody = menuBody;
	      }

	      if (!menuBody && _this._hFocusIn) {
	        _this._hFocusIn = _this._hFocusIn.release();
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "_handlePlace", function (menuBody) {
	      if (menuBody) {
	        _this._menuBody = menuBody;
	        var hasFocusin = ('onfocusin' in window);
	        var focusinEventName = hasFocusin ? 'focusin' : 'focus';
	        _this._hFocusIn = on(menuBody.ownerDocument, focusinEventName, function (event) {
	          var target = event.target;
	          var triggerEl = _this._triggerRef.current;

	          if (!menuBody.contains(target) && triggerEl && !target.matches(".".concat(prefix$1p, "--overflow-menu,.").concat(prefix$1p, "--overflow-menu-options"))) {
	            _this.closeMenu();
	          }
	        }, !hasFocusin);

	        _this.props.onOpen();
	      }
	    });

	    _defineProperty$v(_assertThisInitialized$9(_this), "_getTarget", function () {
	      var triggerEl = _this._triggerRef.current;
	      return triggerEl && triggerEl.closest('[data-floating-menu-container]') || document.body;
	    });

	    return _this;
	  }

	  _createClass$9(OverflowMenu, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(_, prevState) {
	      var onClose = this.props.onClose;

	      if (!this.state.open && prevState.isOpen) {
	        onClose();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (typeof this._hBlurTimeout === 'number') {
	        clearTimeout(this._hBlurTimeout);
	        this._hBlurTimeout = undefined;
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _classNames,
	          _classNames2,
	          _this2 = this;

	      var _this$props = this.props,
	          id = _this$props.id,
	          tabIndex = _this$props.tabIndex,
	          ariaLabel = _this$props.ariaLabel,
	          children = _this$props.children,
	          iconDescription = _this$props.iconDescription,
	          direction = _this$props.direction,
	          flipped = _this$props.flipped,
	          menuOffset = _this$props.menuOffset,
	          menuOffsetFlip = _this$props.menuOffsetFlip,
	          iconClass = _this$props.iconClass,
	          IconElement = _this$props.renderIcon,
	          ref = _this$props.innerRef,
	          menuOptionsClass = _this$props.menuOptionsClass,
	          light = _this$props.light,
	          other = _objectWithoutProperties$o(_this$props, ["id", "tabIndex", "ariaLabel", "children", "iconDescription", "direction", "flipped", "menuOffset", "menuOffsetFlip", "iconClass", "onClick", "onOpen", "selectorPrimaryFocus", "renderIcon", "innerRef", "menuOptionsClass", "light"]);

	      var open = this.state.open;
	      var overflowMenuClasses = cx(this.props.className, "".concat(prefix$1p, "--overflow-menu"), (_classNames = {}, _defineProperty$v(_classNames, "".concat(prefix$1p, "--overflow-menu--open"), open), _defineProperty$v(_classNames, "".concat(prefix$1p, "--overflow-menu--light"), light), _classNames));
	      var overflowMenuOptionsClasses = cx(menuOptionsClass, "".concat(prefix$1p, "--overflow-menu-options"), (_classNames2 = {}, _defineProperty$v(_classNames2, "".concat(prefix$1p, "--overflow-menu--flip"), this.props.flipped), _defineProperty$v(_classNames2, "".concat(prefix$1p, "--overflow-menu-options--open"), open), _defineProperty$v(_classNames2, "".concat(prefix$1p, "--overflow-menu-options--light"), light), _classNames2));
	      var overflowMenuIconClasses = cx("".concat(prefix$1p, "--overflow-menu__icon"), iconClass);
	      var childrenWithProps = React__default.Children.toArray(children).map(function (child, index) {
	        return /*#__PURE__*/React__default.cloneElement(child, {
	          closeMenu: _this2.closeMenu,
	          handleOverflowMenuItemFocus: _this2.handleOverflowMenuItemFocus,
	          ref: function ref(e) {
	            _this2["overflowMenuItem".concat(index)] = e;
	          },
	          index: index
	        });
	      });
	      var menuBody = /*#__PURE__*/React__default.createElement("ul", {
	        className: overflowMenuOptionsClasses,
	        tabIndex: "-1",
	        role: "menu",
	        "aria-label": ariaLabel
	      }, childrenWithProps);
	      var wrappedMenuBody = /*#__PURE__*/React__default.createElement(FloatingMenu, {
	        triggerRef: this._triggerRef,
	        menuDirection: direction,
	        menuOffset: flipped ? menuOffsetFlip : menuOffset,
	        menuRef: this._bindMenuBody,
	        flipped: this.props.flipped,
	        target: this._getTarget,
	        onPlace: this._handlePlace,
	        selectorPrimaryFocus: this.props.selectorPrimaryFocus
	      }, /*#__PURE__*/React__default.cloneElement(menuBody, {
	        'data-floating-menu-direction': direction
	      }));
	      var iconProps = {
	        onClick: this.handleClick,
	        onKeyDown: this.handleKeyDown,
	        className: overflowMenuIconClasses,
	        'aria-label': iconDescription,
	        focusable: 'false' // Prevent `<svg>` in trigger icon from getting focus for IE11

	      };
	      return /*#__PURE__*/React__default.createElement(ClickListener, {
	        onClickOutside: this.handleClickOutside
	      }, /*#__PURE__*/React__default.createElement("button", _extends$l({}, other, {
	        type: "button",
	        "aria-haspopup": true,
	        "aria-expanded": this.state.open,
	        className: overflowMenuClasses,
	        onKeyDown: this.handleKeyPress,
	        onClick: this.handleClick,
	        "aria-label": ariaLabel,
	        id: id,
	        tabIndex: tabIndex,
	        ref: mergeRefs(this._triggerRef, ref)
	      }), /*#__PURE__*/React__default.createElement(IconElement, iconProps, iconDescription && /*#__PURE__*/React__default.createElement("title", null, iconDescription)), open && wrappedMenuBody));
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(_ref2, state) {
	      var open = _ref2.open;
	      var prevOpen = state.prevOpen;
	      return prevOpen === open ? null : {
	        open: open,
	        prevOpen: open
	      };
	    }
	  }]);

	  return OverflowMenu;
	}(React.Component);

	_defineProperty$v(OverflowMenu, "propTypes", {
	  /**
	   * `true` if the menu should be open.
	   */
	  open: PropTypes.bool,

	  /**
	   * The menu direction.
	   */
	  direction: PropTypes.oneOf([DIRECTION_TOP, DIRECTION_BOTTOM]),

	  /**
	   * `true` if the menu alignment should be flipped.
	   */
	  flipped: PropTypes.bool,

	  /**
	   * The child nodes.
	   */
	  children: PropTypes.node,

	  /**
	   * The CSS class names.
	   */
	  className: PropTypes.string,

	  /**
	   * The `tabindex` attribute.
	   */
	  tabIndex: PropTypes.number,

	  /**
	   * The element ID.
	   */
	  id: PropTypes.string,

	  /**
	   * The ARIA label.
	   */
	  ariaLabel: PropTypes.string,

	  /**
	   * The event handler for the `click` event.
	   */
	  onClick: PropTypes.func,

	  /**
	   * The event handler for the `focus` event.
	   */
	  onFocus: PropTypes.func,

	  /**
	   * The event handler for the `keydown` event.
	   */
	  onKeyDown: PropTypes.func,

	  /**
	   * The icon description.
	   */
	  iconDescription: PropTypes.string.isRequired,

	  /**
	   * The adjustment in position applied to the floating menu.
	   */
	  menuOffset: PropTypes.oneOfType([PropTypes.shape({
	    top: PropTypes.number,
	    left: PropTypes.number
	  }), PropTypes.func]),

	  /**
	   * The adjustment in position applied to the floating menu.
	   */
	  menuOffsetFlip: PropTypes.oneOfType([PropTypes.shape({
	    top: PropTypes.number,
	    left: PropTypes.number
	  }), PropTypes.func]),

	  /**
	   * The CSS class for the icon.
	   */
	  iconClass: PropTypes.string,

	  /**
	   * Function called to override icon rendering.
	   */
	  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

	  /**
	   * Function called when menu is closed
	   */
	  onClose: PropTypes.func,

	  /**
	   * The class to apply to the menu options
	   */
	  menuOptionsClass: PropTypes.string,

	  /**
	   * Function called when menu is closed
	   */
	  onOpen: PropTypes.func,

	  /**
	   * `true` to use the light version. For use on $ui-01 backgrounds only.
	   * Don't use this to make OverflowMenu background color same as container background color.
	   */
	  light: PropTypes.bool,

	  /**
	   * Specify a CSS selector that matches the DOM element that should
	   * be focused when the OverflowMenu opens
	   */
	  selectorPrimaryFocus: PropTypes.string
	});

	_defineProperty$v(OverflowMenu, "defaultProps", {
	  ariaLabel: 'Menu',
	  iconDescription: 'open and close list of options',
	  open: false,
	  direction: DIRECTION_BOTTOM,
	  flipped: false,
	  renderIcon: OverflowMenuVertical16,
	  onClick: function onClick() {},
	  onKeyDown: function onKeyDown() {},
	  onClose: function onClose() {},
	  onOpen: function onOpen() {},
	  tabIndex: 0,
	  menuOffset: getMenuOffset,
	  menuOffsetFlip: getMenuOffset,
	  light: false,
	  selectorPrimaryFocus: '[data-overflow-menu-primary-focus]'
	});

	var OverflowMenu$1 = (function () {
	  var forwardRef = function forwardRef(props, ref) {
	    return /*#__PURE__*/React__default.createElement(OverflowMenu, _extends$l({}, props, {
	      innerRef: ref
	    }));
	  };

	  forwardRef.displayName = 'OverflowMenu';
	  return /*#__PURE__*/React__default.forwardRef(forwardRef);
	})();

	function _typeof$8(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
	    _typeof$8 = function _typeof(obj) {
	      return _typeof_1(obj);
	    };
	  } else {
	    _typeof$8 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	    };
	  }

	  return _typeof$8(obj);
	}

	function _extends$m() {
	  _extends$m = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$m.apply(this, arguments);
	}

	function _objectWithoutProperties$p(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$q(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$q(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _classCallCheck$a(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$a(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$a(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$a(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$a(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits$9(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$8(subClass, superClass);
	}

	function _setPrototypeOf$8(o, p) {
	  _setPrototypeOf$8 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$8(o, p);
	}

	function _createSuper$8(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$8();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf$8(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf$8(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$9(this, result);
	  };
	}

	function _possibleConstructorReturn$9(self, call) {
	  if (call && (_typeof$8(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$a(self);
	}

	function _assertThisInitialized$a(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _isNativeReflectConstruct$8() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _getPrototypeOf$8(o) {
	  _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$8(o);
	}

	function _defineProperty$w(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	var prefix$1q = settings_1.prefix;

	var OverflowMenuItem = /*#__PURE__*/function (_React$Component) {
	  _inherits$9(OverflowMenuItem, _React$Component);

	  var _super = _createSuper$8(OverflowMenuItem);

	  function OverflowMenuItem() {
	    var _this;

	    _classCallCheck$a(this, OverflowMenuItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _super.call.apply(_super, [this].concat(args));

	    _defineProperty$w(_assertThisInitialized$a(_this), "overflowMenuItem", /*#__PURE__*/React__default.createRef());

	    _defineProperty$w(_assertThisInitialized$a(_this), "setTabFocus", function (evt) {
	      if (match(evt, ArrowDown)) {
	        _this.props.handleOverflowMenuItemFocus({
	          currentIndex: _this.props.index,
	          direction: 1
	        });
	      }

	      if (match(evt, ArrowUp)) {
	        _this.props.handleOverflowMenuItemFocus({
	          currentIndex: _this.props.index,
	          direction: -1
	        });
	      }
	    });

	    _defineProperty$w(_assertThisInitialized$a(_this), "handleClick", function (evt) {
	      var _this$props = _this.props,
	          onClick = _this$props.onClick,
	          closeMenu = _this$props.closeMenu;
	      onClick(evt);

	      if (closeMenu) {
	        closeMenu();
	      }
	    });

	    return _this;
	  }

	  _createClass$a(OverflowMenuItem, [{
	    key: "render",
	    value: function render() {
	      var _classNames,
	          _this2 = this;

	      var _this$props2 = this.props,
	          href = _this$props2.href,
	          className = _this$props2.className,
	          itemText = _this$props2.itemText,
	          hasDivider = _this$props2.hasDivider,
	          isDelete = _this$props2.isDelete,
	          disabled = _this$props2.disabled,
	          closeMenu = _this$props2.closeMenu,
	          _onKeyDown = _this$props2.onKeyDown,
	          primaryFocus = _this$props2.primaryFocus,
	          wrapperClassName = _this$props2.wrapperClassName,
	          requireTitle = _this$props2.requireTitle,
	          index = _this$props2.index,
	          other = _objectWithoutProperties$p(_this$props2, ["href", "className", "itemText", "hasDivider", "isDelete", "disabled", "closeMenu", "onClick", "handleOverflowMenuItemFocus", "onKeyDown", "primaryFocus", "wrapperClassName", "requireTitle", "index"]);

	      {
	          browser(closeMenu, '`<OverflowMenuItem>` detected missing `closeMenu` prop. ' + '`closeMenu` is required to let `<OverflowMenu>` close the menu upon actions on `<OverflowMenuItem>`. ' + 'Please make sure `<OverflowMenuItem>` is a direct child of `<OverflowMenu>.')  ;
	      }

	      var overflowMenuBtnClasses = cx("".concat(prefix$1q, "--overflow-menu-options__btn"), className);
	      var overflowMenuItemClasses = cx("".concat(prefix$1q, "--overflow-menu-options__option"), (_classNames = {}, _defineProperty$w(_classNames, "".concat(prefix$1q, "--overflow-menu--divider"), hasDivider), _defineProperty$w(_classNames, "".concat(prefix$1q, "--overflow-menu-options__option--danger"), isDelete), _defineProperty$w(_classNames, "".concat(prefix$1q, "--overflow-menu-options__option--disabled"), disabled), _classNames), wrapperClassName);
	      var TagToUse = href ? 'a' : 'button';

	      var OverflowMenuItemContent = function () {
	        if (typeof itemText !== 'string') {
	          return itemText;
	        }

	        return /*#__PURE__*/React__default.createElement("div", {
	          className: "".concat(prefix$1q, "--overflow-menu-options__option-content")
	        }, itemText);
	      }();

	      return /*#__PURE__*/React__default.createElement("li", {
	        className: overflowMenuItemClasses,
	        role: "menuitem"
	      }, /*#__PURE__*/React__default.createElement(TagToUse, _extends$m({}, other, {
	        'data-floating-menu-primary-focus': primaryFocus || null
	      }, {
	        href: href,
	        className: overflowMenuBtnClasses,
	        disabled: disabled,
	        onClick: this.handleClick,
	        onKeyDown: function onKeyDown(evt) {
	          _this2.setTabFocus(evt);

	          _onKeyDown(evt);
	        },
	        ref: this.overflowMenuItem,
	        title: requireTitle ? itemText : null,
	        tabIndex: "-1",
	        index: index
	      }), OverflowMenuItemContent));
	    }
	  }]);

	  return OverflowMenuItem;
	}(React__default.Component);

	_defineProperty$w(OverflowMenuItem, "propTypes", {
	  /**
	   * The CSS class name to be placed on the button element
	   */
	  className: PropTypes.string,

	  /**
	   * The CSS class name to be placed on the wrapper list item element
	   */
	  wrapperClassName: PropTypes.string,

	  /**
	   * The text in the menu item.
	   */
	  itemText: PropTypes.node.isRequired,

	  /**
	   * If given, overflow item will render as a link with the given href
	   */
	  href: PropTypes.string,

	  /**
	   * `true` to make this menu item a divider.
	   */
	  hasDivider: PropTypes.bool,

	  /**
	   * `true` to make this menu item a "danger button".
	   */
	  isDelete: PropTypes.bool,

	  /**
	   * `true` to make this menu item disabled.
	   */
	  disabled: PropTypes.bool,

	  /**
	   * event handlers
	   */
	  onBlur: PropTypes.func,
	  onClick: PropTypes.func,
	  onFocus: PropTypes.func,
	  onKeyDown: PropTypes.func,
	  onKeyUp: PropTypes.func,
	  onMouseDown: PropTypes.func,
	  onMouseEnter: PropTypes.func,
	  onMouseLeave: PropTypes.func,
	  onMouseUp: PropTypes.func,

	  /**
	   * A callback to tell the parent menu component that the menu should be closed.
	   */
	  closeMenu: PropTypes.func,

	  /**
	   * `true` if this menu item should get focus when the menu gets open.
	   */
	  primaryFocus: deprecate(PropTypes.bool, 'The `primaryFocus` prop has been deprecated as it is no longer used. ' + 'Feel free to remove this prop from <OverflowMenuItem>. This prop will ' + 'be removed in the next major release of `carbon-components-react`. ' + 'Opt for `selectorPrimaryFocus` in `<OverflowMenu>` instead'),

	  /**
	   * `true` if this menu item has long text and requires a browser tooltip
	   */
	  requireTitle: PropTypes.bool,
	  index: PropTypes.number,
	  handleOverflowMenuItemFocus: PropTypes.func
	});

	_defineProperty$w(OverflowMenuItem, "defaultProps", {
	  hasDivider: false,
	  isDelete: false,
	  disabled: false,
	  itemText: 'Provide itemText',
	  onClick: function onClick() {},
	  onKeyDown: function onKeyDown() {}
	});

	var prefix$1r = settings_1.prefix;
	/**
	 * MastHead Profile component.
	 */

	var MastheadProfile = function MastheadProfile(_ref) {
	  var overflowMenuProps = _ref.overflowMenuProps,
	      overflowMenuItemProps = _ref.overflowMenuItemProps,
	      profileMenu = _ref.profileMenu;

	  /**
	   * Masthead profile menu
	   *
	   * @returns {*} Masthead profile menu
	   */
	  var profileNav = profileMenu.map(function (item, i) {
	    return React__default.createElement(OverflowMenuItem, _extends_1({}, overflowMenuItemProps, {
	      itemText: item.title,
	      href: item.url,
	      hasDivider: i > 0,
	      key: i,
	      primaryFocus: true
	    }));
	  });
	  return React__default.createElement(OverflowMenu$1, _extends_1({
	    className: "".concat(prefix$1r, "--header__action")
	  }, overflowMenuProps), profileNav);
	};

	MastheadProfile.propTypes = {
	  /**
	   * The props for Carbon `<OverflowMenu>`.
	   */
	  overflowMenuProps: PropTypes.object,

	  /**
	   * The props for Carbon `<OverflowMenuItem>`.
	   */
	  overflowMenuItemProps: PropTypes.object,

	  /**
	   * The data to generate the Carbon `<OverflowMenuItem>`s from.
	   */
	  profileMenu: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    url: PropTypes.string
	  }))
	};

	function shallowEqualArrays(arrA, arrB) {
	  if (arrA === arrB) {
	    return true;
	  }

	  if (!arrA || !arrB) {
	    return false;
	  }

	  var len = arrA.length;

	  if (arrB.length !== len) {
	    return false;
	  }

	  for (var i = 0; i < len; i++) {
	    if (arrA[i] !== arrB[i]) {
	      return false;
	    }
	  }

	  return true;
	}

	var arrays = shallowEqualArrays;

	var _slicedToArray$6 = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

	var dist = function dist(_ref) {
	  var data = _ref.data;
	  var multiSection = _ref.multiSection;

	  function nextNonEmptySectionIndex(sectionIndex) {
	    if (sectionIndex === null) {
	      sectionIndex = 0;
	    } else {
	      sectionIndex++;
	    }

	    while (sectionIndex < data.length && data[sectionIndex] === 0) {
	      sectionIndex++;
	    }

	    return sectionIndex === data.length ? null : sectionIndex;
	  }

	  function prevNonEmptySectionIndex(sectionIndex) {
	    if (sectionIndex === null) {
	      sectionIndex = data.length - 1;
	    } else {
	      sectionIndex--;
	    }

	    while (sectionIndex >= 0 && data[sectionIndex] === 0) {
	      sectionIndex--;
	    }

	    return sectionIndex === -1 ? null : sectionIndex;
	  }

	  function next(position) {
	    var _position = _slicedToArray$6(position, 2);

	    var sectionIndex = _position[0];
	    var itemIndex = _position[1];

	    if (multiSection) {
	      if (itemIndex === null || itemIndex === data[sectionIndex] - 1) {
	        sectionIndex = nextNonEmptySectionIndex(sectionIndex);

	        if (sectionIndex === null) {
	          return [null, null];
	        }

	        return [sectionIndex, 0];
	      }

	      return [sectionIndex, itemIndex + 1];
	    }

	    if (data === 0 || itemIndex === data - 1) {
	      return [null, null];
	    }

	    if (itemIndex === null) {
	      return [null, 0];
	    }

	    return [null, itemIndex + 1];
	  }

	  function prev(position) {
	    var _position2 = _slicedToArray$6(position, 2);

	    var sectionIndex = _position2[0];
	    var itemIndex = _position2[1];

	    if (multiSection) {
	      if (itemIndex === null || itemIndex === 0) {
	        sectionIndex = prevNonEmptySectionIndex(sectionIndex);

	        if (sectionIndex === null) {
	          return [null, null];
	        }

	        return [sectionIndex, data[sectionIndex] - 1];
	      }

	      return [sectionIndex, itemIndex - 1];
	    }

	    if (data === 0 || itemIndex === 0) {
	      return [null, null];
	    }

	    if (itemIndex === null) {
	      return [null, data - 1];
	    }

	    return [null, itemIndex - 1];
	  }

	  function isLast(position) {
	    return next(position)[1] === null;
	  }

	  return {
	    next: next,
	    prev: prev,
	    isLast: isLast
	  };
	};

	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function ToObject(val) {
	  if (val == null) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }

	  return Object(val);
	}

	function ownEnumerableKeys(obj) {
	  var keys = Object.getOwnPropertyNames(obj);

	  if (Object.getOwnPropertySymbols) {
	    keys = keys.concat(Object.getOwnPropertySymbols(obj));
	  }

	  return keys.filter(function (key) {
	    return propIsEnumerable.call(obj, key);
	  });
	}

	var objectAssign = Object.assign || function (target, source) {
	  var from;
	  var keys;
	  var to = ToObject(target);

	  for (var s = 1; s < arguments.length; s++) {
	    from = arguments[s];
	    keys = ownEnumerableKeys(Object(from));

	    for (var i = 0; i < keys.length; i++) {
	      to[keys[i]] = from[keys[i]];
	    }
	  }

	  return to;
	};

	var dist$1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, '__esModule', {
	    value: true
	  });

	  var _slicedToArray = function () {
	    function sliceIterator(arr, i) {
	      var _arr = [];
	      var _n = true;
	      var _d = false;
	      var _e = undefined;

	      try {
	        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	          _arr.push(_s.value);

	          if (i && _arr.length === i) break;
	        }
	      } catch (err) {
	        _d = true;
	        _e = err;
	      } finally {
	        try {
	          if (!_n && _i['return']) _i['return']();
	        } finally {
	          if (_d) throw _e;
	        }
	      }

	      return _arr;
	    }

	    return function (arr, i) {
	      if (Array.isArray(arr)) {
	        return arr;
	      } else if (Symbol.iterator in Object(arr)) {
	        return sliceIterator(arr, i);
	      } else {
	        throw new TypeError('Invalid attempt to destructure non-iterable instance');
	      }
	    };
	  }();

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      'default': obj
	    };
	  }

	  function _toConsumableArray(arr) {
	    if (Array.isArray(arr)) {
	      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	        arr2[i] = arr[i];
	      }

	      return arr2;
	    } else {
	      return Array.from(arr);
	    }
	  }

	  var _objectAssign2 = _interopRequireDefault(objectAssign);

	  var truthy = function truthy(x) {
	    return x;
	  };

	  exports['default'] = function (input) {
	    var _ref = Array.isArray(input) && input.length === 2 ? input : [input, null];

	    var _ref2 = _slicedToArray(_ref, 2);

	    var theme = _ref2[0];
	    var classNameDecorator = _ref2[1];
	    return function (key) {
	      for (var _len = arguments.length, names = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        names[_key - 1] = arguments[_key];
	      }

	      var styles = names.map(function (name) {
	        return theme[name];
	      }).filter(truthy);
	      return typeof styles[0] === 'string' || typeof classNameDecorator === 'function' ? {
	        key: key,
	        className: classNameDecorator ? classNameDecorator.apply(undefined, _toConsumableArray(styles)) : styles.join(' ')
	      } : {
	        key: key,
	        style: _objectAssign2['default'].apply(undefined, [{}].concat(_toConsumableArray(styles)))
	      };
	    };
	  };

	  module.exports = exports['default'];
	});
	unwrapExports(dist$1);

	var compareObjects_1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _typeof = typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol" ? function (obj) {
	    return _typeof_1(obj);
	  } : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
	  };

	  exports.default = compareObjects;

	  function compareObjects(objA, objB) {
	    var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

	    if (objA === objB) {
	      return false;
	    }

	    var aKeys = Object.keys(objA);
	    var bKeys = Object.keys(objB);

	    if (aKeys.length !== bKeys.length) {
	      return true;
	    }

	    var keysMap = {};
	    var i = void 0,
	        len = void 0;

	    for (i = 0, len = keys.length; i < len; i++) {
	      keysMap[keys[i]] = true;
	    }

	    for (i = 0, len = aKeys.length; i < len; i++) {
	      var key = aKeys[i];
	      var aValue = objA[key];
	      var bValue = objB[key];

	      if (aValue === bValue) {
	        continue;
	      }

	      if (!keysMap[key] || aValue === null || bValue === null || (typeof aValue === 'undefined' ? 'undefined' : _typeof(aValue)) !== 'object' || (typeof bValue === 'undefined' ? 'undefined' : _typeof(bValue)) !== 'object') {
	        return true;
	      }

	      var aValueKeys = Object.keys(aValue);
	      var bValueKeys = Object.keys(bValue);

	      if (aValueKeys.length !== bValueKeys.length) {
	        return true;
	      }

	      for (var n = 0, length = aValueKeys.length; n < length; n++) {
	        var aValueKey = aValueKeys[n];

	        if (aValue[aValueKey] !== bValue[aValueKey]) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }
	});
	unwrapExports(compareObjects_1);

	var SectionTitle_1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();

	  var _react2 = _interopRequireDefault(React__default);

	  var _propTypes2 = _interopRequireDefault(PropTypes);

	  var _compareObjects2 = _interopRequireDefault(compareObjects_1);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (!self) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return call && (_typeof_1(call) === "object" || typeof call === "function") ? call : self;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function, not " + _typeof_1(superClass));
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	  }

	  var SectionTitle = function (_Component) {
	    _inherits(SectionTitle, _Component);

	    function SectionTitle() {
	      _classCallCheck(this, SectionTitle);

	      return _possibleConstructorReturn(this, (SectionTitle.__proto__ || Object.getPrototypeOf(SectionTitle)).apply(this, arguments));
	    }

	    _createClass(SectionTitle, [{
	      key: 'shouldComponentUpdate',
	      value: function shouldComponentUpdate(nextProps) {
	        return (0, _compareObjects2.default)(nextProps, this.props);
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            section = _props.section,
	            renderSectionTitle = _props.renderSectionTitle,
	            theme = _props.theme,
	            sectionKeyPrefix = _props.sectionKeyPrefix;
	        var sectionTitle = renderSectionTitle(section);

	        if (!sectionTitle) {
	          return null;
	        }

	        return _react2.default.createElement('div', theme(sectionKeyPrefix + 'title', 'sectionTitle'), sectionTitle);
	      }
	    }]);

	    return SectionTitle;
	  }(React__default.Component);

	  SectionTitle.propTypes = {
	    section: _propTypes2.default.any.isRequired,
	    renderSectionTitle: _propTypes2.default.func.isRequired,
	    theme: _propTypes2.default.func.isRequired,
	    sectionKeyPrefix: _propTypes2.default.string.isRequired
	  };
	  exports.default = SectionTitle;
	});
	unwrapExports(SectionTitle_1);

	var Item_1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();

	  var _react2 = _interopRequireDefault(React__default);

	  var _propTypes2 = _interopRequireDefault(PropTypes);

	  var _compareObjects2 = _interopRequireDefault(compareObjects_1);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  function _objectWithoutProperties(obj, keys) {
	    var target = {};

	    for (var i in obj) {
	      if (keys.indexOf(i) >= 0) continue;
	      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	      target[i] = obj[i];
	    }

	    return target;
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (!self) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return call && (_typeof_1(call) === "object" || typeof call === "function") ? call : self;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function, not " + _typeof_1(superClass));
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	  }

	  var Item = function (_Component) {
	    _inherits(Item, _Component);

	    function Item() {
	      var _ref;

	      var _temp, _this, _ret;

	      _classCallCheck(this, Item);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Item.__proto__ || Object.getPrototypeOf(Item)).call.apply(_ref, [this].concat(args))), _this), _this.storeItemReference = function (item) {
	        if (item !== null) {
	          _this.item = item;
	        }
	      }, _this.onMouseEnter = function (event) {
	        var _this$props = _this.props,
	            sectionIndex = _this$props.sectionIndex,
	            itemIndex = _this$props.itemIndex;

	        _this.props.onMouseEnter(event, {
	          sectionIndex: sectionIndex,
	          itemIndex: itemIndex
	        });
	      }, _this.onMouseLeave = function (event) {
	        var _this$props2 = _this.props,
	            sectionIndex = _this$props2.sectionIndex,
	            itemIndex = _this$props2.itemIndex;

	        _this.props.onMouseLeave(event, {
	          sectionIndex: sectionIndex,
	          itemIndex: itemIndex
	        });
	      }, _this.onMouseDown = function (event) {
	        var _this$props3 = _this.props,
	            sectionIndex = _this$props3.sectionIndex,
	            itemIndex = _this$props3.itemIndex;

	        _this.props.onMouseDown(event, {
	          sectionIndex: sectionIndex,
	          itemIndex: itemIndex
	        });
	      }, _this.onClick = function (event) {
	        var _this$props4 = _this.props,
	            sectionIndex = _this$props4.sectionIndex,
	            itemIndex = _this$props4.itemIndex;

	        _this.props.onClick(event, {
	          sectionIndex: sectionIndex,
	          itemIndex: itemIndex
	        });
	      }, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    _createClass(Item, [{
	      key: 'shouldComponentUpdate',
	      value: function shouldComponentUpdate(nextProps) {
	        return (0, _compareObjects2.default)(nextProps, this.props, ['renderItemData']);
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            isHighlighted = _props.isHighlighted,
	            item = _props.item,
	            renderItem = _props.renderItem,
	            renderItemData = _props.renderItemData,
	            restProps = _objectWithoutProperties(_props, ['isHighlighted', 'item', 'renderItem', 'renderItemData']);

	        delete restProps.sectionIndex;
	        delete restProps.itemIndex;

	        if (typeof restProps.onMouseEnter === 'function') {
	          restProps.onMouseEnter = this.onMouseEnter;
	        }

	        if (typeof restProps.onMouseLeave === 'function') {
	          restProps.onMouseLeave = this.onMouseLeave;
	        }

	        if (typeof restProps.onMouseDown === 'function') {
	          restProps.onMouseDown = this.onMouseDown;
	        }

	        if (typeof restProps.onClick === 'function') {
	          restProps.onClick = this.onClick;
	        }

	        return _react2.default.createElement('li', _extends({
	          role: 'option'
	        }, restProps, {
	          ref: this.storeItemReference
	        }), renderItem(item, _extends({
	          isHighlighted: isHighlighted
	        }, renderItemData)));
	      }
	    }]);

	    return Item;
	  }(React__default.Component);

	  Item.propTypes = {
	    sectionIndex: _propTypes2.default.number,
	    isHighlighted: _propTypes2.default.bool.isRequired,
	    itemIndex: _propTypes2.default.number.isRequired,
	    item: _propTypes2.default.any.isRequired,
	    renderItem: _propTypes2.default.func.isRequired,
	    renderItemData: _propTypes2.default.object.isRequired,
	    onMouseEnter: _propTypes2.default.func,
	    onMouseLeave: _propTypes2.default.func,
	    onMouseDown: _propTypes2.default.func,
	    onClick: _propTypes2.default.func
	  };
	  exports.default = Item;
	});
	unwrapExports(Item_1);

	var ItemsList_1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();

	  var _react2 = _interopRequireDefault(React__default);

	  var _propTypes2 = _interopRequireDefault(PropTypes);

	  var _Item2 = _interopRequireDefault(Item_1);

	  var _compareObjects2 = _interopRequireDefault(compareObjects_1);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (!self) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return call && (_typeof_1(call) === "object" || typeof call === "function") ? call : self;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function, not " + _typeof_1(superClass));
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	  }

	  var ItemsList = function (_Component) {
	    _inherits(ItemsList, _Component);

	    function ItemsList() {
	      var _ref;

	      var _temp, _this, _ret;

	      _classCallCheck(this, ItemsList);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ItemsList.__proto__ || Object.getPrototypeOf(ItemsList)).call.apply(_ref, [this].concat(args))), _this), _this.storeHighlightedItemReference = function (highlightedItem) {
	        _this.props.onHighlightedItemChange(highlightedItem === null ? null : highlightedItem.item);
	      }, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    _createClass(ItemsList, [{
	      key: 'shouldComponentUpdate',
	      value: function shouldComponentUpdate(nextProps) {
	        return (0, _compareObjects2.default)(nextProps, this.props, ['itemProps']);
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this2 = this;

	        var _props = this.props,
	            items = _props.items,
	            itemProps = _props.itemProps,
	            renderItem = _props.renderItem,
	            renderItemData = _props.renderItemData,
	            sectionIndex = _props.sectionIndex,
	            highlightedItemIndex = _props.highlightedItemIndex,
	            getItemId = _props.getItemId,
	            theme = _props.theme,
	            keyPrefix = _props.keyPrefix;
	        var sectionPrefix = sectionIndex === null ? keyPrefix : keyPrefix + 'section-' + sectionIndex + '-';
	        var isItemPropsFunction = typeof itemProps === 'function';
	        return _react2.default.createElement('ul', _extends({
	          role: 'listbox'
	        }, theme(sectionPrefix + 'items-list', 'itemsList')), items.map(function (item, itemIndex) {
	          var isFirst = itemIndex === 0;
	          var isHighlighted = itemIndex === highlightedItemIndex;
	          var itemKey = sectionPrefix + 'item-' + itemIndex;
	          var itemPropsObj = isItemPropsFunction ? itemProps({
	            sectionIndex: sectionIndex,
	            itemIndex: itemIndex
	          }) : itemProps;

	          var allItemProps = _extends({
	            id: getItemId(sectionIndex, itemIndex),
	            'aria-selected': isHighlighted
	          }, theme(itemKey, 'item', isFirst && 'itemFirst', isHighlighted && 'itemHighlighted'), itemPropsObj);

	          if (isHighlighted) {
	            allItemProps.ref = _this2.storeHighlightedItemReference;
	          } // `key` is provided by theme()

	          /* eslint-disable react/jsx-key */


	          return _react2.default.createElement(_Item2.default, _extends({}, allItemProps, {
	            sectionIndex: sectionIndex,
	            isHighlighted: isHighlighted,
	            itemIndex: itemIndex,
	            item: item,
	            renderItem: renderItem,
	            renderItemData: renderItemData
	          }));
	          /* eslint-enable react/jsx-key */
	        }));
	      }
	    }]);

	    return ItemsList;
	  }(React__default.Component);

	  ItemsList.propTypes = {
	    items: _propTypes2.default.array.isRequired,
	    itemProps: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
	    renderItem: _propTypes2.default.func.isRequired,
	    renderItemData: _propTypes2.default.object.isRequired,
	    sectionIndex: _propTypes2.default.number,
	    highlightedItemIndex: _propTypes2.default.number,
	    onHighlightedItemChange: _propTypes2.default.func.isRequired,
	    getItemId: _propTypes2.default.func.isRequired,
	    theme: _propTypes2.default.func.isRequired,
	    keyPrefix: _propTypes2.default.string.isRequired
	  };
	  ItemsList.defaultProps = {
	    sectionIndex: null
	  };
	  exports.default = ItemsList;
	});
	unwrapExports(ItemsList_1);

	var Autowhatever_1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  var _slicedToArray = function () {
	    function sliceIterator(arr, i) {
	      var _arr = [];
	      var _n = true;
	      var _d = false;
	      var _e = undefined;

	      try {
	        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	          _arr.push(_s.value);

	          if (i && _arr.length === i) break;
	        }
	      } catch (err) {
	        _d = true;
	        _e = err;
	      } finally {
	        try {
	          if (!_n && _i["return"]) _i["return"]();
	        } finally {
	          if (_d) throw _e;
	        }
	      }

	      return _arr;
	    }

	    return function (arr, i) {
	      if (Array.isArray(arr)) {
	        return arr;
	      } else if (Symbol.iterator in Object(arr)) {
	        return sliceIterator(arr, i);
	      } else {
	        throw new TypeError("Invalid attempt to destructure non-iterable instance");
	      }
	    };
	  }();

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();

	  var _react2 = _interopRequireDefault(React__default);

	  var _propTypes2 = _interopRequireDefault(PropTypes);

	  var _sectionIterator2 = _interopRequireDefault(dist);

	  var _reactThemeable2 = _interopRequireDefault(dist$1);

	  var _SectionTitle2 = _interopRequireDefault(SectionTitle_1);

	  var _ItemsList2 = _interopRequireDefault(ItemsList_1);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (!self) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return call && (_typeof_1(call) === "object" || typeof call === "function") ? call : self;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function, not " + _typeof_1(superClass));
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	  }

	  var emptyObject = {};

	  var defaultRenderInputComponent = function defaultRenderInputComponent(props) {
	    return _react2.default.createElement('input', props);
	  };

	  var defaultRenderItemsContainer = function defaultRenderItemsContainer(_ref) {
	    var containerProps = _ref.containerProps,
	        children = _ref.children;
	    return _react2.default.createElement('div', containerProps, children);
	  };

	  var defaultTheme = {
	    container: 'react-autowhatever__container',
	    containerOpen: 'react-autowhatever__container--open',
	    input: 'react-autowhatever__input',
	    inputOpen: 'react-autowhatever__input--open',
	    inputFocused: 'react-autowhatever__input--focused',
	    itemsContainer: 'react-autowhatever__items-container',
	    itemsContainerOpen: 'react-autowhatever__items-container--open',
	    itemsList: 'react-autowhatever__items-list',
	    item: 'react-autowhatever__item',
	    itemFirst: 'react-autowhatever__item--first',
	    itemHighlighted: 'react-autowhatever__item--highlighted',
	    sectionContainer: 'react-autowhatever__section-container',
	    sectionContainerFirst: 'react-autowhatever__section-container--first',
	    sectionTitle: 'react-autowhatever__section-title'
	  };

	  var Autowhatever = function (_Component) {
	    _inherits(Autowhatever, _Component);

	    function Autowhatever(props) {
	      _classCallCheck(this, Autowhatever);

	      var _this = _possibleConstructorReturn(this, (Autowhatever.__proto__ || Object.getPrototypeOf(Autowhatever)).call(this, props));

	      _this.storeInputReference = function (input) {
	        if (input !== null) {
	          _this.input = input;
	        }
	      };

	      _this.storeItemsContainerReference = function (itemsContainer) {
	        if (itemsContainer !== null) {
	          _this.itemsContainer = itemsContainer;
	        }
	      };

	      _this.onHighlightedItemChange = function (highlightedItem) {
	        _this.highlightedItem = highlightedItem;
	      };

	      _this.getItemId = function (sectionIndex, itemIndex) {
	        if (itemIndex === null) {
	          return null;
	        }

	        var id = _this.props.id;
	        var section = sectionIndex === null ? '' : 'section-' + sectionIndex;
	        return 'react-autowhatever-' + id + '-' + section + '-item-' + itemIndex;
	      };

	      _this.onFocus = function (event) {
	        var inputProps = _this.props.inputProps;

	        _this.setState({
	          isInputFocused: true
	        });

	        inputProps.onFocus && inputProps.onFocus(event);
	      };

	      _this.onBlur = function (event) {
	        var inputProps = _this.props.inputProps;

	        _this.setState({
	          isInputFocused: false
	        });

	        inputProps.onBlur && inputProps.onBlur(event);
	      };

	      _this.onKeyDown = function (event) {
	        var _this$props = _this.props,
	            inputProps = _this$props.inputProps,
	            highlightedSectionIndex = _this$props.highlightedSectionIndex,
	            highlightedItemIndex = _this$props.highlightedItemIndex;

	        switch (event.key) {
	          case 'ArrowDown':
	          case 'ArrowUp':
	            {
	              var nextPrev = event.key === 'ArrowDown' ? 'next' : 'prev';

	              var _this$sectionIterator = _this.sectionIterator[nextPrev]([highlightedSectionIndex, highlightedItemIndex]),
	                  _this$sectionIterator2 = _slicedToArray(_this$sectionIterator, 2),
	                  newHighlightedSectionIndex = _this$sectionIterator2[0],
	                  newHighlightedItemIndex = _this$sectionIterator2[1];

	              inputProps.onKeyDown(event, {
	                newHighlightedSectionIndex: newHighlightedSectionIndex,
	                newHighlightedItemIndex: newHighlightedItemIndex
	              });
	              break;
	            }

	          default:
	            inputProps.onKeyDown(event, {
	              highlightedSectionIndex: highlightedSectionIndex,
	              highlightedItemIndex: highlightedItemIndex
	            });
	        }
	      };

	      _this.highlightedItem = null;
	      _this.state = {
	        isInputFocused: false
	      };

	      _this.setSectionsItems(props);

	      _this.setSectionIterator(props);

	      _this.setTheme(props);

	      return _this;
	    }

	    _createClass(Autowhatever, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        this.ensureHighlightedItemIsVisible();
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        if (nextProps.items !== this.props.items) {
	          this.setSectionsItems(nextProps);
	        }

	        if (nextProps.items !== this.props.items || nextProps.multiSection !== this.props.multiSection) {
	          this.setSectionIterator(nextProps);
	        }

	        if (nextProps.theme !== this.props.theme) {
	          this.setTheme(nextProps);
	        }
	      }
	    }, {
	      key: 'componentDidUpdate',
	      value: function componentDidUpdate() {
	        this.ensureHighlightedItemIsVisible();
	      }
	    }, {
	      key: 'setSectionsItems',
	      value: function setSectionsItems(props) {
	        if (props.multiSection) {
	          this.sectionsItems = props.items.map(function (section) {
	            return props.getSectionItems(section);
	          });
	          this.sectionsLengths = this.sectionsItems.map(function (items) {
	            return items.length;
	          });
	          this.allSectionsAreEmpty = this.sectionsLengths.every(function (itemsCount) {
	            return itemsCount === 0;
	          });
	        }
	      }
	    }, {
	      key: 'setSectionIterator',
	      value: function setSectionIterator(props) {
	        this.sectionIterator = (0, _sectionIterator2.default)({
	          multiSection: props.multiSection,
	          data: props.multiSection ? this.sectionsLengths : props.items.length
	        });
	      }
	    }, {
	      key: 'setTheme',
	      value: function setTheme(props) {
	        this.theme = (0, _reactThemeable2.default)(props.theme);
	      }
	    }, {
	      key: 'renderSections',
	      value: function renderSections() {
	        var _this2 = this;

	        if (this.allSectionsAreEmpty) {
	          return null;
	        }

	        var theme = this.theme;
	        var _props = this.props,
	            id = _props.id,
	            items = _props.items,
	            renderItem = _props.renderItem,
	            renderItemData = _props.renderItemData,
	            renderSectionTitle = _props.renderSectionTitle,
	            highlightedSectionIndex = _props.highlightedSectionIndex,
	            highlightedItemIndex = _props.highlightedItemIndex,
	            itemProps = _props.itemProps;
	        return items.map(function (section, sectionIndex) {
	          var keyPrefix = 'react-autowhatever-' + id + '-';
	          var sectionKeyPrefix = keyPrefix + 'section-' + sectionIndex + '-';
	          var isFirstSection = sectionIndex === 0; // `key` is provided by theme()

	          /* eslint-disable react/jsx-key */

	          return _react2.default.createElement('div', theme(sectionKeyPrefix + 'container', 'sectionContainer', isFirstSection && 'sectionContainerFirst'), _react2.default.createElement(_SectionTitle2.default, {
	            section: section,
	            renderSectionTitle: renderSectionTitle,
	            theme: theme,
	            sectionKeyPrefix: sectionKeyPrefix
	          }), _react2.default.createElement(_ItemsList2.default, {
	            items: _this2.sectionsItems[sectionIndex],
	            itemProps: itemProps,
	            renderItem: renderItem,
	            renderItemData: renderItemData,
	            sectionIndex: sectionIndex,
	            highlightedItemIndex: highlightedSectionIndex === sectionIndex ? highlightedItemIndex : null,
	            onHighlightedItemChange: _this2.onHighlightedItemChange,
	            getItemId: _this2.getItemId,
	            theme: theme,
	            keyPrefix: keyPrefix,
	            ref: _this2.storeItemsListReference
	          }));
	          /* eslint-enable react/jsx-key */
	        });
	      }
	    }, {
	      key: 'renderItems',
	      value: function renderItems() {
	        var items = this.props.items;

	        if (items.length === 0) {
	          return null;
	        }

	        var theme = this.theme;
	        var _props2 = this.props,
	            id = _props2.id,
	            renderItem = _props2.renderItem,
	            renderItemData = _props2.renderItemData,
	            highlightedSectionIndex = _props2.highlightedSectionIndex,
	            highlightedItemIndex = _props2.highlightedItemIndex,
	            itemProps = _props2.itemProps;
	        return _react2.default.createElement(_ItemsList2.default, {
	          items: items,
	          itemProps: itemProps,
	          renderItem: renderItem,
	          renderItemData: renderItemData,
	          highlightedItemIndex: highlightedSectionIndex === null ? highlightedItemIndex : null,
	          onHighlightedItemChange: this.onHighlightedItemChange,
	          getItemId: this.getItemId,
	          theme: theme,
	          keyPrefix: 'react-autowhatever-' + id + '-'
	        });
	      }
	    }, {
	      key: 'ensureHighlightedItemIsVisible',
	      value: function ensureHighlightedItemIsVisible() {
	        var highlightedItem = this.highlightedItem;

	        if (!highlightedItem) {
	          return;
	        }

	        var itemsContainer = this.itemsContainer;
	        var itemOffsetRelativeToContainer = highlightedItem.offsetParent === itemsContainer ? highlightedItem.offsetTop : highlightedItem.offsetTop - itemsContainer.offsetTop;
	        var scrollTop = itemsContainer.scrollTop; // Top of the visible area

	        if (itemOffsetRelativeToContainer < scrollTop) {
	          // Item is off the top of the visible area
	          scrollTop = itemOffsetRelativeToContainer;
	        } else if (itemOffsetRelativeToContainer + highlightedItem.offsetHeight > scrollTop + itemsContainer.offsetHeight) {
	          // Item is off the bottom of the visible area
	          scrollTop = itemOffsetRelativeToContainer + highlightedItem.offsetHeight - itemsContainer.offsetHeight;
	        }

	        if (scrollTop !== itemsContainer.scrollTop) {
	          itemsContainer.scrollTop = scrollTop;
	        }
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var theme = this.theme;
	        var _props3 = this.props,
	            id = _props3.id,
	            multiSection = _props3.multiSection,
	            renderInputComponent = _props3.renderInputComponent,
	            renderItemsContainer = _props3.renderItemsContainer,
	            highlightedSectionIndex = _props3.highlightedSectionIndex,
	            highlightedItemIndex = _props3.highlightedItemIndex;
	        var isInputFocused = this.state.isInputFocused;
	        var renderedItems = multiSection ? this.renderSections() : this.renderItems();
	        var isOpen = renderedItems !== null;
	        var ariaActivedescendant = this.getItemId(highlightedSectionIndex, highlightedItemIndex);
	        var itemsContainerId = 'react-autowhatever-' + id;

	        var containerProps = _extends({
	          role: 'combobox',
	          'aria-haspopup': 'listbox',
	          'aria-owns': itemsContainerId,
	          'aria-expanded': isOpen
	        }, theme('react-autowhatever-' + id + '-container', 'container', isOpen && 'containerOpen'), this.props.containerProps);

	        var inputComponent = renderInputComponent(_extends({
	          type: 'text',
	          value: '',
	          autoComplete: 'off',
	          'aria-autocomplete': 'list',
	          'aria-controls': itemsContainerId,
	          'aria-activedescendant': ariaActivedescendant
	        }, theme('react-autowhatever-' + id + '-input', 'input', isOpen && 'inputOpen', isInputFocused && 'inputFocused'), this.props.inputProps, {
	          onFocus: this.onFocus,
	          onBlur: this.onBlur,
	          onKeyDown: this.props.inputProps.onKeyDown && this.onKeyDown,
	          ref: this.storeInputReference
	        }));
	        var itemsContainer = renderItemsContainer({
	          containerProps: _extends({
	            id: itemsContainerId,
	            role: 'listbox'
	          }, theme('react-autowhatever-' + id + '-items-container', 'itemsContainer', isOpen && 'itemsContainerOpen'), {
	            ref: this.storeItemsContainerReference
	          }),
	          children: renderedItems
	        });
	        return _react2.default.createElement('div', containerProps, inputComponent, itemsContainer);
	      }
	    }]);

	    return Autowhatever;
	  }(React__default.Component);

	  Autowhatever.propTypes = {
	    id: _propTypes2.default.string,
	    // Used in aria-* attributes. If multiple Autowhatever's are rendered on a page, they must have unique ids.
	    multiSection: _propTypes2.default.bool,
	    // Indicates whether a multi section layout should be rendered.
	    renderInputComponent: _propTypes2.default.func,
	    // When specified, it is used to render the input element.
	    renderItemsContainer: _propTypes2.default.func,
	    // Renders the items container.
	    items: _propTypes2.default.array.isRequired,
	    // Array of items or sections to render.
	    renderItem: _propTypes2.default.func,
	    // This function renders a single item.
	    renderItemData: _propTypes2.default.object,
	    // Arbitrary data that will be passed to renderItem()
	    renderSectionTitle: _propTypes2.default.func,
	    // This function gets a section and renders its title.
	    getSectionItems: _propTypes2.default.func,
	    // This function gets a section and returns its items, which will be passed into `renderItem` for rendering.
	    containerProps: _propTypes2.default.object,
	    // Arbitrary container props
	    inputProps: _propTypes2.default.object,
	    // Arbitrary input props
	    itemProps: _propTypes2.default.oneOfType([// Arbitrary item props
	    _propTypes2.default.object, _propTypes2.default.func]),
	    highlightedSectionIndex: _propTypes2.default.number,
	    // Section index of the highlighted item
	    highlightedItemIndex: _propTypes2.default.number,
	    // Highlighted item index (within a section)
	    theme: _propTypes2.default.oneOfType([// Styles. See: https://github.com/markdalgleish/react-themeable
	    _propTypes2.default.object, _propTypes2.default.array])
	  };
	  Autowhatever.defaultProps = {
	    id: '1',
	    multiSection: false,
	    renderInputComponent: defaultRenderInputComponent,
	    renderItemsContainer: defaultRenderItemsContainer,
	    renderItem: function renderItem() {
	      throw new Error('`renderItem` must be provided');
	    },
	    renderItemData: emptyObject,
	    renderSectionTitle: function renderSectionTitle() {
	      throw new Error('`renderSectionTitle` must be provided');
	    },
	    getSectionItems: function getSectionItems() {
	      throw new Error('`getSectionItems` must be provided');
	    },
	    containerProps: emptyObject,
	    inputProps: emptyObject,
	    itemProps: emptyObject,
	    highlightedSectionIndex: null,
	    highlightedItemIndex: null,
	    theme: defaultTheme
	  };
	  exports.default = Autowhatever;
	});
	unwrapExports(Autowhatever_1);

	var dist$2 = Autowhatever_1.default;

	var theme = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  var defaultTheme = exports.defaultTheme = {
	    container: 'react-autosuggest__container',
	    containerOpen: 'react-autosuggest__container--open',
	    input: 'react-autosuggest__input',
	    inputOpen: 'react-autosuggest__input--open',
	    inputFocused: 'react-autosuggest__input--focused',
	    suggestionsContainer: 'react-autosuggest__suggestions-container',
	    suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',
	    suggestionsList: 'react-autosuggest__suggestions-list',
	    suggestion: 'react-autosuggest__suggestion',
	    suggestionFirst: 'react-autosuggest__suggestion--first',
	    suggestionHighlighted: 'react-autosuggest__suggestion--highlighted',
	    sectionContainer: 'react-autosuggest__section-container',
	    sectionContainerFirst: 'react-autosuggest__section-container--first',
	    sectionTitle: 'react-autosuggest__section-title'
	  };

	  var mapToAutowhateverTheme = exports.mapToAutowhateverTheme = function mapToAutowhateverTheme(theme) {
	    var result = {};

	    for (var key in theme) {
	      switch (key) {
	        case 'suggestionsContainer':
	          result['itemsContainer'] = theme[key];
	          break;

	        case 'suggestionsContainerOpen':
	          result['itemsContainerOpen'] = theme[key];
	          break;

	        case 'suggestion':
	          result['item'] = theme[key];
	          break;

	        case 'suggestionFirst':
	          result['itemFirst'] = theme[key];
	          break;

	        case 'suggestionHighlighted':
	          result['itemHighlighted'] = theme[key];
	          break;

	        case 'suggestionsList':
	          result['itemsList'] = theme[key];
	          break;

	        default:
	          result[key] = theme[key];
	      }
	    }

	    return result;
	  };
	});
	unwrapExports(theme);

	var Autosuggest_1 = createCommonjsModule(function (module, exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();

	  var _react2 = _interopRequireDefault(React__default);

	  var _propTypes2 = _interopRequireDefault(PropTypes);

	  var _arrays2 = _interopRequireDefault(arrays);

	  var _reactAutowhatever2 = _interopRequireDefault(dist$2);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (!self) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return call && (_typeof_1(call) === "object" || typeof call === "function") ? call : self;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function, not " + _typeof_1(superClass));
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	  }

	  var alwaysTrue = function alwaysTrue() {
	    return true;
	  };

	  var defaultShouldRenderSuggestions = function defaultShouldRenderSuggestions(value) {
	    return value.trim().length > 0;
	  };

	  var defaultRenderSuggestionsContainer = function defaultRenderSuggestionsContainer(_ref) {
	    var containerProps = _ref.containerProps,
	        children = _ref.children;
	    return _react2.default.createElement('div', containerProps, children);
	  };

	  var Autosuggest = function (_Component) {
	    _inherits(Autosuggest, _Component);

	    function Autosuggest(_ref2) {
	      var alwaysRenderSuggestions = _ref2.alwaysRenderSuggestions;

	      _classCallCheck(this, Autosuggest);

	      var _this = _possibleConstructorReturn(this, (Autosuggest.__proto__ || Object.getPrototypeOf(Autosuggest)).call(this));

	      _initialiseProps.call(_this);

	      _this.state = {
	        isFocused: false,
	        isCollapsed: !alwaysRenderSuggestions,
	        highlightedSectionIndex: null,
	        highlightedSuggestionIndex: null,
	        highlightedSuggestion: null,
	        valueBeforeUpDown: null
	      };
	      _this.justPressedUpDown = false;
	      _this.justMouseEntered = false;
	      _this.pressedSuggestion = null;
	      return _this;
	    }

	    _createClass(Autosuggest, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        document.addEventListener('mousedown', this.onDocumentMouseDown);
	        document.addEventListener('mouseup', this.onDocumentMouseUp);
	        this.input = this.autowhatever.input;
	        this.suggestionsContainer = this.autowhatever.itemsContainer;
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        if ((0, _arrays2.default)(nextProps.suggestions, this.props.suggestions)) {
	          if (nextProps.highlightFirstSuggestion && nextProps.suggestions.length > 0 && this.justPressedUpDown === false && this.justMouseEntered === false) {
	            this.highlightFirstSuggestion();
	          }
	        } else {
	          if (this.willRenderSuggestions(nextProps)) {
	            if (this.state.isCollapsed && !this.justSelectedSuggestion) {
	              this.revealSuggestions();
	            }
	          } else {
	            this.resetHighlightedSuggestion();
	          }
	        }
	      }
	    }, {
	      key: 'componentDidUpdate',
	      value: function componentDidUpdate(prevProps, prevState) {
	        var _props = this.props,
	            suggestions = _props.suggestions,
	            onSuggestionHighlighted = _props.onSuggestionHighlighted,
	            highlightFirstSuggestion = _props.highlightFirstSuggestion;

	        if (!(0, _arrays2.default)(suggestions, prevProps.suggestions) && suggestions.length > 0 && highlightFirstSuggestion) {
	          this.highlightFirstSuggestion();
	          return;
	        }

	        if (onSuggestionHighlighted) {
	          var highlightedSuggestion = this.getHighlightedSuggestion();
	          var prevHighlightedSuggestion = prevState.highlightedSuggestion;

	          if (highlightedSuggestion != prevHighlightedSuggestion) {
	            onSuggestionHighlighted({
	              suggestion: highlightedSuggestion
	            });
	          }
	        }
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        document.removeEventListener('mousedown', this.onDocumentMouseDown);
	        document.removeEventListener('mouseup', this.onDocumentMouseUp);
	      }
	    }, {
	      key: 'updateHighlightedSuggestion',
	      value: function updateHighlightedSuggestion(sectionIndex, suggestionIndex, prevValue) {
	        var _this2 = this;

	        this.setState(function (state) {
	          var valueBeforeUpDown = state.valueBeforeUpDown;

	          if (suggestionIndex === null) {
	            valueBeforeUpDown = null;
	          } else if (valueBeforeUpDown === null && typeof prevValue !== 'undefined') {
	            valueBeforeUpDown = prevValue;
	          }

	          return {
	            highlightedSectionIndex: sectionIndex,
	            highlightedSuggestionIndex: suggestionIndex,
	            highlightedSuggestion: suggestionIndex === null ? null : _this2.getSuggestion(sectionIndex, suggestionIndex),
	            valueBeforeUpDown: valueBeforeUpDown
	          };
	        });
	      }
	    }, {
	      key: 'resetHighlightedSuggestion',
	      value: function resetHighlightedSuggestion() {
	        var shouldResetValueBeforeUpDown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	        this.setState(function (state) {
	          var valueBeforeUpDown = state.valueBeforeUpDown;
	          return {
	            highlightedSectionIndex: null,
	            highlightedSuggestionIndex: null,
	            highlightedSuggestion: null,
	            valueBeforeUpDown: shouldResetValueBeforeUpDown ? null : valueBeforeUpDown
	          };
	        });
	      }
	    }, {
	      key: 'revealSuggestions',
	      value: function revealSuggestions() {
	        this.setState({
	          isCollapsed: false
	        });
	      }
	    }, {
	      key: 'closeSuggestions',
	      value: function closeSuggestions() {
	        this.setState({
	          highlightedSectionIndex: null,
	          highlightedSuggestionIndex: null,
	          highlightedSuggestion: null,
	          valueBeforeUpDown: null,
	          isCollapsed: true
	        });
	      }
	    }, {
	      key: 'getSuggestion',
	      value: function getSuggestion(sectionIndex, suggestionIndex) {
	        var _props2 = this.props,
	            suggestions = _props2.suggestions,
	            multiSection = _props2.multiSection,
	            getSectionSuggestions = _props2.getSectionSuggestions;

	        if (multiSection) {
	          return getSectionSuggestions(suggestions[sectionIndex])[suggestionIndex];
	        }

	        return suggestions[suggestionIndex];
	      }
	    }, {
	      key: 'getHighlightedSuggestion',
	      value: function getHighlightedSuggestion() {
	        var _state = this.state,
	            highlightedSectionIndex = _state.highlightedSectionIndex,
	            highlightedSuggestionIndex = _state.highlightedSuggestionIndex;

	        if (highlightedSuggestionIndex === null) {
	          return null;
	        }

	        return this.getSuggestion(highlightedSectionIndex, highlightedSuggestionIndex);
	      }
	    }, {
	      key: 'getSuggestionValueByIndex',
	      value: function getSuggestionValueByIndex(sectionIndex, suggestionIndex) {
	        var getSuggestionValue = this.props.getSuggestionValue;
	        return getSuggestionValue(this.getSuggestion(sectionIndex, suggestionIndex));
	      }
	    }, {
	      key: 'getSuggestionIndices',
	      value: function getSuggestionIndices(suggestionElement) {
	        var sectionIndex = suggestionElement.getAttribute('data-section-index');
	        var suggestionIndex = suggestionElement.getAttribute('data-suggestion-index');
	        return {
	          sectionIndex: typeof sectionIndex === 'string' ? parseInt(sectionIndex, 10) : null,
	          suggestionIndex: parseInt(suggestionIndex, 10)
	        };
	      }
	    }, {
	      key: 'findSuggestionElement',
	      value: function findSuggestionElement(startNode) {
	        var node = startNode;

	        do {
	          if (node.getAttribute('data-suggestion-index') !== null) {
	            return node;
	          }

	          node = node.parentNode;
	        } while (node !== null);

	        console.error('Clicked element:', startNode); // eslint-disable-line no-console

	        throw new Error("Couldn't find suggestion element");
	      }
	    }, {
	      key: 'maybeCallOnChange',
	      value: function maybeCallOnChange(event, newValue, method) {
	        var _props$inputProps = this.props.inputProps,
	            value = _props$inputProps.value,
	            onChange = _props$inputProps.onChange;

	        if (newValue !== value) {
	          onChange(event, {
	            newValue: newValue,
	            method: method
	          });
	        }
	      }
	    }, {
	      key: 'willRenderSuggestions',
	      value: function willRenderSuggestions(props) {
	        var suggestions = props.suggestions,
	            inputProps = props.inputProps,
	            shouldRenderSuggestions = props.shouldRenderSuggestions;
	        var value = inputProps.value;
	        return suggestions.length > 0 && shouldRenderSuggestions(value);
	      }
	    }, {
	      key: 'getQuery',
	      value: function getQuery() {
	        var inputProps = this.props.inputProps;
	        var value = inputProps.value;
	        var valueBeforeUpDown = this.state.valueBeforeUpDown;
	        return (valueBeforeUpDown === null ? value : valueBeforeUpDown).trim();
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this3 = this;

	        var _props3 = this.props,
	            suggestions = _props3.suggestions,
	            renderInputComponent = _props3.renderInputComponent,
	            onSuggestionsFetchRequested = _props3.onSuggestionsFetchRequested,
	            renderSuggestion = _props3.renderSuggestion,
	            inputProps = _props3.inputProps,
	            multiSection = _props3.multiSection,
	            renderSectionTitle = _props3.renderSectionTitle,
	            id = _props3.id,
	            getSectionSuggestions = _props3.getSectionSuggestions,
	            theme$1 = _props3.theme,
	            getSuggestionValue = _props3.getSuggestionValue,
	            alwaysRenderSuggestions = _props3.alwaysRenderSuggestions,
	            highlightFirstSuggestion = _props3.highlightFirstSuggestion;
	        var _state2 = this.state,
	            isFocused = _state2.isFocused,
	            isCollapsed = _state2.isCollapsed,
	            highlightedSectionIndex = _state2.highlightedSectionIndex,
	            highlightedSuggestionIndex = _state2.highlightedSuggestionIndex,
	            valueBeforeUpDown = _state2.valueBeforeUpDown;
	        var shouldRenderSuggestions = alwaysRenderSuggestions ? alwaysTrue : this.props.shouldRenderSuggestions;
	        var value = inputProps.value,
	            _onFocus = inputProps.onFocus,
	            _onKeyDown = inputProps.onKeyDown;
	        var willRenderSuggestions = this.willRenderSuggestions(this.props);
	        var isOpen = alwaysRenderSuggestions || isFocused && !isCollapsed && willRenderSuggestions;
	        var items = isOpen ? suggestions : [];

	        var autowhateverInputProps = _extends({}, inputProps, {
	          onFocus: function onFocus(event) {
	            if (!_this3.justSelectedSuggestion && !_this3.justClickedOnSuggestionsContainer) {
	              var shouldRender = shouldRenderSuggestions(value);

	              _this3.setState({
	                isFocused: true,
	                isCollapsed: !shouldRender
	              });

	              _onFocus && _onFocus(event);

	              if (shouldRender) {
	                onSuggestionsFetchRequested({
	                  value: value,
	                  reason: 'input-focused'
	                });
	              }
	            }
	          },
	          onBlur: function onBlur(event) {
	            if (_this3.justClickedOnSuggestionsContainer) {
	              _this3.input.focus();

	              return;
	            }

	            _this3.blurEvent = event;

	            if (!_this3.justSelectedSuggestion) {
	              _this3.onBlur();

	              _this3.onSuggestionsClearRequested();
	            }
	          },
	          onChange: function onChange(event) {
	            var value = event.target.value;
	            var shouldRender = shouldRenderSuggestions(value);

	            _this3.maybeCallOnChange(event, value, 'type');

	            if (_this3.suggestionsContainer) {
	              _this3.suggestionsContainer.scrollTop = 0;
	            }

	            _this3.setState(_extends({}, highlightFirstSuggestion ? {} : {
	              highlightedSectionIndex: null,
	              highlightedSuggestionIndex: null,
	              highlightedSuggestion: null
	            }, {
	              valueBeforeUpDown: null,
	              isCollapsed: !shouldRender
	            }));

	            if (shouldRender) {
	              onSuggestionsFetchRequested({
	                value: value,
	                reason: 'input-changed'
	              });
	            } else {
	              _this3.onSuggestionsClearRequested();
	            }
	          },
	          onKeyDown: function onKeyDown(event, data) {
	            var keyCode = event.keyCode;

	            switch (keyCode) {
	              case 40: // ArrowDown

	              case 38:
	                // ArrowUp
	                if (isCollapsed) {
	                  if (shouldRenderSuggestions(value)) {
	                    onSuggestionsFetchRequested({
	                      value: value,
	                      reason: 'suggestions-revealed'
	                    });

	                    _this3.revealSuggestions();
	                  }
	                } else if (suggestions.length > 0) {
	                  var newHighlightedSectionIndex = data.newHighlightedSectionIndex,
	                      newHighlightedItemIndex = data.newHighlightedItemIndex;
	                  var newValue = void 0;

	                  if (newHighlightedItemIndex === null) {
	                    // valueBeforeUpDown can be null if, for example, user
	                    // hovers on the first suggestion and then pressed Up.
	                    // If that happens, use the original input value.
	                    newValue = valueBeforeUpDown === null ? value : valueBeforeUpDown;
	                  } else {
	                    newValue = _this3.getSuggestionValueByIndex(newHighlightedSectionIndex, newHighlightedItemIndex);
	                  }

	                  _this3.updateHighlightedSuggestion(newHighlightedSectionIndex, newHighlightedItemIndex, value);

	                  _this3.maybeCallOnChange(event, newValue, keyCode === 40 ? 'down' : 'up');
	                }

	                event.preventDefault(); // Prevents the cursor from moving

	                _this3.justPressedUpDown = true;
	                setTimeout(function () {
	                  _this3.justPressedUpDown = false;
	                });
	                break;
	              // Enter

	              case 13:
	                {
	                  // See #388
	                  if (event.keyCode === 229) {
	                    break;
	                  }

	                  var highlightedSuggestion = _this3.getHighlightedSuggestion();

	                  if (isOpen && !alwaysRenderSuggestions) {
	                    _this3.closeSuggestions();
	                  }

	                  if (highlightedSuggestion != null) {
	                    var _newValue = getSuggestionValue(highlightedSuggestion);

	                    _this3.maybeCallOnChange(event, _newValue, 'enter');

	                    _this3.onSuggestionSelected(event, {
	                      suggestion: highlightedSuggestion,
	                      suggestionValue: _newValue,
	                      suggestionIndex: highlightedSuggestionIndex,
	                      sectionIndex: highlightedSectionIndex,
	                      method: 'enter'
	                    });

	                    _this3.justSelectedSuggestion = true;
	                    setTimeout(function () {
	                      _this3.justSelectedSuggestion = false;
	                    });
	                  }

	                  break;
	                }
	              // Escape

	              case 27:
	                {
	                  if (isOpen) {
	                    // If input.type === 'search', the browser clears the input
	                    // when Escape is pressed. We want to disable this default
	                    // behaviour so that, when suggestions are shown, we just hide
	                    // them, without clearing the input.
	                    event.preventDefault();
	                  }

	                  var willCloseSuggestions = isOpen && !alwaysRenderSuggestions;

	                  if (valueBeforeUpDown === null) {
	                    // Didn't interact with Up/Down
	                    if (!willCloseSuggestions) {
	                      var _newValue2 = '';

	                      _this3.maybeCallOnChange(event, _newValue2, 'escape');

	                      if (shouldRenderSuggestions(_newValue2)) {
	                        onSuggestionsFetchRequested({
	                          value: _newValue2,
	                          reason: 'escape-pressed'
	                        });
	                      } else {
	                        _this3.onSuggestionsClearRequested();
	                      }
	                    }
	                  } else {
	                    // Interacted with Up/Down
	                    _this3.maybeCallOnChange(event, valueBeforeUpDown, 'escape');
	                  }

	                  if (willCloseSuggestions) {
	                    _this3.onSuggestionsClearRequested();

	                    _this3.closeSuggestions();
	                  } else {
	                    _this3.resetHighlightedSuggestion();
	                  }

	                  break;
	                }
	            }

	            _onKeyDown && _onKeyDown(event);
	          }
	        });

	        var renderSuggestionData = {
	          query: this.getQuery()
	        };
	        return _react2.default.createElement(_reactAutowhatever2.default, {
	          multiSection: multiSection,
	          items: items,
	          renderInputComponent: renderInputComponent,
	          renderItemsContainer: this.renderSuggestionsContainer,
	          renderItem: renderSuggestion,
	          renderItemData: renderSuggestionData,
	          renderSectionTitle: renderSectionTitle,
	          getSectionItems: getSectionSuggestions,
	          highlightedSectionIndex: highlightedSectionIndex,
	          highlightedItemIndex: highlightedSuggestionIndex,
	          inputProps: autowhateverInputProps,
	          itemProps: this.itemProps,
	          theme: (0, theme.mapToAutowhateverTheme)(theme$1),
	          id: id,
	          ref: this.storeAutowhateverRef
	        });
	      }
	    }]);

	    return Autosuggest;
	  }(React__default.Component);

	  Autosuggest.propTypes = {
	    suggestions: _propTypes2.default.array.isRequired,
	    onSuggestionsFetchRequested: function onSuggestionsFetchRequested(props, propName) {
	      var onSuggestionsFetchRequested = props[propName];

	      if (typeof onSuggestionsFetchRequested !== 'function') {
	        throw new Error("'onSuggestionsFetchRequested' must be implemented. See: https://github.com/moroshko/react-autosuggest#onSuggestionsFetchRequestedProp");
	      }
	    },
	    onSuggestionsClearRequested: function onSuggestionsClearRequested(props, propName) {
	      var onSuggestionsClearRequested = props[propName];

	      if (props.alwaysRenderSuggestions === false && typeof onSuggestionsClearRequested !== 'function') {
	        throw new Error("'onSuggestionsClearRequested' must be implemented. See: https://github.com/moroshko/react-autosuggest#onSuggestionsClearRequestedProp");
	      }
	    },
	    onSuggestionSelected: _propTypes2.default.func,
	    onSuggestionHighlighted: _propTypes2.default.func,
	    renderInputComponent: _propTypes2.default.func,
	    renderSuggestionsContainer: _propTypes2.default.func,
	    getSuggestionValue: _propTypes2.default.func.isRequired,
	    renderSuggestion: _propTypes2.default.func.isRequired,
	    inputProps: function inputProps(props, propName) {
	      var inputProps = props[propName];

	      if (!inputProps.hasOwnProperty('value')) {
	        throw new Error("'inputProps' must have 'value'.");
	      }

	      if (!inputProps.hasOwnProperty('onChange')) {
	        throw new Error("'inputProps' must have 'onChange'.");
	      }
	    },
	    shouldRenderSuggestions: _propTypes2.default.func,
	    alwaysRenderSuggestions: _propTypes2.default.bool,
	    multiSection: _propTypes2.default.bool,
	    renderSectionTitle: function renderSectionTitle(props, propName) {
	      var renderSectionTitle = props[propName];

	      if (props.multiSection === true && typeof renderSectionTitle !== 'function') {
	        throw new Error("'renderSectionTitle' must be implemented. See: https://github.com/moroshko/react-autosuggest#renderSectionTitleProp");
	      }
	    },
	    getSectionSuggestions: function getSectionSuggestions(props, propName) {
	      var getSectionSuggestions = props[propName];

	      if (props.multiSection === true && typeof getSectionSuggestions !== 'function') {
	        throw new Error("'getSectionSuggestions' must be implemented. See: https://github.com/moroshko/react-autosuggest#getSectionSuggestionsProp");
	      }
	    },
	    focusInputOnSuggestionClick: _propTypes2.default.bool,
	    highlightFirstSuggestion: _propTypes2.default.bool,
	    theme: _propTypes2.default.object,
	    id: _propTypes2.default.string
	  };
	  Autosuggest.defaultProps = {
	    renderSuggestionsContainer: defaultRenderSuggestionsContainer,
	    shouldRenderSuggestions: defaultShouldRenderSuggestions,
	    alwaysRenderSuggestions: false,
	    multiSection: false,
	    focusInputOnSuggestionClick: true,
	    highlightFirstSuggestion: false,
	    theme: theme.defaultTheme,
	    id: '1'
	  };

	  var _initialiseProps = function _initialiseProps() {
	    var _this4 = this;

	    this.onDocumentMouseDown = function (event) {
	      _this4.justClickedOnSuggestionsContainer = false;
	      var node = event.detail && event.detail.target || // This is for testing only. Please show me a better way to emulate this.
	      event.target;

	      while (node !== null && node !== document) {
	        if (node.getAttribute('data-suggestion-index') !== null) {
	          // Suggestion was clicked
	          return;
	        }

	        if (node === _this4.suggestionsContainer) {
	          // Something else inside suggestions container was clicked
	          _this4.justClickedOnSuggestionsContainer = true;
	          return;
	        }

	        node = node.parentNode;
	      }
	    };

	    this.storeAutowhateverRef = function (autowhatever) {
	      if (autowhatever !== null) {
	        _this4.autowhatever = autowhatever;
	      }
	    };

	    this.onSuggestionMouseEnter = function (event, _ref3) {
	      var sectionIndex = _ref3.sectionIndex,
	          itemIndex = _ref3.itemIndex;

	      _this4.updateHighlightedSuggestion(sectionIndex, itemIndex);

	      if (event.target === _this4.pressedSuggestion) {
	        _this4.justSelectedSuggestion = true;
	      }

	      _this4.justMouseEntered = true;
	      setTimeout(function () {
	        _this4.justMouseEntered = false;
	      });
	    };

	    this.highlightFirstSuggestion = function () {
	      _this4.updateHighlightedSuggestion(_this4.props.multiSection ? 0 : null, 0);
	    };

	    this.onDocumentMouseUp = function () {
	      if (_this4.pressedSuggestion && !_this4.justSelectedSuggestion) {
	        _this4.input.focus();
	      }

	      _this4.pressedSuggestion = null;
	    };

	    this.onSuggestionMouseDown = function (event) {
	      // Checking if this.justSelectedSuggestion is already true to not duplicate touch events in chrome
	      // See: https://github.com/facebook/react/issues/9809#issuecomment-413978405
	      if (!_this4.justSelectedSuggestion) {
	        _this4.justSelectedSuggestion = true;
	        _this4.pressedSuggestion = event.target;
	      }
	    };

	    this.onSuggestionsClearRequested = function () {
	      var onSuggestionsClearRequested = _this4.props.onSuggestionsClearRequested;
	      onSuggestionsClearRequested && onSuggestionsClearRequested();
	    };

	    this.onSuggestionSelected = function (event, data) {
	      var _props4 = _this4.props,
	          alwaysRenderSuggestions = _props4.alwaysRenderSuggestions,
	          onSuggestionSelected = _props4.onSuggestionSelected,
	          onSuggestionsFetchRequested = _props4.onSuggestionsFetchRequested;
	      onSuggestionSelected && onSuggestionSelected(event, data);

	      if (alwaysRenderSuggestions) {
	        onSuggestionsFetchRequested({
	          value: data.suggestionValue,
	          reason: 'suggestion-selected'
	        });
	      } else {
	        _this4.onSuggestionsClearRequested();
	      }

	      _this4.resetHighlightedSuggestion();
	    };

	    this.onSuggestionClick = function (event) {
	      var _props5 = _this4.props,
	          alwaysRenderSuggestions = _props5.alwaysRenderSuggestions,
	          focusInputOnSuggestionClick = _props5.focusInputOnSuggestionClick;

	      var _getSuggestionIndices = _this4.getSuggestionIndices(_this4.findSuggestionElement(event.target)),
	          sectionIndex = _getSuggestionIndices.sectionIndex,
	          suggestionIndex = _getSuggestionIndices.suggestionIndex;

	      var clickedSuggestion = _this4.getSuggestion(sectionIndex, suggestionIndex);

	      var clickedSuggestionValue = _this4.props.getSuggestionValue(clickedSuggestion);

	      _this4.maybeCallOnChange(event, clickedSuggestionValue, 'click');

	      _this4.onSuggestionSelected(event, {
	        suggestion: clickedSuggestion,
	        suggestionValue: clickedSuggestionValue,
	        suggestionIndex: suggestionIndex,
	        sectionIndex: sectionIndex,
	        method: 'click'
	      });

	      if (!alwaysRenderSuggestions) {
	        _this4.closeSuggestions();
	      }

	      if (focusInputOnSuggestionClick === true) {
	        _this4.input.focus();
	      } else {
	        _this4.onBlur();
	      }

	      setTimeout(function () {
	        _this4.justSelectedSuggestion = false;
	      });
	    };

	    this.onBlur = function () {
	      var _props6 = _this4.props,
	          inputProps = _props6.inputProps,
	          shouldRenderSuggestions = _props6.shouldRenderSuggestions;
	      var value = inputProps.value,
	          onBlur = inputProps.onBlur;

	      var highlightedSuggestion = _this4.getHighlightedSuggestion();

	      var shouldRender = shouldRenderSuggestions(value);

	      _this4.setState({
	        isFocused: false,
	        highlightedSectionIndex: null,
	        highlightedSuggestionIndex: null,
	        highlightedSuggestion: null,
	        valueBeforeUpDown: null,
	        isCollapsed: !shouldRender
	      });

	      onBlur && onBlur(_this4.blurEvent, {
	        highlightedSuggestion: highlightedSuggestion
	      });
	    };

	    this.onSuggestionMouseLeave = function (event) {
	      _this4.resetHighlightedSuggestion(false); // shouldResetValueBeforeUpDown


	      if (_this4.justSelectedSuggestion && event.target === _this4.pressedSuggestion) {
	        _this4.justSelectedSuggestion = false;
	      }
	    };

	    this.onSuggestionTouchStart = function () {
	      _this4.justSelectedSuggestion = true; // todo: event.preventDefault when https://github.com/facebook/react/issues/2043
	      // todo: gets released so onSuggestionMouseDown won't fire in chrome
	    };

	    this.onSuggestionTouchMove = function () {
	      _this4.justSelectedSuggestion = false;
	      _this4.pressedSuggestion = null;

	      _this4.input.focus();
	    };

	    this.itemProps = function (_ref4) {
	      var sectionIndex = _ref4.sectionIndex,
	          itemIndex = _ref4.itemIndex;
	      return {
	        'data-section-index': sectionIndex,
	        'data-suggestion-index': itemIndex,
	        onMouseEnter: _this4.onSuggestionMouseEnter,
	        onMouseLeave: _this4.onSuggestionMouseLeave,
	        onMouseDown: _this4.onSuggestionMouseDown,
	        onTouchStart: _this4.onSuggestionTouchStart,
	        onTouchMove: _this4.onSuggestionTouchMove,
	        onClick: _this4.onSuggestionClick
	      };
	    };

	    this.renderSuggestionsContainer = function (_ref5) {
	      var containerProps = _ref5.containerProps,
	          children = _ref5.children;
	      var renderSuggestionsContainer = _this4.props.renderSuggestionsContainer;
	      return renderSuggestionsContainer({
	        containerProps: containerProps,
	        children: children,
	        query: _this4.getQuery()
	      });
	    };
	  };

	  exports.default = Autosuggest;
	});
	unwrapExports(Autosuggest_1);

	var dist$3 = Autosuggest_1.default;

	/**
	 * Copyright IBM Corp. 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Utiltity function for escaping regex expressions
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
	 *
	 * @param {string} str String to escape regex
	 * @returns {string} Final string with escaped regex
	 * @example
	 * import { escapeRegExp } from '@carbon/ibmdotcom-utilities'
	 *
	 * const result = escapeRegExp('Hello?!*`~World()[]');
	 * console.log(result); // Hello\?!\*`~World\(\)\[\]
	 *
	 */
	function escapeRegExp(str) {
	  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function ownKeys$n(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$l(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$n(Object(source), true).forEach(function (key) {
	        _defineProperty$x(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$n(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _extends$n() {
	  _extends$n = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$n.apply(this, arguments);
	}

	function _defineProperty$x(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectWithoutProperties$q(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$r(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$r(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$1s = settings_1.prefix;
	/**
	 * HeaderGlobalAction is used as a part of the `HeaderGlobalBar`. It is
	 * essentially an Icon Button with an additional state to indicate whether it is
	 * "active". The active state comes from when a user clicks on the global action
	 * which should trigger a panel to appear.
	 *
	 * Note: children passed to this component should be an Icon.
	 */

	var HeaderGlobalAction = /*#__PURE__*/React__default.forwardRef(function HeaderGlobalAction(_ref, ref) {
	  var _cx;

	  var ariaLabel = _ref['aria-label'],
	      ariaLabelledBy = _ref['aria-labelledby'],
	      children = _ref.children,
	      customClassName = _ref.className,
	      onClick = _ref.onClick,
	      isActive = _ref.isActive,
	      rest = _objectWithoutProperties$q(_ref, ["aria-label", "aria-labelledby", "children", "className", "onClick", "isActive"]);

	  var className = cx((_cx = {}, _defineProperty$x(_cx, customClassName, !!customClassName), _defineProperty$x(_cx, "".concat(prefix$1s, "--header__action"), true), _defineProperty$x(_cx, "".concat(prefix$1s, "--header__action--active"), isActive), _cx));
	  var accessibilityLabel = {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy
	  };
	  return /*#__PURE__*/React__default.createElement("button", _extends$n({}, rest, accessibilityLabel, {
	    className: className,
	    onClick: onClick,
	    type: "button",
	    ref: ref
	  }), children);
	});
	HeaderGlobalAction.propTypes = _objectSpread$l(_objectSpread$l({}, AriaLabelPropType), {}, {
	  /**
	   * Provide a custom icon for this global action
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Optionally provide a custom class name that is applied to the underlying
	   * button
	   */
	  className: PropTypes.string,

	  /**
	   * Optionally provide an onClick handler that is called when the underlying
	   * button fires it's onclick event
	   */
	  onClick: PropTypes.func,

	  /**
	   * Specify whether the action is currently active
	   */
	  isActive: PropTypes.bool
	});
	HeaderGlobalAction.displayName = 'HeaderGlobalAction';

	var stablePrefix$R = settings$1.stablePrefix;
	/**
	 * Renders the input bar with the search icon.
	 */

	var MastheadSearchInput = function MastheadSearchInput(_ref) {
	  var componentInputProps = _ref.componentInputProps,
	      dispatch = _ref.dispatch,
	      isActive = _ref.isActive;
	  var searchRef = React.useRef();
	  /**
	   * Clear search and clear input when called
	   */

	  var resetSearch = React.useCallback(function () {
	    dispatch({
	      type: 'setSearchClosed'
	    });
	    dispatch({
	      type: 'setVal',
	      payload: {
	        val: ''
	      }
	    });
	  }, [dispatch]);
	  React.useEffect(function () {
	    if (isActive) {
	      searchRef.current && searchRef.current.focus();
	    } else resetSearch();
	  }, [isActive, resetSearch]);
	  return React__default.createElement(React__default.Fragment, null, React__default.createElement("input", _extends_1({}, componentInputProps, {
	    "data-autoid": "".concat(stablePrefix$R, "--header__search--input"),
	    ref: searchRef,
	    name: "q",
	    tabIndex: isActive ? null : '-1'
	  })));
	};

	MastheadSearchInput.propTypes = {
	  /**
	   * The input props.
	   */
	  componentInputProps: PropTypes.object,

	  /**
	   * The Redux action dispatcher to control `<MastheadSearch>`.
	   */
	  dispatch: PropTypes.func,

	  /**
	   * `true` to make the search active.
	   */
	  isActive: PropTypes.bool,

	  /**
	   * Executes when the search icon is clicked.
	   */
	  searchIconClick: PropTypes.func
	};
	MastheadSearchInput.defaultProps = {
	  componentInputProps: {},
	  dispatch: function dispatch() {},
	  searchIconClick: function searchIconClick() {}
	};

	var diacritics = createCommonjsModule(function (module) {
	  // Diacritics.js
	  // 
	  // Started as something to be an equivalent of the Google Java Library diacritics library for JavaScript.
	  // Found this: http://jsperf.com/diacritics/6 and converted it into a reusable module.
	  // 
	  // @author Nijiko Yonskai
	  // @license MIT
	  // @copyright Nijikokun 2013 <nijikokun@gmail.com>
	  (function (name, definition) {
	    if ( module.exports) module.exports = definition();else this[name] = definition();
	  })('Diacritics', function () {
	    // Create public object
	    var output = {
	      map: {}
	    }; // Create private reference map.

	    var reference = [{
	      'base': ' ',
	      'letters': "\xA0"
	    }, {
	      'base': 'A',
	      'letters': "A\u24B6\uFF21\xC0\xC1\xC2\u1EA6\u1EA4\u1EAA\u1EA8\xC3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\xC4\u01DE\u1EA2\xC5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
	    }, {
	      'base': 'AA',
	      'letters': "\uA732"
	    }, {
	      'base': 'AE',
	      'letters': "\xC6\u01FC\u01E2"
	    }, {
	      'base': 'AO',
	      'letters': "\uA734"
	    }, {
	      'base': 'AU',
	      'letters': "\uA736"
	    }, {
	      'base': 'AV',
	      'letters': "\uA738\uA73A"
	    }, {
	      'base': 'AY',
	      'letters': "\uA73C"
	    }, {
	      'base': 'B',
	      'letters': "B\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181"
	    }, {
	      'base': 'C',
	      'letters': "C\u24B8\uFF23\u0106\u0108\u010A\u010C\xC7\u1E08\u0187\u023B\uA73E"
	    }, {
	      'base': 'D',
	      'letters': "D\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779"
	    }, {
	      'base': 'DZ',
	      'letters': "\u01F1\u01C4"
	    }, {
	      'base': 'Dz',
	      'letters': "\u01F2\u01C5"
	    }, {
	      'base': 'E',
	      'letters': "E\u24BA\uFF25\xC8\xC9\xCA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\xCB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E"
	    }, {
	      'base': 'F',
	      'letters': "F\u24BB\uFF26\u1E1E\u0191\uA77B"
	    }, {
	      'base': 'G',
	      'letters': "G\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E"
	    }, {
	      'base': 'H',
	      'letters': "H\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
	    }, {
	      'base': 'I',
	      'letters': "I\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
	    }, {
	      'base': 'J',
	      'letters': "J\u24BF\uFF2A\u0134\u0248"
	    }, {
	      'base': 'K',
	      'letters': "K\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
	    }, {
	      'base': 'L',
	      'letters': "L\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
	    }, {
	      'base': 'LJ',
	      'letters': "\u01C7"
	    }, {
	      'base': 'Lj',
	      'letters': "\u01C8"
	    }, {
	      'base': 'M',
	      'letters': "M\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C"
	    }, {
	      'base': 'N',
	      'letters': "N\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4"
	    }, {
	      'base': 'NJ',
	      'letters': "\u01CA"
	    }, {
	      'base': 'Nj',
	      'letters': "\u01CB"
	    }, {
	      'base': 'O',
	      'letters': "O\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C"
	    }, {
	      'base': 'OI',
	      'letters': "\u01A2"
	    }, {
	      'base': 'OO',
	      'letters': "\uA74E"
	    }, {
	      'base': 'OU',
	      'letters': "\u0222"
	    }, {
	      'base': 'P',
	      'letters': "P\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
	    }, {
	      'base': 'Q',
	      'letters': "Q\u24C6\uFF31\uA756\uA758\u024A"
	    }, {
	      'base': 'R',
	      'letters': "R\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
	    }, {
	      'base': 'S',
	      'letters': "S\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
	    }, {
	      'base': 'T',
	      'letters': "T\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
	    }, {
	      'base': 'Th',
	      'letters': "\xDE"
	    }, {
	      'base': 'TZ',
	      'letters': "\uA728"
	    }, {
	      'base': 'U',
	      'letters': "U\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
	    }, {
	      'base': 'V',
	      'letters': "V\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245"
	    }, {
	      'base': 'VY',
	      'letters': "\uA760"
	    }, {
	      'base': 'W',
	      'letters': "W\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
	    }, {
	      'base': 'X',
	      'letters': "X\u24CD\uFF38\u1E8A\u1E8C"
	    }, {
	      'base': 'Y',
	      'letters': "Y\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
	    }, {
	      'base': 'Z',
	      'letters': "Z\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
	    }, {
	      'base': 'a',
	      'letters': "a\u24D0\uFF41\u1E9A\xE0\xE1\xE2\u1EA7\u1EA5\u1EAB\u1EA9\xE3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\xE4\u01DF\u1EA3\xE5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250\u0251"
	    }, {
	      'base': 'aa',
	      'letters': "\uA733"
	    }, {
	      'base': 'ae',
	      'letters': "\xE6\u01FD\u01E3"
	    }, {
	      'base': 'ao',
	      'letters': "\uA735"
	    }, {
	      'base': 'au',
	      'letters': "\uA737"
	    }, {
	      'base': 'av',
	      'letters': "\uA739\uA73B"
	    }, {
	      'base': 'ay',
	      'letters': "\uA73D"
	    }, {
	      'base': 'b',
	      'letters': "b\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253"
	    }, {
	      'base': 'c',
	      'letters': "c\u24D2\uFF43\u0107\u0109\u010B\u010D\xE7\u1E09\u0188\u023C\uA73F\u2184"
	    }, {
	      'base': 'd',
	      'letters': "d\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A"
	    }, {
	      'base': 'dz',
	      'letters': "\u01F3\u01C6"
	    }, {
	      'base': 'e',
	      'letters': "e\u24D4\uFF45\xE8\xE9\xEA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\xEB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD"
	    }, {
	      'base': 'f',
	      'letters': "f\u24D5\uFF46\u1E1F\u0192\uA77C"
	    }, {
	      'base': 'ff',
	      'letters': "\uFB00"
	    }, {
	      'base': 'fi',
	      'letters': "\uFB01"
	    }, {
	      'base': 'fl',
	      'letters': "\uFB02"
	    }, {
	      'base': 'ffi',
	      'letters': "\uFB03"
	    }, {
	      'base': 'ffl',
	      'letters': "\uFB04"
	    }, {
	      'base': 'g',
	      'letters': "g\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F"
	    }, {
	      'base': 'h',
	      'letters': "h\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
	    }, {
	      'base': 'hv',
	      'letters': "\u0195"
	    }, {
	      'base': 'i',
	      'letters': "i\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
	    }, {
	      'base': 'j',
	      'letters': "j\u24D9\uFF4A\u0135\u01F0\u0249"
	    }, {
	      'base': 'k',
	      'letters': "k\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
	    }, {
	      'base': 'l',
	      'letters': "l\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747"
	    }, {
	      'base': 'lj',
	      'letters': "\u01C9"
	    }, {
	      'base': 'm',
	      'letters': "m\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F"
	    }, {
	      'base': 'n',
	      'letters': "n\xF1n\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5\u043B\u0509"
	    }, {
	      'base': 'nj',
	      'letters': "\u01CC"
	    }, {
	      'base': 'o',
	      'letters': "\u07C0o\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\u0254\uA74B\uA74D\u0275"
	    }, {
	      'base': 'oe',
	      'letters': "\u0152\u0153"
	    }, {
	      'base': 'oi',
	      'letters': "\u01A3"
	    }, {
	      'base': 'ou',
	      'letters': "\u0223"
	    }, {
	      'base': 'oo',
	      'letters': "\uA74F"
	    }, {
	      'base': 'p',
	      'letters': "p\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755"
	    }, {
	      'base': 'q',
	      'letters': "q\u24E0\uFF51\u024B\uA757\uA759"
	    }, {
	      'base': 'r',
	      'letters': "r\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
	    }, {
	      'base': 's',
	      'letters': "s\u24E2\uFF53\xDF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B"
	    }, {
	      'base': 'ss',
	      'letters': '\xDF'
	    }, {
	      'base': 't',
	      'letters': "t\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
	    }, {
	      'base': 'th',
	      'letters': "\xFE"
	    }, {
	      'base': 'tz',
	      'letters': "\uA729"
	    }, {
	      'base': 'u',
	      'letters': "u\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
	    }, {
	      'base': 'v',
	      'letters': "v\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C"
	    }, {
	      'base': 'vy',
	      'letters': "\uA761"
	    }, {
	      'base': 'w',
	      'letters': "w\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
	    }, {
	      'base': 'x',
	      'letters': "x\u24E7\uFF58\u1E8B\u1E8D"
	    }, {
	      'base': 'y',
	      'letters': "y\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
	    }, {
	      'base': 'z',
	      'letters': "z\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
	    }]; // Generate reference mapping

	    for (var i = 0, refLength = reference.length; i < refLength; i++) {
	      var letters = reference[i].letters.split("");

	      for (var j = 0, letLength = letters.length; j < letLength; j++) {
	        output.map[letters[j]] = reference[i].base;
	      }
	    }
	    /**
	     * Clean accents (diacritics) from string.
	     * 
	     * @param  {String} input String to be cleaned of diacritics.
	     * @return {String}
	     */


	    output.clean = function (input) {
	      if (!input || !input.length || input.length < 1) {
	        return "";
	      }

	      var string = "";
	      var letters = input.split("");
	      var index = 0;
	      var length = letters.length;
	      var letter;

	      for (; index < length; index++) {
	        letter = letters[index];
	        string += letter in output.map ? output.map[letter] : letter;
	      }

	      return string;
	    };

	    return output;
	  });
	});

	var removeDiacritics = diacritics.clean; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters

	var specialCharsRegex = /[.*+?^${}()|[\]\\]/g; // http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6

	var wordCharacterRegex = /[a-z0-9_]/i;
	var whitespacesRegex = /\s+/;

	function escapeRegexCharacters(str) {
	  return str.replace(specialCharsRegex, '\\$&');
	}

	var match$1 = function match(text, query) {
	  text = removeDiacritics(text);
	  query = removeDiacritics(query);
	  return query.trim().split(whitespacesRegex) // If query is blank, we'll get empty string here, so let's filter it out.
	  .filter(function (word) {
	    return word.length > 0;
	  }).reduce(function (result, word) {
	    var wordLen = word.length;
	    var prefix = wordCharacterRegex.test(word[0]) ? '\\b' : '';
	    var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');
	    var index = text.search(regex);

	    if (index > -1) {
	      result.push([index, index + wordLen]); // Replace what we just found with spaces so we don't find it again.

	      text = text.slice(0, index) + new Array(wordLen + 1).join(' ') + text.slice(index + wordLen);
	    }

	    return result;
	  }, []).sort(function (match1, match2) {
	    return match1[0] - match2[0];
	  });
	};

	var parse = function parse(text, matches) {
	  var result = [];

	  if (matches.length === 0) {
	    result.push({
	      text: text,
	      highlight: false
	    });
	  } else {
	    if (matches[0][0] > 0) {
	      result.push({
	        text: text.slice(0, matches[0][0]),
	        highlight: false
	      });
	    }
	  }

	  matches.forEach(function (match, i) {
	    var startIndex = match[0];
	    var endIndex = match[1];
	    result.push({
	      text: text.slice(startIndex, endIndex),
	      highlight: true
	    });

	    if (i === matches.length - 1) {
	      if (endIndex < text.length) {
	        result.push({
	          text: text.slice(endIndex, text.length),
	          highlight: false
	        });
	      }
	    } else if (endIndex < matches[i + 1][0]) {
	      result.push({
	        text: text.slice(endIndex, matches[i + 1][0]),
	        highlight: false
	      });
	    }
	  });
	  return result;
	};

	var stablePrefix$S = settings$1.stablePrefix;
	var prefix$1t = settings_1.prefix;
	/**
	 * The rendered suggestion in the suggestion list.
	 */

	var MastheadSearchSuggestion = function MastheadSearchSuggestion(_ref) {
	  var suggestion = _ref.suggestion,
	      query = _ref.query,
	      isHighlighted = _ref.isHighlighted,
	      getSuggestionValue = _ref.getSuggestionValue;
	  var suggestionValue = getSuggestionValue(suggestion);
	  var matches = match$1(suggestionValue, query);
	  var parts = parse(suggestionValue, matches);
	  return React__default.createElement("div", {
	    className: cx("".concat(prefix$1t, "--container-class"), defineProperty({}, "".concat(prefix$1t, "--container-highlight-class"), isHighlighted)),
	    tabIndex: "-1",
	    "data-autoid": "".concat(stablePrefix$S, "--masthead__searchresults--suggestion")
	  }, parts.map(function (part, index) {
	    return React__default.createElement("span", {
	      key: index,
	      style: {
	        fontWeight: part.highlight ? 600 : 400 // TODO: switch to final styles

	      }
	    }, part.text.replace(' ', "\xA0"));
	  }));
	};

	MastheadSearchSuggestion.propTypes = {
	  /**
	   * The individual object from the data.
	   */
	  suggestion: PropTypes.arrayOf(PropTypes.string),

	  /**
	   * The query being searched for.
	   */
	  query: PropTypes.string,

	  /**
	   * `true` to make the suggestion currently highlighted by the user.
	   */
	  isHighlighted: PropTypes.bool,

	  /**
	   * A funciton ot get the suggestion value.
	   */
	  getSuggestionValue: PropTypes.func
	};
	MastheadSearchSuggestion.defaultProps = {
	  suggestion: [],
	  query: '',
	  isHighlighted: false,
	  getSuggestionValue: function getSuggestionValue() {}
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$n =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M30,28.59,22.45,21A11,11,0,1,0,21,22.45L28.59,30ZM5,14a9,9,0,1,1,9,9A9,9,0,0,1,5,14Z"
	});

	var Search20 = /*#__PURE__*/React__default.forwardRef(function Search20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$n, children);
	});

	/**
	 * @constant {string | string} Host for the API calls
	 * @private
	 */

	var _host$2 = process && process.env.SEARCH_TYPEAHEAD_HOST || 'https://www-api.ibm.com';
	/**
	 * @constant {string | string} API version
	 * @private
	 */


	var _version = process && process.env.SEARCH_TYPEAHEAD_VERSION || 'v1';
	/**
	 * SearchTypeahead endpoint
	 *
	 * @type {string}
	 * @private
	 */


	var _endpoint$3 = "".concat(_host$2, "/search/typeahead/").concat(_version);
	/**
	 * SearchTypeahead API class with methods of fetching search results for
	 * ibm.com
	 */


	var SearchTypeaheadAPI = /*#__PURE__*/function () {
	  function SearchTypeaheadAPI() {
	    classCallCheck(this, SearchTypeaheadAPI);
	  }

	  createClass(SearchTypeaheadAPI, null, [{
	    key: "getResults",

	    /**
	     * Gets search results
	     *
	     * @param {string} query Query string to pass to the service
	     * @returns {Promise<any>} Response data from ibm search
	     * @example
	     * import { SearchTypeaheadAPI } from '@carbon/ibmdotcom-services';
	     *
	     * async function getResults(query) {
	     *   const response = await SearchTypeaheadAPI.getResults(query);
	     *   return response;
	     * }
	     */
	    value: function () {
	      var _getResults = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(query) {
	        var lang, urlQuery, url;
	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return LocaleAPI.getLang();

	              case 2:
	                lang = _context.sent;
	                urlQuery = ["lang=".concat(lang.lc), "cc=".concat(lang.cc), "query=".concat(encodeURIComponent(query))].join('&');
	                url = "".concat(_endpoint$3, "?").concat(urlQuery);
	                _context.next = 7;
	                return axios$1.get(url, {
	                  headers: {
	                    'Content-Type': 'application/json; charset=utf-8'
	                  }
	                }).then(function (response) {
	                  return response.data.response;
	                });

	              case 7:
	                return _context.abrupt("return", _context.sent);

	              case 8:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));

	      function getResults(_x) {
	        return _getResults.apply(this, arguments);
	      }

	      return getResults;
	    }()
	  }]);

	  return SearchTypeaheadAPI;
	}();

	var stablePrefix$T = settings$1.stablePrefix;
	var prefix$1u = settings_1.prefix;
	/**
	 * Sets up the redirect URL when a user selects a search suggestion
	 *
	 * @type {string}
	 * @private
	 */

	var _redirectUrl = process.env.SEARCH_REDIRECT_ENDPOINT || "https://www.ibm.com/search?lnk=mhsrch";
	/**
	 * Converts the string to lower case and trims extra white space
	 *
	 * @param {string} valueString The text field
	 * @returns {string} lower cased and trimmed text
	 */


	var _trimAndLower = function _trimAndLower(valueString) {
	  return valueString.toLowerCase().trim();
	};
	/**
	 * When a suggestion item is clicked, we populate the input with its name field
	 *
	 * @param {object} suggestion The individual object from the data
	 * @returns {*} The name val
	 */


	var _getSuggestionValue = function _getSuggestionValue(suggestion) {
	  return suggestion[0];
	};
	/**
	 * Reducer for the useReducer hook
	 *
	 * @param {object} state The state
	 * @param {object} action contains the type and payload
	 * @returns {*} the new state value
	 * @private
	 */


	function _reducer(state, action) {
	  switch (action.type) {
	    case 'setVal':
	      return Object.assign({}, state, {
	        val: action.payload.val
	      });

	    case 'emptySuggestions':
	      return Object.assign({}, state, {
	        suggestions: []
	      });

	    case 'setPrevSuggestions':
	      return Object.assign({}, state, {
	        prevSuggestions: action.payload.prevSuggestions
	      });

	    case 'setSuggestionsToPrevious':
	      return Object.assign({}, state, {
	        suggestions: state.prevSuggestions
	      });

	    case 'showSuggestionsContainer':
	      return Object.assign({}, state, {
	        suggestionContainerVisible: true
	      });

	    case 'hideSuggestionsContainer':
	      return Object.assign({}, state, {
	        suggestionContainerVisible: false
	      });

	    case 'setSearchOpen':
	      return Object.assign({}, state, {
	        isSearchOpen: true
	      });

	    case 'setSearchClosed':
	      return Object.assign({}, state, {
	        isSearchOpen: false
	      });

	    case 'setLc':
	      return Object.assign({}, state, {
	        lc: action.payload.lc
	      });

	    case 'setCc':
	      return Object.assign({}, state, {
	        cc: action.payload.cc
	      });

	    default:
	      return state;
	  }
	}
	/**
	 * MastheadSearch component which includes autosuggestion results from the
	 * SearchTypeaheadAPI.
	 *
	 * The search field utilizes "react-autosuggest". Documentation available here:
	 * http://react-autosuggest.js.org/
	 * https://github.com/moroshko/react-autosuggest
	 */


	var MastheadSearch = function MastheadSearch(_ref) {
	  var _cx;

	  var placeHolderText = _ref.placeHolderText,
	      renderValue = _ref.renderValue,
	      searchOpenOnload = _ref.searchOpenOnload,
	      navType = _ref.navType;

	  var _useSearchVisible = useSearchVisible(),
	      ref = _useSearchVisible.ref;
	  /**
	   * Initial state of the autocomplete component
	   *
	   * @type {{val: string, prevSuggestions: Array, suggestions: Array, suggestionContainerVisible: boolean}}
	   * @private
	   */


	  var _initialState = {
	    val: '',
	    suggestions: [],
	    prevSuggestions: [],
	    suggestionContainerVisible: false,
	    isSearchOpen: searchOpenOnload,
	    lc: 'en',
	    cc: 'us'
	  };

	  var _useReducer = React.useReducer(_reducer, _initialState),
	      _useReducer2 = slicedToArray(_useReducer, 2),
	      state = _useReducer2[0],
	      dispatch = _useReducer2[1];

	  React.useEffect(function () {
	    var abortController = typeof AbortController !== 'undefined' ? new AbortController() : {
	      signal: {},
	      abort: function abort() {
	        this.signal.aborted = true;
	      }
	    };
	    abortController.abort();

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var response;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return LocaleAPI.getLang();

	            case 2:
	              response = _context.sent;

	              if (!abortController.signal.aborted && response) {
	                dispatch({
	                  type: 'setLc',
	                  payload: {
	                    lc: response.lc
	                  }
	                });
	                dispatch({
	                  type: 'setCc',
	                  payload: {
	                    cc: response.cc
	                  }
	                });
	              }

	            case 4:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))();

	    return function () {
	      abortController.abort();
	    };
	  }, []);
	  /**
	   * Event handlers to toggle visiblity of search
	   *
	   * @returns {*} search ref
	   */

	  function useSearchVisible() {
	    var ref = React.useRef(null);
	    /**
	     * Close search entirely if autosuggestions collapsed
	     *
	     * @param {*} event Escape keypress
	     */

	    var handleHideSearch = function handleHideSearch(event) {
	      if (event.key === 'Escape') {
	        if (!state.suggestionContainerVisible) {
	          dispatch({
	            type: 'setSearchClosed'
	          });
	        }
	      }
	    };
	    /**
	     * Close search when click detected outside of component.
	     * This is necessary otherwise search stays open even when
	     * elements other than the close button are clicked.
	     *
	     * @param {*} event Click event outside search component
	     */


	    var handleClickOutside = function handleClickOutside(event) {
	      if (ref.current && !ref.current.contains(event.target)) {
	        dispatch({
	          type: 'setSearchClosed'
	        });
	      }
	    };

	    React.useEffect(function () {
	      lib.document.addEventListener('keydown', handleHideSearch, true);
	      lib.document.addEventListener('click', handleClickOutside, true);
	      return function () {
	        lib.document.removeEventListener('keydown', handleHideSearch, true);
	        lib.document.removeEventListener('click', handleClickOutside, true);
	      };
	    });
	    return {
	      ref: ref
	    };
	  }

	  var className = cx((_cx = {}, defineProperty(_cx, "".concat(prefix$1u, "--masthead__search"), true), defineProperty(_cx, "".concat(prefix$1u, "--masthead__search--active"), state.isSearchOpen), _cx));
	  /**
	   * When the input field changes, we set the new val to our state
	   *
	   * @param {event} event The callback event
	   * @param {string} newValue The new val of the input
	   */

	  function onChange(event, _ref3) {
	    var newValue = _ref3.newValue;
	    dispatch({
	      type: 'setVal',
	      payload: {
	        val: newValue
	      }
	    });
	  }
	  /**
	   * Autosuggest will pass through all these props to the input.
	   *
	   * @type {{placeholder: string, value: string, onChange: Function, className: string}}
	   */


	  var inputProps = {
	    placeholder: placeHolderText,
	    value: state.val,
	    onChange: onChange,
	    className: "".concat(prefix$1u, "--header__search--input")
	  };
	  /**
	   * Executes the logic for the search icon depending on search input state.
	   * This will execute the search if the search is open, or will open the
	   * search field if closed.
	   *
	   */

	  function searchIconClick() {
	    if (state.isSearchOpen) {
	      lib.parent.location.href = getRedirect(state.val);
	    } else {
	      dispatch({
	        type: 'setSearchOpen'
	      });
	    }
	  }
	  /**
	   * Clear search and clear input when called
	   */


	  var resetSearch = React.useCallback(function () {
	    dispatch({
	      type: 'setSearchClosed'
	    });
	    dispatch({
	      type: 'setVal',
	      payload: {
	        val: ''
	      }
	    });
	  }, [dispatch]);
	  /**
	   * closeBtnAction resets and sets focus after search is closed
	   */

	  function closeBtnAction() {
	    resetSearch();
	    var searchIconRef = lib.document.querySelectorAll("[data-autoid=\"".concat(stablePrefix$T, "--masthead-").concat(navType, "__l0-search\"]"));
	    searchIconRef && searchIconRef[0].focus();
	  }
	  /**
	   * Renders the input bar with the search icon
	   *
	   * @param {object} componentInputProps contains the input props
	   * @returns {*} The rendered component
	   */


	  function renderInputComponent(componentInputProps) {
	    return React__default.createElement(MastheadSearchInput, {
	      componentInputProps: componentInputProps,
	      dispatch: dispatch,
	      isActive: state.isSearchOpen,
	      searchIconClick: searchIconClick
	    });
	  }
	  /**
	   * Returns the action/redirect value
	   *
	   * @param {string} value string value from the input or suggestions list
	   * @returns {string} final redirect string
	   */


	  function getRedirect(value) {
	    return "".concat(_redirectUrl, "&q=").concat(encodeURIComponent(value), "&lang=").concat(state.lc, "&cc=").concat(state.cc);
	  }
	  /**
	   * Renders the Suggestion Value with the function for the adding the suggestion
	   *
	   * @param {object} suggestion The suggestion to render
	   * @param {object} properties The property object of the incoming suggestion
	   * @param {string} properties.query The query being searched for
	   * @param {boolean} properties.isHighlighted Whether the suggestion is currently highlighted by the user
	   * @returns {*} The suggestion value
	   */


	  function renderSuggestion(suggestion, _ref4) {
	    var query = _ref4.query,
	        isHighlighted = _ref4.isHighlighted;
	    return React__default.createElement(MastheadSearchSuggestion, {
	      suggestion: suggestion,
	      query: query,
	      isHighlighted: isHighlighted,
	      getSuggestionValue: _getSuggestionValue
	    });
	  }
	  /**
	   * This function is called everytime we need new suggestions. If input has
	   * changed, we fetch for new suggestions else we return the previous
	   * suggestions
	   *
	   * Available reason values:
	   * https://github.com/moroshko/react-autosuggest#onsuggestionsfetchrequested-required
	   *
	   * @param {object} request Object response from when onSuggestionsFetchRequested is called
	   * @param {string} request.value the current value of the input
	   * @param {string} request.reason string describing why onSuggestionsFetchRequested was called
	   */


	  function onSuggestionsFetchRequest(_x) {
	    return _onSuggestionsFetchRequest.apply(this, arguments);
	  }
	  /**
	   * Called every time we clear suggestions
	   */


	  function _onSuggestionsFetchRequest() {
	    _onSuggestionsFetchRequest = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(request) {
	      var searchValue, response;
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              searchValue = _trimAndLower(escapeRegExp(request.value));

	              if (!(request.reason === 'input-changed')) {
	                _context2.next = 8;
	                break;
	              }

	              _context2.next = 4;
	              return SearchTypeaheadAPI.getResults(searchValue);

	            case 4:
	              response = _context2.sent;

	              if (response !== undefined) {
	                dispatch({
	                  type: 'setPrevSuggestions',
	                  payload: {
	                    prevSuggestions: response
	                  }
	                });
	                dispatch({
	                  type: 'setSuggestionsToPrevious'
	                });
	                dispatch({
	                  type: 'showSuggestionsContainer'
	                });
	              }

	              _context2.next = 9;
	              break;

	            case 8:
	              if (request.reason === 'escape-pressed') {
	                onSuggestionsClearedRequested();
	              } else {
	                dispatch({
	                  type: 'setSuggestionsToPrevious'
	                });
	                dispatch({
	                  type: 'showSuggestionsContainer'
	                });
	              }

	            case 9:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));
	    return _onSuggestionsFetchRequest.apply(this, arguments);
	  }

	  function onSuggestionsClearedRequested() {
	    dispatch({
	      type: 'emptySuggestions'
	    });
	    dispatch({
	      type: 'hideSuggestionsContainer'
	    });
	  }
	  /**
	   * Sends the user to the search results page when a suggestion is selected
	   *
	   * @param {object} event The event object
	   * @param {object} params Param object coming from react-autosuggest
	   * @param {string} params.suggestionValue Suggestion value
	   */


	  function onSuggestionSelected(event, _ref5) {
	    var suggestionValue = _ref5.suggestionValue;
	    lib.parent.location.href = getRedirect(suggestionValue);
	  }
	  /**
	   * Only render suggestions if we have more than the renderValue
	   *
	   * @param {string} value Name of the suggestion
	   * @returns {boolean} Whether or not to display the value
	   */


	  function shouldRenderSuggestions(value) {
	    return value.trim().length >= renderValue;
	  }

	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$T, "--masthead__search"),
	    className: className,
	    ref: ref
	  }, state.isSearchOpen && React__default.createElement("form", {
	    id: "".concat(prefix$1u, "--masthead__search--form"),
	    action: _redirectUrl,
	    method: "get"
	  }, React__default.createElement("input", {
	    type: "hidden",
	    name: "lang",
	    value: state.lc
	  }), React__default.createElement("input", {
	    type: "hidden",
	    name: "cc",
	    value: state.cc
	  }), React__default.createElement("input", {
	    type: "hidden",
	    name: "lnk",
	    value: "mhsrch"
	  }), React__default.createElement(dist$3, {
	    suggestions: state.suggestions // The state value of suggestion
	    ,
	    onSuggestionsFetchRequested: onSuggestionsFetchRequest // Method to fetch data (should be async call)
	    ,
	    onSuggestionsClearRequested: onSuggestionsClearedRequested // When input bar loses focus
	    ,
	    getSuggestionValue: _getSuggestionValue // Name of suggestion
	    ,
	    renderSuggestion: renderSuggestion // How to display a suggestion
	    ,
	    onSuggestionSelected: onSuggestionSelected // When a suggestion is selected
	    ,
	    highlightFirstSuggestion: true // First suggestion is highlighted by default
	    ,
	    inputProps: inputProps,
	    renderInputComponent: renderInputComponent,
	    shouldRenderSuggestions: shouldRenderSuggestions
	  })), React__default.createElement("div", {
	    className: "".concat(prefix$1u, "--header__search--actions")
	  }, React__default.createElement(HeaderGlobalAction, {
	    onClick: searchIconClick,
	    "aria-label": state.isSearchOpen ? 'Search all of IBM' : 'Open IBM search field',
	    className: "".concat(prefix$1u, "--header__search--search"),
	    "data-autoid": "".concat(stablePrefix$T, "--masthead-").concat(navType, "__l0-search"),
	    tabIndex: "0"
	  }, React__default.createElement(Search20, null)), React__default.createElement(HeaderGlobalAction, {
	    onClick: closeBtnAction,
	    "aria-label": "Close",
	    className: "".concat(prefix$1u, "--header__search--close"),
	    "data-autoid": "".concat(stablePrefix$T, "--masthead-").concat(navType, "__l0-search--close")
	  }, React__default.createElement(Close20, null))));
	};

	MastheadSearch.propTypes = {
	  /**
	   * Placeholder text for the search field.
	   */
	  placeHolderText: PropTypes.string,

	  /**
	   * Number of characters to begin showing suggestions.
	   */
	  renderValue: PropTypes.number,

	  /**
	   * `true` to make the search field open in the initial state.
	   */
	  searchOpenOnload: PropTypes.bool,

	  /**
	   * navigation type for autoids
	   */
	  navType: PropTypes.oneOf(['default, alt, eco'])
	};
	MastheadSearch.defaultProps = {
	  placeHolderText: 'Search all of IBM',
	  renderValue: 3,
	  searchOpenOnload: false
	}; // Export the react component

	function ownKeys$o(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$m(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$o(Object(source), true).forEach(function (key) {
	        _defineProperty$y(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$o(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _defineProperty$y(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends$o() {
	  _extends$o = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$o.apply(this, arguments);
	}

	function _objectWithoutProperties$r(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$s(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$s(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var selectorPrefix = settings_1.prefix;

	var HeaderName = function HeaderName(_ref) {
	  var children = _ref.children,
	      customClassName = _ref.className,
	      prefix = _ref.prefix,
	      href = _ref.href,
	      rest = _objectWithoutProperties$r(_ref, ["children", "className", "prefix", "href"]);

	  var className = cx("".concat(selectorPrefix, "--header__name"), customClassName);
	  return /*#__PURE__*/React__default.createElement(Link$1, _extends$o({}, rest, {
	    className: className,
	    href: href
	  }), prefix && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
	    className: "".concat(selectorPrefix, "--header__name--prefix")
	  }, prefix), "\xA0"), children);
	};

	HeaderName.propTypes = _objectSpread$m(_objectSpread$m({}, LinkPropTypes), {}, {
	  /**
	   * Pass in children that are either a string or can be read as a string by
	   * screen readers
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Optionally provide a custom class to apply to the underlying <li> node
	   */
	  className: PropTypes.string,

	  /**
	   * Optionally specify a prefix to your header name. Useful for companies, for
	   * example: IBM [Product Name] versus solely [Product Name]
	   */
	  prefix: PropTypes.string,

	  /**
	   * Provide an href for the name to link to
	   */
	  href: PropTypes.string
	});
	HeaderName.defaultProps = {
	  prefix: 'IBM'
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$o =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M9.3 3.7L13.1 7.5 1 7.5 1 8.5 13.1 8.5 9.3 12.3 10 13 15 8 10 3z"
	});

	var ArrowRight16 = /*#__PURE__*/React__default.forwardRef(function ArrowRight16(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 16,
	    height: 16,
	    viewBox: "0 0 16 16",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$o, children);
	});

	var prefix$1v = settings_1.prefix;
	/**
	 * Category Group of the MegaMenu
	 * contains the category headline and sublinks
	 */

	var CategoryGroup = function CategoryGroup(_ref) {
	  var href = _ref.href,
	      title = _ref.title,
	      children = _ref.children,
	      rest = objectWithoutProperties(_ref, ["href", "title", "children"]);

	  return React__default.createElement("div", {
	    className: "".concat(prefix$1v, "--masthead__megamenu__category-group")
	  }, href ? React__default.createElement(LinkWithIcon, {
	    href: href,
	    className: "".concat(prefix$1v, "--masthead__megamenu__category-headline"),
	    "data-autoid": "".concat(rest.autoid, "-list").concat(rest.index)
	  }, React__default.createElement("span", null, title), React__default.createElement(ArrowRight16, null)) : React__default.createElement("div", {
	    className: "".concat(prefix$1v, "--masthead__megamenu__category-headline"),
	    "data-autoid": "".concat(rest.autoid, "-list").concat(rest.index)
	  }, React__default.createElement("p", null, title)), children);
	};

	CategoryGroup.propTypes = {
	  /**
	   * Category Groups sublinks
	   */
	  children: PropTypes.node,

	  /**
	   * url of the Category Group headline
	   */
	  href: PropTypes.string,

	  /**
	   * Category Group headline title
	   */
	  title: PropTypes.string.isRequired
	};

	var prefix$1w = settings_1.prefix;
	/**
	 * Category sublink
	 */

	var CategoryLink = function CategoryLink(_ref) {
	  var href = _ref.href,
	      title = _ref.title,
	      rest = objectWithoutProperties(_ref, ["href", "title"]);

	  return React__default.createElement("a", {
	    tabIndex: 0,
	    href: href,
	    className: "".concat(prefix$1w, "--masthead__megamenu__category-sublink"),
	    "data-autoid": "".concat(rest.autoid, "-item").concat(rest.index)
	  }, title);
	};

	CategoryLink.propTypes = {
	  /**
	   * Category sublink href
	   */
	  href: PropTypes.string.isRequired,

	  /**
	   * Category sublink text
	   */
	  title: PropTypes.string.isRequired
	};

	var prefix$1x = settings_1.prefix;
	/**
	 * Left Navigation Section of MegaMenu
	 */

	var LeftNavigation = function LeftNavigation(_ref) {
	  var children = _ref.children,
	      props = objectWithoutProperties(_ref, ["children"]);

	  return React__default.createElement("div", _extends_1({
	    className: "".concat(prefix$1x, "--masthead__megamenu__highlight-section")
	  }, props), children);
	};

	LeftNavigation.propTypes = {
	  /**
	   * Category Groups to be rendered in the Left Navigation Section
	   */
	  children: PropTypes.node.isRequired
	};

	var stablePrefix$U = settings$1.stablePrefix;
	var prefix$1y = settings_1.prefix;
	/**
	 * MegaMenu panel
	 */

	var NavigationGroup = function NavigationGroup(_ref) {
	  var hasHighlights = _ref.hasHighlights,
	      children = _ref.children,
	      rest = objectWithoutProperties(_ref, ["hasHighlights", "children"]);

	  return React__default.createElement("section", _extends_1({
	    tabIndex: -1,
	    className: cx("".concat(prefix$1y, "--masthead__megamenu"), defineProperty({}, "".concat(prefix$1y, "--masthead__megamenu__container--hasHighlights"), hasHighlights)),
	    "data-autoid": "".concat(stablePrefix$U, "--masthead__megamenu")
	  }, rest), React__default.createElement("div", {
	    className: "".concat(prefix$1y, "--masthead__megamenu__container")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1y, "--masthead__megamenu__container--row")
	  }, children)));
	};

	NavigationGroup.propTypes = {
	  /**
	   * Determines whether to render the Highlight Section (Left Navigation)
	   */
	  hasHighlights: PropTypes.bool,

	  /**
	   * children elements
	   */
	  children: PropTypes.node
	};

	var prefix$1z = settings_1.prefix;
	/**
	 * Right/Main Panel Navigation of MegaMenu
	 */

	var RightNavigation = function RightNavigation(_ref) {
	  var children = _ref.children,
	      viewAllLinkHref = _ref.viewAllLinkHref,
	      viewAllLinkTitle = _ref.viewAllLinkTitle,
	      rest = objectWithoutProperties(_ref, ["children", "viewAllLinkHref", "viewAllLinkTitle"]);

	  return React__default.createElement("div", {
	    className: "".concat(prefix$1z, "--masthead__megamenu__categories-section")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1z, "--masthead__megamenu__categories")
	  }, children), viewAllLinkHref && React__default.createElement(LinkWithIcon, {
	    className: "".concat(prefix$1z, "--masthead__megamenu__view-all-cta"),
	    "data-autoid": "".concat(rest.autoid, "-view-all"),
	    href: viewAllLinkHref
	  }, React__default.createElement("span", null, viewAllLinkTitle), React__default.createElement(ArrowRight16, null)));
	};

	RightNavigation.propTypes = {
	  /**
	   * Category Groups to be rendered in the Left Navigation Section
	   */
	  children: PropTypes.node.isRequired,

	  /**
	   * Megamenu view all cta url
	   */
	  viewAllLinkHref: PropTypes.string,

	  /**
	   * Megamenu view all cta title
	   */
	  viewAllLinkTitle: PropTypes.string
	};

	/**
	 * Masthead megamenu component.
	 */

	var MegaMenu = function MegaMenu(_ref) {
	  var _viewAllLink, _viewAllLink2;

	  var data = _ref.data,
	      rest = objectWithoutProperties(_ref, ["data"]);

	  var highlightedItems = [];
	  var viewAllLink;
	  var menuItems = [];
	  data.menuSections[0].menuItems.forEach(function (item) {
	    if (item.highlighted) return highlightedItems.push(item);
	    if (item.megaPanelViewAll) return viewAllLink = item;else return menuItems.push(item);
	  });
	  var hasHighlights = highlightedItems.length !== 0;
	  return React__default.createElement(NavigationGroup, {
	    hasHighlights: hasHighlights
	  }, hasHighlights && React__default.createElement(LeftNavigation, null, highlightedItems.map(function (item, i) {
	    var _item$megapanelConten, _item$megapanelConten2;

	    return React__default.createElement(CategoryGroup, {
	      autoid: rest.autoid,
	      index: i,
	      href: item.url,
	      title: item.title
	    }, (_item$megapanelConten = item.megapanelContent) === null || _item$megapanelConten === void 0 ? void 0 : (_item$megapanelConten2 = _item$megapanelConten.quickLinks) === null || _item$megapanelConten2 === void 0 ? void 0 : _item$megapanelConten2.links.map(function (_ref2, key) {
	      var title = _ref2.title,
	          url = _ref2.url;
	      return React__default.createElement(CategoryLink, {
	        href: url,
	        title: title,
	        autoid: "".concat(rest.autoid, "-list").concat(i),
	        index: key
	      });
	    }));
	  })), React__default.createElement(RightNavigation, {
	    viewAllLinkHref: (_viewAllLink = viewAllLink) === null || _viewAllLink === void 0 ? void 0 : _viewAllLink.url,
	    viewAllLinkTitle: (_viewAllLink2 = viewAllLink) === null || _viewAllLink2 === void 0 ? void 0 : _viewAllLink2.title,
	    autoid: rest.autoid
	  }, menuItems.map(function (item, i) {
	    var _item$megapanelConten3, _item$megapanelConten4;

	    return React__default.createElement(CategoryGroup, {
	      key: i,
	      autoid: rest.autoid,
	      index: i + highlightedItems.length,
	      href: item.url,
	      title: item.title
	    }, (_item$megapanelConten3 = item.megapanelContent) === null || _item$megapanelConten3 === void 0 ? void 0 : (_item$megapanelConten4 = _item$megapanelConten3.quickLinks) === null || _item$megapanelConten4 === void 0 ? void 0 : _item$megapanelConten4.links.map(function (_ref3, key) {
	      var title = _ref3.title,
	          url = _ref3.url;
	      return React__default.createElement(CategoryLink, {
	        key: key,
	        href: url,
	        title: title,
	        autoid: "".concat(rest.autoid, "-list").concat(i + highlightedItems.length),
	        index: key
	      });
	    }));
	  })));
	};

	MegaMenu.propTypes = {
	  /**
	   * Object containing megamenu nav data
	   */
	  data: PropTypes.shape({
	    hasMenupanel: PropTypes.bool,
	    title: PropTypes.string,
	    url: PropTypes.string,
	    menuSections: PropTypes.arrayOf(PropTypes.shape({
	      menuItems: PropTypes.arrayOf(PropTypes.shape({
	        highlighted: PropTypes.bool,
	        title: PropTypes.string,
	        url: PropTypes.string,
	        megapanelContent: PropTypes.shape({
	          quickLinks: PropTypes.shape({
	            links: PropTypes.arrayOf(PropTypes.shape({
	              title: PropTypes.string,
	              url: PropTypes.string
	            }))
	          })
	        })
	      }))
	    }))
	  })
	};

	var stablePrefix$V = settings$1.stablePrefix;
	var prefix$1A = settings_1.prefix;
	/**
	 * Masthead top nav component.
	 */

	var MastheadTopNav = function MastheadTopNav(_ref) {
	  var navigation = _ref.navigation,
	      topNavProps = objectWithoutProperties(_ref, ["navigation"]);

	  var _useState = React.useState(false),
	      _useState2 = slicedToArray(_useState, 2),
	      overlay = _useState2[0],
	      setOverlay = _useState2[1];
	  /**
	   * Top masthead navigation
	   *
	   * @returns {*} Top masthead navigation
	   */


	  var mastheadLinks = navigation.map(function (link, i) {
	    var autoid = "".concat(stablePrefix$V, "--masthead-").concat(topNavProps.navType, "__l0-nav").concat(i);

	    if (link.hasMenu || link.hasMegapanel) {
	      return React__default.createElement(HeaderMenu$1, {
	        "aria-label": link.title,
	        menuLinkName: link.title,
	        className: cx(defineProperty({}, "".concat(prefix$1A, "--masthead__megamenu__l0-nav"), link.hasMegapanel)),
	        autoId: autoid,
	        key: i,
	        setOverlay: setOverlay
	      }, renderNav$1(link, autoid));
	    } else {
	      return React__default.createElement(HeaderMenuItem, {
	        href: link.url,
	        "data-autoid": autoid,
	        key: i
	      }, link.title);
	    }
	  });
	  return React__default.createElement(React__default.Fragment, null, React__default.createElement("div", {
	    className: "".concat(prefix$1A, "--header__nav-container")
	  }, topNavProps.platform && React__default.createElement(HeaderName, {
	    prefix: "",
	    href: topNavProps.platform.url,
	    "data-autoid": "".concat(stablePrefix$V, "--masthead-").concat(topNavProps.navType, "__l0-ecosystemname")
	  }, topNavProps.platform.name), React__default.createElement(HeaderNavigation, {
	    "aria-label": "IBM",
	    "data-autoid": "".concat(stablePrefix$V, "--masthead__l0-nav")
	  }, mastheadLinks)), React__default.createElement("div", {
	    className: cx("".concat(prefix$1A, "--masthead__overlay"), defineProperty({}, "".concat(prefix$1A, "--masthead__overlay-show"), overlay))
	  }));
	};
	/**
	 * Loops through and renders a list of links for the masthead nav
	 *
	 * @param {object} link A list of links to be rendered
	 * @param {string} autoid autoid predecessor for megamenu items/menu items data-autoids
	 * @returns {object} JSX object
	 */


	function renderNav$1(link, autoid) {
	  var navItems = [];

	  if (link.hasMegapanel) {
	    navItems.push(React__default.createElement(MegaMenu, {
	      key: link.title,
	      data: link,
	      autoid: autoid
	    }));
	  } else {
	    link.menuSections.forEach(function (section, i) {
	      section.menuItems.forEach(function (item, j) {
	        navItems.push(React__default.createElement(HeaderMenuItem, {
	          href: item.url,
	          "data-autoid": "".concat(autoid, "--subnav-col").concat(i, "-item").concat(j),
	          key: item.title
	        }, item.title));
	      });
	    });
	  }

	  return navItems;
	}

	MastheadTopNav.propTypes = {
	  /**
	   * Object containing top navigation elements.
	   */
	  navigation: PropTypes.arrayOf(PropTypes.shape({
	    hasMenu: PropTypes.bool,
	    title: PropTypes.string,
	    url: PropTypes.string,
	    menuSections: PropTypes.arrayOf(PropTypes.shape({
	      menuItems: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        url: PropTypes.string
	      }))
	    }))
	  }))
	};

	/**
	 * Helpers.
	 */
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function ms(val, options) {
	  options = options || {};

	  var type = _typeof_1(val);

	  if (type === 'string' && val.length > 0) {
	    return parse$1(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }

	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
	};
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */


	function parse$1(str) {
	  str = String(str);

	  if (str.length > 100) {
	    return;
	  }

	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

	  if (!match) {
	    return;
	  }

	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();

	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;

	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;

	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;

	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;

	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;

	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;

	    default:
	      return undefined;
	  }
	}
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */


	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }

	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }

	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }

	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }

	  return ms + 'ms';
	}
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */


	function fmtLong(ms) {
	  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
	}
	/**
	 * Pluralization helper.
	 */


	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }

	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }

	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	var debug = createCommonjsModule(function (module, exports) {
	  /**
	   * This is the common logic for both the Node.js and web browser
	   * implementations of `debug()`.
	   *
	   * Expose `debug()` as the module.
	   */
	  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	  exports.coerce = coerce;
	  exports.disable = disable;
	  exports.enable = enable;
	  exports.enabled = enabled;
	  exports.humanize = ms;
	  /**
	   * The currently active debug mode names, and names to skip.
	   */

	  exports.names = [];
	  exports.skips = [];
	  /**
	   * Map of special "%n" handling functions, for the debug "format" argument.
	   *
	   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	   */

	  exports.formatters = {};
	  /**
	   * Previous log timestamp.
	   */

	  var prevTime;
	  /**
	   * Select a color.
	   * @param {String} namespace
	   * @return {Number}
	   * @api private
	   */

	  function selectColor(namespace) {
	    var hash = 0,
	        i;

	    for (i in namespace) {
	      hash = (hash << 5) - hash + namespace.charCodeAt(i);
	      hash |= 0; // Convert to 32bit integer
	    }

	    return exports.colors[Math.abs(hash) % exports.colors.length];
	  }
	  /**
	   * Create a debugger with the given `namespace`.
	   *
	   * @param {String} namespace
	   * @return {Function}
	   * @api public
	   */


	  function createDebug(namespace) {
	    function debug() {
	      // disabled?
	      if (!debug.enabled) return;
	      var self = debug; // set `diff` timestamp

	      var curr = +new Date();
	      var ms = curr - (prevTime || curr);
	      self.diff = ms;
	      self.prev = prevTime;
	      self.curr = curr;
	      prevTime = curr; // turn the `arguments` into a proper Array

	      var args = new Array(arguments.length);

	      for (var i = 0; i < args.length; i++) {
	        args[i] = arguments[i];
	      }

	      args[0] = exports.coerce(args[0]);

	      if ('string' !== typeof args[0]) {
	        // anything else let's inspect with %O
	        args.unshift('%O');
	      } // apply any `formatters` transformations


	      var index = 0;
	      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
	        // if we encounter an escaped % then don't increase the array index
	        if (match === '%%') return match;
	        index++;
	        var formatter = exports.formatters[format];

	        if ('function' === typeof formatter) {
	          var val = args[index];
	          match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

	          args.splice(index, 1);
	          index--;
	        }

	        return match;
	      }); // apply env-specific formatting (colors, etc.)

	      exports.formatArgs.call(self, args);
	      var logFn = debug.log || exports.log || console.log.bind(console);
	      logFn.apply(self, args);
	    }

	    debug.namespace = namespace;
	    debug.enabled = exports.enabled(namespace);
	    debug.useColors = exports.useColors();
	    debug.color = selectColor(namespace); // env-specific initialization logic for debug instances

	    if ('function' === typeof exports.init) {
	      exports.init(debug);
	    }

	    return debug;
	  }
	  /**
	   * Enables a debug mode by namespaces. This can include modes
	   * separated by a colon and wildcards.
	   *
	   * @param {String} namespaces
	   * @api public
	   */


	  function enable(namespaces) {
	    exports.save(namespaces);
	    exports.names = [];
	    exports.skips = [];
	    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	    var len = split.length;

	    for (var i = 0; i < len; i++) {
	      if (!split[i]) continue; // ignore empty strings

	      namespaces = split[i].replace(/\*/g, '.*?');

	      if (namespaces[0] === '-') {
	        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	      } else {
	        exports.names.push(new RegExp('^' + namespaces + '$'));
	      }
	    }
	  }
	  /**
	   * Disable debug output.
	   *
	   * @api public
	   */


	  function disable() {
	    exports.enable('');
	  }
	  /**
	   * Returns true if the given mode name is enabled, false otherwise.
	   *
	   * @param {String} name
	   * @return {Boolean}
	   * @api public
	   */


	  function enabled(name) {
	    var i, len;

	    for (i = 0, len = exports.skips.length; i < len; i++) {
	      if (exports.skips[i].test(name)) {
	        return false;
	      }
	    }

	    for (i = 0, len = exports.names.length; i < len; i++) {
	      if (exports.names[i].test(name)) {
	        return true;
	      }
	    }

	    return false;
	  }
	  /**
	   * Coerce `val`.
	   *
	   * @param {Mixed} val
	   * @return {Mixed}
	   * @api private
	   */


	  function coerce(val) {
	    if (val instanceof Error) return val.stack || val.message;
	    return val;
	  }
	});

	var browser$3 = createCommonjsModule(function (module, exports) {
	  /**
	   * This is the web browser implementation of `debug()`.
	   *
	   * Expose `debug()` as the module.
	   */
	  exports = module.exports = debug;
	  exports.log = log;
	  exports.formatArgs = formatArgs;
	  exports.save = save;
	  exports.load = load;
	  exports.useColors = useColors;
	  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
	  /**
	   * Colors.
	   */

	  exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];
	  /**
	   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	   * and the Firebug extension (any Firefox version) are known
	   * to support "%c" CSS customizations.
	   *
	   * TODO: add a `localStorage` variable to explicitly enable/disable colors
	   */

	  function useColors() {
	    // NB: In an Electron preload script, document will be defined but not fully
	    // initialized. Since we know we're in Chrome, we'll just detect this case
	    // explicitly
	    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	      return true;
	    } // is webkit? http://stackoverflow.com/a/16459606/376773
	    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


	    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
	    typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
	    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
	  }
	  /**
	   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	   */


	  exports.formatters.j = function (v) {
	    try {
	      return JSON.stringify(v);
	    } catch (err) {
	      return '[UnexpectedJSONParseError]: ' + err.message;
	    }
	  };
	  /**
	   * Colorize log arguments if enabled.
	   *
	   * @api public
	   */


	  function formatArgs(args) {
	    var useColors = this.useColors;
	    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
	    if (!useColors) return;
	    var c = 'color: ' + this.color;
	    args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
	    // arguments passed either before or after the %c, so we need to
	    // figure out the correct index to insert the CSS into

	    var index = 0;
	    var lastC = 0;
	    args[0].replace(/%[a-zA-Z%]/g, function (match) {
	      if ('%%' === match) return;
	      index++;

	      if ('%c' === match) {
	        // we only are interested in the *last* %c
	        // (the user may have provided their own)
	        lastC = index;
	      }
	    });
	    args.splice(lastC, 0, c);
	  }
	  /**
	   * Invokes `console.log()` when available.
	   * No-op when `console.log` is not a "function".
	   *
	   * @api public
	   */


	  function log() {
	    // this hackery is required for IE8/9, where
	    // the `console.log` function doesn't have 'apply'
	    return 'object' === (typeof console === "undefined" ? "undefined" : _typeof_1(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
	  }
	  /**
	   * Save `namespaces`.
	   *
	   * @param {String} namespaces
	   * @api private
	   */


	  function save(namespaces) {
	    try {
	      if (null == namespaces) {
	        exports.storage.removeItem('debug');
	      } else {
	        exports.storage.debug = namespaces;
	      }
	    } catch (e) {}
	  }
	  /**
	   * Load `namespaces`.
	   *
	   * @return {String} returns the previously persisted debug modes
	   * @api private
	   */


	  function load() {
	    var r;

	    try {
	      r = exports.storage.debug;
	    } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


	    if (!r && typeof process !== 'undefined' && 'env' in process) {
	      r = process.env.DEBUG;
	    }

	    return r;
	  }
	  /**
	   * Enable namespaces listed in `localStorage.debug` initially.
	   */


	  exports.enable(load());
	  /**
	   * Localstorage attempts to return the localstorage.
	   *
	   * This is necessary because safari throws
	   * when a user disables cookies/localstorage
	   * and you attempt to access it.
	   *
	   * @return {LocalStorage}
	   * @api private
	   */

	  function localstorage() {
	    try {
	      return window.localStorage;
	    } catch (e) {}
	  }
	});

	/**
	 * Module dependencies
	 */

	var debug$1 = browser$3('jsonp');
	/**
	 * Module exports.
	 */

	var jsonp_1 = jsonp;
	/**
	 * Callback index.
	 */

	var count = 0;
	/**
	 * Noop function.
	 */

	function noop$1() {}
	/**
	 * JSONP handler
	 *
	 * Options:
	 *  - param {String} qs parameter (`callback`)
	 *  - prefix {String} qs parameter (`__jp`)
	 *  - name {String} qs parameter (`prefix` + incr)
	 *  - timeout {Number} how long after a timeout error is emitted (`60000`)
	 *
	 * @param {String} url
	 * @param {Object|Function} optional options / callback
	 * @param {Function} optional callback
	 */


	function jsonp(url, opts, fn) {
	  if ('function' == typeof opts) {
	    fn = opts;
	    opts = {};
	  }

	  if (!opts) opts = {};
	  var prefix = opts.prefix || '__jp'; // use the callback name that was passed if one was provided.
	  // otherwise generate a unique name by incrementing our counter.

	  var id = opts.name || prefix + count++;
	  var param = opts.param || 'callback';
	  var timeout = null != opts.timeout ? opts.timeout : 60000;
	  var enc = encodeURIComponent;
	  var target = document.getElementsByTagName('script')[0] || document.head;
	  var script;
	  var timer;

	  if (timeout) {
	    timer = setTimeout(function () {
	      cleanup();
	      if (fn) fn(new Error('Timeout'));
	    }, timeout);
	  }

	  function cleanup() {
	    if (script.parentNode) script.parentNode.removeChild(script);
	    window[id] = noop$1;
	    if (timer) clearTimeout(timer);
	  }

	  function cancel() {
	    if (window[id]) {
	      cleanup();
	    }
	  }

	  window[id] = function (data) {
	    debug$1('jsonp got', data);
	    cleanup();
	    if (fn) fn(null, data);
	  }; // add qs component


	  url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id);
	  url = url.replace('?&', '?');
	  debug$1('jsonp req "%s"', url); // create script

	  script = document.createElement('script');
	  script.src = url;
	  target.parentNode.insertBefore(script, target);
	  return cancel;
	}

	/**
	 * @constant {string | string} Host for the profile status API call
	 * @private
	 */

	var _host$3 = process && process.env.PROFILE_HOST || 'https://idaas.iam.ibm.com';
	/**
	 * @constant {string | string} API version
	 * @private
	 */


	var _version$1 = process && process.env.PROFILE_VERSION || 'v1';
	/**
	 * Profile status endpoint
	 *
	 * @type {string}
	 * @private
	 */


	var _endpoint$4 = "".concat(_host$3, "/").concat(_version$1, "/mgmt/idaas/user/status/");
	/**
	 * Profile API class with methods for checking user authentication for ibm.com
	 */


	var ProfileAPI = /*#__PURE__*/function () {
	  function ProfileAPI() {
	    classCallCheck(this, ProfileAPI);
	  }

	  createClass(ProfileAPI, null, [{
	    key: "getUserStatus",

	    /**
	     * Returns user status (authenticated or unauthenticated)
	     *
	     * @returns {Promise<any>} User status
	     * @example
	     * import { ProfileAPI } from '@carbon/ibmdotcom-services';
	     *
	     * async function getUserStatus() {
	     *   const response = await ProfileAPI.getUserStatus();
	     *   return response;
	     * }
	     */
	    value: function getUserStatus() {
	      var url = _endpoint$4;
	      return new Promise(function (resolve, reject) {
	        return jsonp_1(url, null, function (err, data) {
	          return err ? reject(err) : resolve(data);
	        });
	      });
	    }
	    /**
	     * Monitors user status (authenticated or unauthenticated)
	     *
	     * @example
	     * import { ProfileAPI } from '@carbon/ibmdotcom-services';
	     *
	     * function monitorUserStatus() {
	     *   ProfileAPI.monitorUserStatus((err, status) => {
	     *     console.log('The new login status:', status.user);
	     *   });
	     * }
	     */

	  }, {
	    key: "monitorUserStatus",
	    value: function monitorUserStatus(callback) {
	      return jsonp_1(_endpoint$4, null, callback);
	    }
	  }]);

	  return ProfileAPI;
	}();

	function _extends$p() {
	  _extends$p = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$p.apply(this, arguments);
	}

	function _objectWithoutProperties$s(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$t(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$t(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}
	var prefix$1B = settings_1.prefix;

	var SkipToContent = function SkipToContent(_ref) {
	  var children = _ref.children,
	      customClassName = _ref.className,
	      href = _ref.href,
	      tabIndex = _ref.tabIndex,
	      rest = _objectWithoutProperties$s(_ref, ["children", "className", "href", "tabIndex"]);

	  var className = cx("".concat(prefix$1B, "--skip-to-content"), customClassName);
	  return /*#__PURE__*/React__default.createElement("a", _extends$p({}, rest, {
	    className: className,
	    href: href,
	    tabIndex: tabIndex
	  }), children);
	};

	SkipToContent.propTypes = {
	  className: PropTypes.string,

	  /**
	   * Provide text to display in the SkipToContent `a` tag
	   */
	  children: PropTypes.string.isRequired,

	  /**
	   * Provide the `href` to the id of the element on your package that is the
	   * main content.
	   */
	  href: PropTypes.string.isRequired,

	  /**
	   * Optionally override the default tabindex of 0
	   */
	  tabIndex: PropTypes.string
	};
	SkipToContent.defaultProps = {
	  children: 'Skip to main content',
	  href: '#main-content',
	  tabIndex: '0'
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$p =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M16 4a5 5 0 11-5 5 5 5 0 015-5m0-2a7 7 0 107 7A7 7 0 0016 2zM26 30H24V25a5 5 0 00-5-5H13a5 5 0 00-5 5v5H6V25a7 7 0 017-7h6a7 7 0 017 7z"
	});

	var User20 = /*#__PURE__*/React__default.forwardRef(function User20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$p, children);
	});

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$q =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("circle", {
	  cx: "26",
	  cy: "16",
	  r: "4"
	});

	var _ref3$7 =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M22 30H20V25a5 5 0 00-5-5H9a5 5 0 00-5 5v5H2V25a7 7 0 017-7h6a7 7 0 017 7zM12 4A5 5 0 117 9a5 5 0 015-5m0-2a7 7 0 107 7A7 7 0 0012 2z"
	});

	var UserOnline20 = /*#__PURE__*/React__default.forwardRef(function UserOnline20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$q, _ref3$7, children);
	});

	var stablePrefix$W = settings$1.stablePrefix;
	var prefix$1C = settings_1.prefix;
	/**
	 * MastHead component
	 *
	 * @param {object} props React props object
	 * @param {object} props.navigation Object containing navigation elements
	 * @param {boolean} props.hasProfile Determines whether to render Profile component
	 * @param {boolean} props.hasSearch Determines whether to render Search Bar
	 * @param {boolean} props.searchOpenOnload Determines if the search field is open on page load
	 * @param {string} props.placeHolderText Placeholder value for search input
	 * @param {object} props.platform Platform name that appears on L0.
	 * @param {string} props.title Title for the masthead L1
	 * @param {string} props.eyebrowText Text for the eyebrow link in masthead L1
	 * @param {string} props.eyebrowLink URL for the eyebrow link in masthead L1
	 * @returns {*} Masthead component
	 */

	var Masthead = function Masthead(_ref) {
	  var _cx;

	  var navigation = _ref.navigation,
	      hasProfile = _ref.hasProfile,
	      hasSearch = _ref.hasSearch,
	      searchOpenOnload = _ref.searchOpenOnload,
	      placeHolderText = _ref.placeHolderText,
	      platform = _ref.platform,
	      mastheadL1Data = _ref.mastheadL1Data,
	      mastheadProps = objectWithoutProperties(_ref, ["navigation", "hasProfile", "hasSearch", "searchOpenOnload", "placeHolderText", "platform", "mastheadL1Data"]);

	  /**
	   * Returns IBM.com authenticated status
	   *
	   * @param {boolean} isAuthenticated Whether the user is authenticated to IBM.com
	   * @returns {*} The user status
	   */
	  var _useState = React.useState(false),
	      _useState2 = slicedToArray(_useState, 2),
	      isAuthenticated = _useState2[0],
	      setStatus = _useState2[1];

	  React.useEffect(function () {
	    // initialize global execution calls
	    globalInit();
	  }, []);
	  React.useEffect(function () {
	    var unmounted = false;

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var status;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return ProfileAPI.getUserStatus();

	            case 2:
	              status = _context.sent;

	              if (!unmounted) {
	                setStatus(status.user === 'Authenticated');
	              }

	            case 4:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))();

	    return function () {
	      unmounted = true;
	    };
	  }, []);

	  var _useState3 = React.useState([]),
	      _useState4 = slicedToArray(_useState3, 2),
	      mastheadData = _useState4[0],
	      setMastheadData = _useState4[1];

	  var _useState5 = React.useState({
	    signedin: [],
	    signedout: []
	  }),
	      _useState6 = slicedToArray(_useState5, 2),
	      profileData = _useState6[0],
	      setProfileData = _useState6[1];

	  React.useEffect(function () {
	    var unmounted = false;

	    asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	      var pageData;
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.prev = 0;
	              _context2.next = 3;
	              return TranslationAPI.getTranslation();

	            case 3:
	              pageData = _context2.sent;

	              if (!unmounted) {
	                setMastheadData(pageData.mastheadNav.links);
	                setProfileData(pageData.profileMenu);
	              }

	              _context2.next = 10;
	              break;

	            case 7:
	              _context2.prev = 7;
	              _context2.t0 = _context2["catch"](0);
	              console.error('Error populating masthead data:', _context2.t0);

	            case 10:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, null, [[0, 7]]);
	    }))();

	    return function () {
	      unmounted = true;
	    };
	  }, []);
	  /**
	   * Forces profile menu position to fixed to prevent scrolling
	   *
	   */

	  var _setProfileListPosition = function _setProfileListPosition() {
	    var profileMenuList = document.querySelector(".".concat(prefix$1C, "--masthead__profile-item"));
	    profileMenuList.closest('ul').style.position = 'fixed';
	    profileMenuList.closest('ul').style.top = '48px';
	  };

	  var _useState7 = React.useState(false),
	      _useState8 = slicedToArray(_useState7, 2),
	      isMastheadSticky = _useState8[0],
	      setIsMastheadSticky = _useState8[1];

	  var stickyRef = React.useRef(null);
	  var mastheadL1Ref = React.useRef(null);
	  var mastheadSticky = cx((_cx = {}, defineProperty(_cx, "".concat(prefix$1C, "--masthead--sticky"), isMastheadSticky), defineProperty(_cx, "".concat(prefix$1C, "--masthead--sticky__l1"), mastheadL1Ref.current != null), _cx));
	  var hasPlatform = cx(defineProperty({}, "".concat(prefix$1C, "--masthead__platform"), platform));
	  React.useEffect(function () {
	    /**
	     * Sets sticky masthead. If both L0 and L1 are present, L1 will be sticky.
	     *
	     */
	    var hideTopnavThreshold = 0.25;
	    var handleScroll = lib.addEventListener('scroll', function () {
	      /**
	       * L0 will hide/show only in the top 25% of the viewport.
	       *
	       */
	      if (mastheadL1Ref.current != null) {
	        setIsMastheadSticky(lib.pageYOffset > lib.innerHeight * hideTopnavThreshold);
	      }
	    });
	    return function () {
	      lib.removeEventListener('scroll', function () {
	        return handleScroll;
	      });
	    };
	  }, []);

	  if (navigation) {
	    switch (_typeof_1(navigation)) {
	      case 'default':
	        // eslint-disable-next-line
	        mastheadData = mastheadData;
	        break;

	      case 'object':
	        mastheadData = navigation;
	        break;

	      default:
	        break;
	    }
	  }
	  /**
	   * Determines whether to add class to masthead to hide nav items and
	   * display hamburger menu instead to prevent overlapping of menu items
	   */


	  var _useState9 = React.useState(false),
	      _useState10 = slicedToArray(_useState9, 2),
	      hideNavItems = _useState10[0],
	      setHideNavItems = _useState10[1];
	  /**
	   * set nav items to hide/show depending if the window size is smaller/larger to
	   * the total width of the masthead items calculated previously
	   *
	   * @param {object} mediaQuery MediaQueryList object
	   */


	  var hideShowNavItems = function hideShowNavItems(mediaQuery) {
	    if (mediaQuery.matches) {
	      setHideNavItems(true);
	    } else {
	      setHideNavItems(false);
	    }
	  };

	  var lgBreakpoint = parseFloat(breakpoints.lg.width) * baseFontSize;
	  /**
	   * check window size to determine whether to trigger hide/show nav item function
	   */

	  var onResize = function onResize() {
	    if (lib.innerWidth >= lgBreakpoint) {
	      /**
	       * get total width of masthead items (logo, nav menu items, search icons) and set css media query
	       * in order to hide nav menu items at the width and show hamburger menu. This prevents menu items
	       * from overlapping
	       */
	      var width = calculateTotalWidth(['bx--header__logo', 'bx--header__nav-container', 'bx--masthead__platform-name', 'bx--header__search--actions', 'bx--header__global']);

	      if (width > lgBreakpoint) {
	        var mediaQuery = lib.matchMedia("(min-width: ".concat(lgBreakpoint, "px) and (max-width: ").concat(width + 50, "px)"));
	        hideShowNavItems(mediaQuery);
	        mediaQuery.addListener(hideShowNavItems);
	        return function () {
	          mediaQuery.removeListener(hideShowNavItems);
	        };
	      }
	    }
	  };

	  React.useEffect(function () {
	    onResize();
	    lib.document.addEventListener('resize', onResize);
	    return function () {
	      lib.document.removeEventListener('resize', onResize);
	    };
	  }); // set navigation type (default, alternate, or ecosystem) for autoids

	  var navType;

	  if (!navigation && !platform) {
	    navType = 'alt';
	  } else if (navigation && !platform) {
	    navType = 'default';
	  } else if (platform) {
	    navType = 'eco';
	  }

	  return React__default.createElement(HeaderContainer, {
	    render: function render(_ref4) {
	      var _mastheadL1Data$navig;

	      var isSideNavExpanded = _ref4.isSideNavExpanded,
	          onClickSideNavExpand = _ref4.onClickSideNavExpand;

	      if (isSideNavExpanded) {
	        var _root$document, _root$document$body;

	        (_root$document = lib.document) === null || _root$document === void 0 ? void 0 : (_root$document$body = _root$document.body) === null || _root$document$body === void 0 ? void 0 : _root$document$body.classList.add("".concat(prefix$1C, "--body__lock-scroll"));
	      } else {
	        var _root$document2, _root$document2$body;

	        (_root$document2 = lib.document) === null || _root$document2 === void 0 ? void 0 : (_root$document2$body = _root$document2.body) === null || _root$document2$body === void 0 ? void 0 : _root$document2$body.classList.remove("".concat(prefix$1C, "--body__lock-scroll"));
	      }

	      return React__default.createElement("div", {
	        className: cx("".concat(prefix$1C, "--masthead ").concat(mastheadSticky), defineProperty({}, "".concat(prefix$1C, "--masthead--hide-items"), hideNavItems)),
	        ref: stickyRef
	      }, React__default.createElement("div", {
	        className: "".concat(prefix$1C, "--masthead__l0")
	      }, React__default.createElement(Header, {
	        "aria-label": "IBM",
	        "data-autoid": "".concat(stablePrefix$W, "--masthead")
	      }, React__default.createElement(SkipToContent, null), (mastheadL1Data || navigation) && React__default.createElement(HeaderMenuButton, {
	        "aria-label": isSideNavExpanded ? 'Close menu' : 'Open menu',
	        "data-autoid": "".concat(stablePrefix$W, "--masthead-").concat(navType, "-sidenav__l0-menu"),
	        onClick: onClickSideNavExpand,
	        isActive: isSideNavExpanded
	      }), (navigation || mastheadL1Data) && isSideNavExpanded && React__default.createElement(MastheadLeftNav, _extends_1({}, mastheadProps, {
	        backButtonText: "Back",
	        platform: platform,
	        navigation: (_mastheadL1Data$navig = mastheadL1Data === null || mastheadL1Data === void 0 ? void 0 : mastheadL1Data.navigationL1) !== null && _mastheadL1Data$navig !== void 0 ? _mastheadL1Data$navig : mastheadData,
	        isSideNavExpanded: isSideNavExpanded,
	        navType: navType
	      })), React__default.createElement(IbmLogo, {
	        autoid: "".concat(stablePrefix$W, "--masthead-").concat(navType, "__l0-logo")
	      }), React__default.createElement("div", {
	        className: "".concat(prefix$1C, "--header__search ").concat(hasPlatform)
	      }, navigation && !mastheadL1Data && React__default.createElement(MastheadTopNav, _extends_1({}, mastheadProps, {
	        platform: platform,
	        navigation: mastheadData,
	        navType: navType
	      })), hasSearch && React__default.createElement(MastheadSearch, {
	        searchOpenOnload: searchOpenOnload,
	        placeHolderText: placeHolderText,
	        navType: navType
	      })), hasProfile && React__default.createElement(HeaderGlobalBar, null, React__default.createElement(MastheadProfile, {
	        overflowMenuProps: {
	          ariaLabel: 'User Profile',
	          'data-autoid': "".concat(stablePrefix$W, "--masthead-").concat(navType, "__l0-account"),
	          flipped: true,
	          style: {
	            width: '3rem'
	          },
	          onOpen: function onOpen() {
	            return _setProfileListPosition();
	          },
	          renderIcon: function renderIcon() {
	            return isAuthenticated ? React__default.createElement(UserOnline20, null) : React__default.createElement(User20, null);
	          }
	        },
	        overflowMenuItemProps: {
	          wrapperClassName: "".concat(prefix$1C, "--masthead__profile-item")
	        },
	        profileMenu: isAuthenticated ? profileData.signedin : profileData.signedout,
	        navType: navType
	      })))), mastheadL1Data && DDS_MASTHEAD_L1 && React__default.createElement("div", {
	        ref: mastheadL1Ref
	      }, React__default.createElement(MastheadL1, _extends_1({}, mastheadL1Data, {
	        isShort: isMastheadSticky,
	        navType: navType
	      }))));
	    }
	  });
	};

	Masthead.propTypes = {
	  /**
	   * Navigation data object/string for Masthead. These navigation properties belongs to the Masthead L0 Top navigation. Use one from below:
	   *
	   * | Behavior           | Data Type | Description                                 | Example                             |
	   * | ------------------ | --------- | ------------------------------------------- | ----------------------------------- |
	   * | default navigation | String    | Default navigation data from IBM.com        | `<Masthead navigation="default" />` |
	   * | custom navigation  | Object    | Pass in custom navigation data as an object | `<Masthead navigation={myNavObj}/>` |
	   * | none               | null      | No navigation                               | `<Masthead />`                      |
	   *
	   * `Custom` navigation data must follow the same structure and key names as `default`.
	   * See [this](https://www.ibm.com/common/v18/js/data/jsononly/usen.json) for an example.
	   */
	  navigation: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({
	    hasMenu: PropTypes.bool,
	    title: PropTypes.string,
	    url: PropTypes.string,
	    menuSections: PropTypes.arrayOf(PropTypes.shape({
	      menuItems: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        url: PropTypes.string
	      }))
	    }))
	  }))]),

	  /**
	   * `true` to render IBM Profile Menu component.
	   */
	  hasProfile: PropTypes.bool,

	  /**
	   * `true` to render SearchBar component.
	   */
	  hasSearch: PropTypes.bool,

	  /**
	   * `true` to have search field open on page load.
	   */
	  searchOpenOnload: PropTypes.bool,

	  /**
	   * Platform name that appears on L0.
	   * Includes platform name (only available with `default` and `custom navigation`).
	   * Object requires `name` and `url`.
	   * See [docs](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-masthead--default#platform) for more details.
	   */
	  platform: PropTypes.shape({
	    name: PropTypes.string,
	    url: PropTypes.string
	  }),

	  /**
	   * Placeholder value for search input.
	   */
	  placeHolderText: PropTypes.string,

	  /**
	   * All the data that goes to the L1 of the Masthead.
	   */
	  mastheadL1Data: PropTypes.shape({
	    /**
	     * Title for the masthead L1 (experimental).
	     */
	    title: PropTypes.string,

	    /**
	     * Title optional link for the masthead L1 (experimental).
	     */
	    titleLink: PropTypes.string,

	    /**
	     * Text for the eyebrow link in masthead L1 (experimental).
	     */
	    eyebrowText: PropTypes.string,

	    /**
	     * URL for the eyebrow link in masthead L1 (experimental).
	     */
	    eyebrowLink: PropTypes.string,

	    /**
	     * Navigation data object/string for Masthead L1. Use one from below:
	     *
	     * | Behavior           | Data Type | Description                                 | Example                             |
	     * | ------------------ | --------- | ------------------------------------------- | ----------------------------------- |
	     * | default navigation | String    | Default navigation data from IBM.com        | `<MastheadL1 navigationL1="default" />` |
	     * | custom navigation  | Object    | Pass in custom navigation data as an object | `<MastheadL1 navigationL1={myNavObj}/>` |
	     * | none               | null      | No navigation                               | `<MastheadL1 />`                      |
	     *
	     * `Custom` navigation data must follow the same structure and key names as `default`.
	     * See [this](https://www.ibm.com/common/v18/js/data/jsononly/usen.json) for an example.
	     */
	    navigationL1: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({
	      hasMenu: PropTypes.bool,
	      title: PropTypes.string,
	      url: PropTypes.string,
	      menuSections: PropTypes.arrayOf(PropTypes.shape({
	        menuItems: PropTypes.arrayOf(PropTypes.shape({
	          title: PropTypes.string,
	          url: PropTypes.string
	        }))
	      }))
	    }))])
	  })
	};
	Masthead.defaultProps = {
	  hasProfile: true,
	  hasSearch: true,
	  searchOpenOnload: false,
	  platform: null,
	  placeHolderText: 'Search all of IBM',
	  mastheadL1Data: null
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$X = settings$1.stablePrefix;
	var prefix$1D = settings_1.prefix;
	/**
	 * DotcomShell component.
	 */

	var DotcomShell = function DotcomShell(_ref) {
	  var children = _ref.children,
	      footerProps = _ref.footerProps,
	      mastheadProps = _ref.mastheadProps;
	  return React__default.createElement(React__default.Fragment, null, React__default.createElement(Masthead, mastheadProps), React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$X, "--dotcom-shell"),
	    className: "".concat(prefix$1D, "--dotcom-shell")
	  }, React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$X, "--dotcom-shell__content"),
	    className: "".concat(prefix$1D, "--dotcom-shell__content")
	  }, children)), React__default.createElement(Footer, footerProps));
	};

	DotcomShell.propTypes = {
	  /**
	   * Component(s) to render within the UI shell.
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

	  /**
	   * Props for the Masthead.
	   * See [`<Footer>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-footer--default) for more details.
	   */
	  footerProps: PropTypes.shape({
	    navigation: PropTypes.shape({
	      footerMenu: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        links: PropTypes.arrayOf(PropTypes.shape({
	          title: PropTypes.string,
	          url: PropTypes.string
	        }))
	      })),
	      footerThin: PropTypes.arrayOf(PropTypes.shape({
	        title: PropTypes.string,
	        url: PropTypes.string
	      }))
	    }),
	    type: PropTypes.oneOf(['tall', 'short']),
	    langCode: PropTypes.shape({
	      cc: PropTypes.string,
	      lc: PropTypes.string
	    }),
	    disableLocaleButton: PropTypes.bool,
	    languageOnly: PropTypes.bool,
	    languageItems: PropTypes.arrayOf(PropTypes.shape({})),
	    languageInitialItem: PropTypes.shape({
	      id: PropTypes.string,
	      text: PropTypes.string
	    }),
	    languageCallback: PropTypes.func
	  }),

	  /**
	   * Props for the Masthead.
	   * See [`<Masthead>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-masthead--default) for more details.
	   */
	  mastheadProps: PropTypes.shape(Masthead.propTypes)
	};
	Footer.defaultProps = {
	  footerProps: null,
	  mastheadProps: null
	};

	var stablePrefix$Y = settings$1.stablePrefix;
	var prefix$1E = settings_1.prefix;
	/**
	 * Featured Card Component.
	 */

	var FeatureCardBlockLarge = function FeatureCardBlockLarge(props) {
	  return props.eyebrow && props.heading && props.image && props.cta && React__default.createElement("section", {
	    className: cx("".concat(prefix$1E, "--feature-card-block-large"), defineProperty({}, "".concat(prefix$1E, "--feature-card-block-large_no-copy-text"), !props.copy)),
	    "data-autoid": "".concat(stablePrefix$Y, "--feature-card-block-large")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1E, "--feature-card-block-large__container")
	  }, React__default.createElement(Card, _extends_1({
	    customClassName: "".concat(prefix$1E, "--feature-card-block-large__card")
	  }, props, {
	    inverse: true
	  }))));
	};

	FeatureCardBlockLarge.propTypes = {
	  /**
	   * "Eyebrow" text above copy and CTA.
	   */
	  eyebrow: PropTypes.string.isRequired,

	  /**
	   * Title of the Card item.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Body text for the card.
	   */
	  copy: PropTypes.string,

	  /**
	   * Object containing target and href of link. Has the following structure in summary:
	   *
	   * | Name   | Data Type | Description                                 |
	   * | ------ | --------- | ------------------------------------------- |
	   * | `href` | String    | Url of the FeatureCardBlockLarge component. |
	   *
	   * See [`<Card>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-card--static#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))])
	  }).isRequired,

	  /**
	   * Contains source and alt text properties.
	   * See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details.
	   */
	  image: PropTypes.shape({
	    classname: PropTypes.string,
	    sources: PropTypes.arrayOf(PropTypes.shape({
	      src: PropTypes.string,
	      breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	    })),
	    defaultSrc: PropTypes.string.isRequired,
	    alt: PropTypes.string.isRequired,
	    longDescription: PropTypes.string
	  }).isRequired
	};

	var stablePrefix$Z = settings$1.stablePrefix;
	var prefix$1F = settings_1.prefix;
	/**
	 * renders the pattern classnames
	 *
	 * @param {string} theme theme of the pattern
	 * @param {string} type switches between centered or default
	 * @param {object} image object
	 * @returns {string} classnames
	 */

	var className = function className(theme, type, image) {
	  var _classnames;

	  var mainClassName = "".concat(prefix$1F, "--leadspace").concat(type === 'centered' ? '--centered' : '');
	  return cx(mainClassName, (_classnames = {}, defineProperty(_classnames, "".concat(mainClassName, "--").concat(theme), theme), defineProperty(_classnames, "".concat(prefix$1F, "--leadspace--productive"), type === 'small'), defineProperty(_classnames, "".concat(prefix$1F, "--leadspace--centered__image"), image && type === 'centered'), _classnames));
	};
	/**
	 * @param {string} type returns centered or default
	 * @param {string} element returns element name
	 * @returns {string} classnames
	 */


	function centeredClassname(type, element) {
	  if (type === 'centered') {
	    return "".concat(prefix$1F, "--leadspace--centered__").concat(element);
	  } else return "".concat(prefix$1F, "--leadspace__").concat(element);
	}
	/**
	 *
	 * @param {string} type returns centered or default
	 * @param {string} gradient gradient
	 * @returns {object} gradient
	 */


	function newoverlayClassname(type, gradient) {
	  if (type === 'centered') {
	    return cx("".concat(prefix$1F, "--leadspace--centered__overlay"), defineProperty({}, "".concat(prefix$1F, "--leadspace--centered__gradient"), gradient));
	  } else return cx("".concat(prefix$1F, "--leadspace__overlay"), defineProperty({}, "".concat(prefix$1F, "--leadspace--gradient"), gradient));
	}
	/**
	 *
	 * @param {string} type type
	 * @param {object} image image
	 * @returns {object} returns either image component or the centered image div
	 */


	function imageClassname(type, image) {
	  if (type === 'centered') {
	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$Z, "--leadspace--centered--mobile__image"),
	      className: "".concat(prefix$1F, "--leadspace--centered--mobile__image")
	    }, React__default.createElement("img", {
	      src: image.defaultSrc,
	      alt: image.alt
	    }));
	  } else return React__default.createElement(Image, image);
	}
	/**
	 * Lead space component (left-aligned)
	 *
	 * @param {object} props props object
	 * @param {Array} props.buttons array of buttons for lead space (max 2 buttons)
	 * @param {string} props.copy lead space short copy to support the title
	 * @param {boolean} props.gradient determines whether to render gradient overlay
	 * @param {object} props.image image object with diff source for diff breakpoints
	 * @param {string} props.theme theme of the pattern (g100 or white (default))
	 * @param {string} props.title lead space title
	 * @param {string} props.type type of lead space
	 * @returns {*} Lead space component
	 */


	var LeadSpace = function LeadSpace(_ref) {
	  var buttons = _ref.buttons,
	      copy = _ref.copy,
	      gradient = _ref.gradient,
	      image = _ref.image,
	      theme = _ref.theme,
	      title = _ref.title,
	      type = _ref.type;
	  var background = image && {
	    backgroundImage: "url(".concat(image.defaultSrc, ")")
	  };
	  return React__default.createElement("section", {
	    style: background,
	    "data-autoid": "".concat(stablePrefix$Z, "--leadspace"),
	    className: className(theme, type, image)
	  }, React__default.createElement("div", {
	    className: centeredClassname(type, 'container')
	  }, React__default.createElement("div", {
	    className: newoverlayClassname(type, gradient)
	  }, React__default.createElement("div", {
	    className: type !== 'centered' ? "".concat(prefix$1F, "--leadspace--content__container") : "".concat(prefix$1F, "--leadspace--centered--content__container")
	  }, React__default.createElement("div", {
	    className: centeredClassname(type, 'row')
	  }, React__default.createElement("h1", {
	    className: centeredClassname(type, 'title')
	  }, title)), React__default.createElement("div", {
	    className: "".concat(prefix$1F, "--leadspace__content")
	  }, copy && React__default.createElement("div", {
	    className: centeredClassname(type, 'row')
	  }, copy && React__default.createElement("p", {
	    "data-autoid": "".concat(stablePrefix$Z, "--leadspace__desc"),
	    className: centeredClassname(type, 'desc')
	  }, copy)), buttons && buttons.length > 0 && React__default.createElement(ButtonGroup, {
	    buttons: buttons
	  })))), image && imageClassname(type, image)));
	};

	LeadSpace.propTypes = {
	  /**
	   * Array of button objects to render (max 2).
	   * See [`<ButtonGroup>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-buttongroup--default#button-item) for full usage details.
	   */
	  buttons: PropTypes.arrayOf(PropTypes.shape({
	    copy: PropTypes.string.isRequired,
	    href: PropTypes.string.isRequired,
	    renderIcon: PropTypes.elementType
	  })),

	  /**
	   * Short copy of LeadSpace.
	   */
	  copy: PropTypes.string,

	  /**
	   * `true` to render overlay gradient.
	   */
	  gradient: PropTypes.bool,

	  /**
	   * Object with different ratio options for corresponding breakpoints.
	   * See [`<Image>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-image--default#props) for full usage details.
	   */
	  image: PropTypes.shape(PropTypes.shape({
	    classname: PropTypes.string,
	    sources: PropTypes.arrayOf(PropTypes.shape({
	      src: PropTypes.string,
	      breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	    })),
	    defaultSrc: PropTypes.string.isRequired,
	    alt: PropTypes.string.isRequired,
	    longDescription: PropTypes.string
	  })),

	  /**
	   * Color theme of LeadSpace. Choose from:
	   *
	   * | Name    | Data Type | Description           |
	   * | ------- | --------- | --------------------- |
	   * | `white` | String    | Carbon White theme    |
	   * | `g100`  | String    | Carbon Gray 100 theme |
	   */
	  theme: PropTypes.oneOf(['white', 'g100']),

	  /**
	   * Title of LeadSpace.
	   */
	  title: PropTypes.string.isRequired,

	  /**
	   * Sets the type of Leadspace layout. Choose from:
	   *
	   * | Name              | Data Type | Description                                       |
	   * | ----------------- | --------- | ------------------------------------------------- |
	   * | `small`/`default` | String    | Left-aligned - small style of the leadspace title |
	   * | `left`            | String    | Left-aligned - large style of the leadspace title |
	   * | `centered`        | String    | Centered type of the LeadSpace                    |
	   */
	  type: PropTypes.oneOf(['small', 'left', 'centered'])
	};

	var stablePrefix$_ = settings$1.stablePrefix;
	var prefix$1G = settings_1.prefix;
	/**
	 * renders media either video or image content
	 *
	 * @param {string} type media type
	 * @param {object} data media data
	 * @returns {*} Image or Video
	 */

	var _renderMedia$4 = function _renderMedia(type, data) {
	  if (data) {
	    return React__default.createElement("div", {
	      "data-autoid": "".concat(stablePrefix$_, "--leadspace-block__media"),
	      className: "".concat(prefix$1G, "--leadspace-block__media")
	    }, type === 'image' && React__default.createElement(ImageWithCaption, data), type === 'video' && React__default.createElement(VideoPlayer, data));
	  }
	};
	/**
	 * Lead space block component (left-aligned).
	 */


	var LeadSpaceBlock = function LeadSpaceBlock(_ref) {
	  var title = _ref.title,
	      heading = _ref.heading,
	      copy = _ref.copy,
	      mediaType = _ref.mediaType,
	      mediaData = _ref.mediaData,
	      items = _ref.items,
	      cta = _ref.cta;
	  var pageTitle = React__default.createElement("div", null, title && React__default.createElement("h1", {
	    "data-autoid": "".concat(stablePrefix$_, "--leadspace-block__title"),
	    className: "".concat(prefix$1G, "--leadspace-block__title")
	  }, title));
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$_, "--leadspace-block"),
	    className: "".concat(prefix$1G, "--leadspace-block")
	  }, pageTitle, React__default.createElement(ContentBlock, {
	    heading: heading,
	    copy: copy
	  }, _renderMedia$4(mediaType, mediaData), React__default.createElement(LinkList, {
	    style: "vertical-end",
	    heading: items.heading,
	    items: items.items
	  }), React__default.createElement(CTA, _extends_1({
	    customClassName: "".concat(prefix$1G, "--leadspace-block__cta ").concat(prefix$1G, "--leadspace-block__cta-col")
	  }, cta))), React__default.createElement(HorizontalRule, null));
	};

	LeadSpaceBlock.propTypes = {
	  /**
	   * Heading of the content block.
	   */
	  title: PropTypes.string.isRequired,

	  /**
	   * Subheading of the content block.
	   */
	  heading: PropTypes.string.isRequired,

	  /**
	   * Link list items.
	   */
	  items: PropTypes.shape({
	    heading: PropTypes.string.isRequired,
	    items: PropTypes.arrayOf(PropTypes.shape({
	      style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	      type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	      copy: PropTypes.string,
	      href: PropTypes.string,
	      customClassName: PropTypes.string
	    })).isRequired
	  }).isRequired,

	  /**
	   * Simple content item.
	   */
	  copy: PropTypes.string,

	  /**
	   * Media Type [image, video or none].
	   */
	  mediaType: PropTypes.oneOf(['image', 'video']),

	  /**
	   * Media Data for either image or video.
	   * See the following components' README for more details:
	   *
	   * * `mediaType="image"`: [`<ImageWithCaption>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-imagewithcaption--default#props)
	   * * `mediaType="video"`: [`<VideoPlayer>`](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-videoplayer--default#props)
	   */
	  mediaData: PropTypes.oneOfType([PropTypes.shape({
	    inverse: PropTypes.bool,
	    image: PropTypes.shape({
	      classname: PropTypes.string,
	      sources: PropTypes.arrayOf(PropTypes.shape({
	        src: PropTypes.string,
	        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
	      })),
	      defaultSrc: PropTypes.string.isRequired,
	      alt: PropTypes.string.isRequired,
	      longDescription: PropTypes.string
	    }).isRequired,
	    lightbox: PropTypes.bool,
	    heading: PropTypes.string,
	    copy: PropTypes.string,
	    customClassName: PropTypes.string
	  }), PropTypes.shape({
	    customClassName: PropTypes.string,
	    videoId: PropTypes.string.isRequired,
	    showCaption: PropTypes.bool,
	    inverse: PropTypes.bool
	  })]),

	  /**
	   * CTA props.
	   * See the [`<CTA>`'s README](http://ibmdotcom-react.mybluemix.net/?path=/docs/components-cta--default#props) for full usage details.
	   */
	  cta: PropTypes.shape({
	    style: PropTypes.oneOf(['text', 'card', 'button', 'feature']),
	    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),
	    copy: PropTypes.string,
	    href: PropTypes.string,
	    customClassName: PropTypes.string
	  })
	};
	LeadSpaceBlock.defaultProps = {
	  copy: '',
	  mediaType: null,
	  mediaData: null,
	  cta: null
	};

	var stablePrefix$$ = settings$1.stablePrefix;
	var prefix$1H = settings_1.prefix;
	/**
	 * Logo Grid component.
	 */

	var LogoGrid = function LogoGrid(_ref) {
	  var heading = _ref.heading,
	      logosGroup = _ref.logosGroup,
	      ctaCopy = _ref.ctaCopy,
	      ctaHref = _ref.ctaHref,
	      hideBorder = _ref.hideBorder;

	  /**
	   * sets the class name based on theme type
	   *
	   * @param {string} theme theme type ( g10 | white/default )
	   * @returns {string} theme css class names
	   */
	  var cta = null;

	  if (ctaHref) {
	    cta = {
	      style: 'card',
	      type: 'local',
	      copy: ctaCopy,
	      cta: {
	        href: ctaHref
	      }
	    };
	  }

	  return React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$$, "--logo-grid"),
	    className: cx("".concat(prefix$1H, "--logo-grid"), defineProperty({}, "".concat(prefix$1H, "--logo-grid__no-border"), hideBorder))
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1H, "--logo-grid__container")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1H, "--logo-grid__wrapper ").concat(prefix$1H, "--grid ").concat(prefix$1H, "--grid--full-width")
	  }, React__default.createElement(ContentBlock, {
	    heading: heading,
	    cta: cta
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1H, "--logo-grid__row")
	  }, logosGroup.map(function (placeholder, index) {
	    return React__default.createElement("div", {
	      className: "".concat(prefix$1H, "--logo-grid__col"),
	      key: index
	    }, React__default.createElement("a", {
	      href: placeholder.href,
	      className: "".concat(prefix$1H, "--logo-grid__link")
	    }, React__default.createElement("div", {
	      className: "".concat(prefix$1H, "--logo-grid__logo"),
	      key: placeholder.label
	    }, React__default.createElement(Image, {
	      defaultSrc: placeholder.imgSrc,
	      classname: "".concat(prefix$1H, "--logo-grid_img"),
	      alt: placeholder.altText,
	      longDescription: placeholder.label
	    }))));
	  }))))));
	};

	LogoGrid.propTypes = {
	  /**
	   * Heading text.
	   */
	  heading: PropTypes.string,

	  /**
	   * An array of logo objects to be rendered as Image components surrounded by hypertext links:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `label`  | String    | Visible to screen readers, hidden from users.              |
	   * | `imgSrc` | String    | Image source for logo placeholder.                         |
	   * | `altText`| String    | Alternate text for logo placeholder.                       |
	   * | `href`   | String    | Url of that the logo will link to.                         |
	   */
	  logosGroup: PropTypes.arrayOf(PropTypes.shape({
	    label: PropTypes.string,
	    imgSrc: PropTypes.string,
	    altText: PropTypes.string,
	    href: PropTypes.string
	  })).isRequired,

	  /**
	   * Optional copy for the CTA
	   */
	  ctaCopy: PropTypes.string,

	  /**
	   * Link address for the CTA. If omitted, CTA doesn't render.
	   */
	  ctaHref: PropTypes.string,

	  /**
	   * Set to true to hide the default bottom border.
	   */
	  hideBorder: PropTypes.bool
	};

	/**
	 * Copyright IBM Corp. 2016, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var stablePrefix$10 = settings$1.stablePrefix;
	var prefix$1I = settings_1.prefix;
	/**
	 * Simple benefits item.
	 */

	var SimpleBenefitsItem = function SimpleBenefitsItem(_ref) {
	  var title = _ref.title,
	      copy = _ref.copy,
	      link = _ref.link;
	  return React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$10, "--simplebenefits__content-item"),
	    className: "".concat(prefix$1I, "--simplebenefits__content-item")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1I, "--simplebenefits__content-item-container")
	  }, React__default.createElement("h3", {
	    className: "".concat(prefix$1I, "--simplebenefits__content-item__title")
	  }, title), React__default.createElement("div", {
	    className: "".concat(prefix$1I, "--simplebenefits__content-item__divider")
	  }), React__default.createElement("div", {
	    className: "".concat(prefix$1I, "--simplebenefits__content-item__content")
	  }, copy), link && React__default.createElement("div", {
	    className: "".concat(prefix$1I, "--simplebenefits__content-item__link")
	  }, React__default.createElement(LinkWithIcon, {
	    href: link.href,
	    target: link.target
	  }, React__default.createElement("span", null, link.text), React__default.createElement(ArrowRight20, null)))));
	};

	SimpleBenefitsItem.propTypes = {
	  /**
	   * Simple long form title
	   */
	  title: PropTypes.string,

	  /**
	   * Simple long form copy.
	   */
	  copy: PropTypes.string,

	  /**
	   * Link object which includes url, link text and target properties.
	   */
	  link: PropTypes.shape({
	    href: PropTypes.string,
	    text: PropTypes.string,
	    target: PropTypes.string
	  })
	};

	var stablePrefix$11 = settings$1.stablePrefix;
	var prefix$1J = settings_1.prefix;
	/**
	 * Simple benefits pattern.
	 */

	var SimpleBenefits = function SimpleBenefits(_ref) {
	  var _classNames;

	  var content = _ref.content,
	      theme = _ref.theme,
	      title = _ref.title;
	  React.useEffect(function () {
	    /**
	     * Function to be added to eventListener and cleaned later on
	     */
	    var resizeFunction = function resizeFunction() {
	      setSameHeight(".".concat(prefix$1J, "--simplebenefits__content-item__title"));
	    };

	    resizeFunction();
	    lib.addEventListener('resize', resizeFunction);
	    return function () {
	      return lib.removeEventListener('resize', resizeFunction);
	    };
	  });
	  /**
	   * Set same height to elements
	   *
	   * @param {string} selector css selector of target elements
	   */

	  var setSameHeight = function setSameHeight(selector) {
	    var elements = document.querySelectorAll(selector);
	    var biggest = 0;
	    elements.forEach(function (element) {
	      element.style.height = "auto";
	    });
	    elements.forEach(function (element) {
	      if (element.offsetHeight > biggest) {
	        biggest = element.offsetHeight;
	      }
	    });
	    elements.forEach(function (element) {
	      element.style.height = "".concat(biggest, "px");
	    });
	  };

	  var simpleBenefits = cx((_classNames = {}, defineProperty(_classNames, "".concat(prefix$1J, "--simplebenefits"), true), defineProperty(_classNames, "".concat(prefix$1J, "--simplebenefits--multirow"), content.length > 3), _classNames));
	  return featureFlag(DDS_SIMPLEBENEFITS, React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$11, "--simplebenefits"),
	    className: "".concat(simpleBenefits, " ").concat(_setTheme(theme))
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1J, "--simplebenefits__container")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1J, "--simplebenefits__row")
	  }, React__default.createElement("h2", {
	    className: "".concat(prefix$1J, "--simplebenefits__title")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1J, "--simplebenefits__title-container")
	  }, title)), React__default.createElement("div", {
	    "data-autoid": "".concat(stablePrefix$11, "--simplebenefits__content"),
	    className: "".concat(prefix$1J, "--simplebenefits__content")
	  }, _renderArray(content))))));
	};
	/**
	 * Render the content in array list
	 *
	 * @private
	 * @param {Array} content content object array
	 * @returns {object} JSX Object
	 */


	var _renderArray = function _renderArray(content) {
	  return content.map(function (contentItem, contentItemIndex) {
	    return React__default.createElement(SimpleBenefitsItem, {
	      key: contentItemIndex,
	      title: contentItem.title,
	      copy: contentItem.copy,
	      link: contentItem.link
	    });
	  });
	};
	/**
	 * sets the class name based on theme type
	 *
	 * @private
	 * @param {string} theme theme type
	 * @returns {string} theme css class names
	 */


	var _setTheme = function _setTheme(theme) {
	  return theme && "".concat(prefix$1J, "--simplebenefits--").concat(theme);
	};

	SimpleBenefits.propTypes = {
	  /**
	   * Array of content group objects. Has the following structure for each items:
	   *
	   * | Name    | Data Type | Description                                                  |
	   * | ------- | --------- | ------------------------------------------------------------ |
	   * | `title` | String    | Title of the Content Card item.                              |
	   * | `copy`  | String    | Copy of the Content Card item.                               |
	   * | `link`  | Object    | Object containing target and href of link. See `link` below. |
	   *
	   * `link`:
	   *
	   * | Name     | Data Type | Description                                                |
	   * | -------- | --------- | ---------------------------------------------------------- |
	   * | `href`   | String    | Url of link.                                               |
	   * | `text`   | String    | Link text.                                                 |
	   * | `target` | String    | Open within current tab or new tab ('\_self' or '\_blank') |
	   */
	  content: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string,
	    copy: PropTypes.string,
	    link: PropTypes.shape({
	      href: PropTypes.string,
	      text: PropTypes.string,
	      target: PropTypes.string
	    })
	  })),

	  /**
	   * Main title of the pattern.
	   */
	  title: PropTypes.string.isRequired
	};

	var stablePrefix$12 = settings$1.stablePrefix;
	var prefix$1K = settings_1.prefix;
	/**
	 * DesktopMenu Component.
	 */

	var TOCDesktop = function TOCDesktop(_ref) {
	  var menuItems = _ref.menuItems,
	      selectedId = _ref.selectedId;

	  /**
	   * Render menu items
	   *
	   * @param {Array} items menu items array
	   * @param {string} activeId selected item id
	   * @returns {*} JSX Object
	   */
	  var renderMenuItems = function renderMenuItems(items, activeId) {
	    return items.map(function (item, index) {
	      if ((item === null || item === void 0 ? void 0 : item.id) !== 'menuLabel') {
	        var isActive = activeId === item.id;
	        return React__default.createElement("li", {
	          key: index,
	          "data-autoid": "".concat(stablePrefix$12, "--tableofcontents__desktop__item-").concat(item.id),
	          className: cx("".concat(prefix$1K, "--tableofcontents__desktop__item"), defineProperty({}, "".concat(prefix$1K, "--tableofcontents__desktop__item--active"), isActive))
	        }, React__default.createElement("a", _extends_1({}, isActive ? {
	          'aria-current': 'location'
	        } : {}, {
	          onClick: function onClick(e) {
	            return handleOnClick(e, item.id);
	          },
	          href: "#".concat(item.id)
	        }), item.title));
	      }
	    });
	  };
	  /**
	   * Handle OnClick
	   *
	   * @param {*} e event object
	   * @param {*} id menu item id
	   */


	  var handleOnClick = function handleOnClick(e, id) {
	    e.preventDefault();
	    var selector = "a[name=\"".concat(id, "\"]");
	    smoothScroll(null, selector);
	    triggerFocus(selector);
	  };
	  /**
	   * Trigger the focus on screen readers, so they can read the target paragraph
	   *
	   * @param {*} elem Selector to find the item
	   */


	  function triggerFocus(elem) {
	    var element = document.querySelector(elem);
	    element.setAttribute('tabindex', '0');
	    element.focus({
	      preventScroll: true
	    });
	    element.removeAttribute('tabindex');
	  }

	  return React__default.createElement("div", {
	    className: "".concat(prefix$1K, "--tableofcontents__desktop"),
	    "data-autoid": "".concat(stablePrefix$12, "--tableofcontents__desktop")
	  }, React__default.createElement("ul", null, renderMenuItems(menuItems, selectedId)));
	};

	TOCDesktop.propTypes = {
	  /**
	   * Array of menu item objects to render within the side nav.
	   * Each items has the following structure:
	   *
	   * | Properties Name | Data Type | Description     |
	   * | --------------- | --------- | --------------- |
	   * | title           | String    | Menu title text |
	   * | id              | String    | Menu id         |
	   */
	  menuItems: PropTypes.array,

	  /**
	   * Id of a menu item.
	   */
	  selectedId: PropTypes.string
	};

	/**
	 * Copyright IBM Corp. 2019, 2020
	 *
	 * This source code is licensed under the Apache-2.0 license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
	 */

	var _ref2$r =
	/*#__PURE__*/

	/*#__PURE__*/
	React__default.createElement("path", {
	  d: "M4 6H22V8H4zM4 12H22V14H4zM4 18H22V20H4zM4 24H22V26H4zM26 6H28V8H26zM26 12H28V14H26zM26 18H28V20H26zM26 24H28V26H26z"
	});

	var TableOfContents20 = /*#__PURE__*/React__default.forwardRef(function TableOfContents20(_ref, ref) {
	  var children = _ref.children,
	      rest = _objectWithoutProperties$2(_ref, ["children"]);

	  return /*#__PURE__*/React__default.createElement(Icon, _extends({
	    width: 20,
	    height: 20,
	    viewBox: "0 0 32 32",
	    xmlns: "http://www.w3.org/2000/svg",
	    fill: "currentColor",
	    ref: ref
	  }, rest), _ref2$r, children);
	});

	var stablePrefix$13 = settings$1.stablePrefix;
	var prefix$1L = settings_1.prefix;
	/**
	 * Mobile Component.
	 */

	var TOCMobile = function TOCMobile(_ref) {
	  var menuItems = _ref.menuItems,
	      selectedId = _ref.selectedId,
	      menuLabel = _ref.menuLabel,
	      updateState = _ref.updateState;

	  var _useState = React.useState('menuLabel'),
	      _useState2 = slicedToArray(_useState, 2),
	      selectedOption = _useState2[0],
	      setSelectedOption = _useState2[1];

	  React.useEffect(function () {
	    setSelectedOption(selectedId);
	  }, [selectedId]);
	  /**
	   * Handle onChange event of select
	   *
	   * @param {*} e event object
	   */

	  var handleChange = function handleChange(e) {
	    var id = e.target.value;
	    var filteredItems = menuItems.filter(function (menu) {
	      return menu.id === id;
	    });
	    var title = filteredItems[0].title;
	    updateState(id, title);
	    var selector = "a[name=\"".concat(id, "\"]");
	    smoothScroll(null, selector, 50);
	  };
	  /**
	   * Handle OnBlur event
	   *
	   * @returns {null} Returns null for blur events
	   */


	  var handleOnBlur = function handleOnBlur() {
	    return null;
	  };

	  return React__default.createElement("div", {
	    className: "".concat(prefix$1L, "--tableofcontents__mobile"),
	    "data-autoid": "".concat(stablePrefix$13, "--tableofcontents__mobile")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1L, "--tableofcontents__mobile__select__wrapper")
	  }, React__default.createElement("select", {
	    className: "".concat(prefix$1L, "--tableofcontents__mobile__select"),
	    onBlur: handleOnBlur,
	    value: selectedOption,
	    onChange: function onChange(e) {
	      return handleChange(e);
	    }
	  }, renderOptions(menuItems, menuLabel)), React__default.createElement(TableOfContents20, {
	    className: "".concat(prefix$1L, "--tableofcontents__mobile__select__icon"),
	    "aria-label": "menu icon"
	  }, React__default.createElement("title", null, "menu icon"))));
	};
	/**
	 * Render options for select
	 *
	 * @param {Array} options menu item arrray
	 * @param {Array} label menu label
	 * @returns {*} JSX Object
	 */


	var renderOptions = function renderOptions(options, label) {
	  var labelObj = {
	    title: "".concat(label, " ..."),
	    id: 'menuLabel'
	  };
	  options.findIndex(function (x) {
	    return x.id === labelObj.id;
	  }) === -1 ? options.unshift(labelObj) : null;
	  return options.map(function (option, index) {
	    if (option) {
	      return React__default.createElement("option", {
	        className: "".concat(prefix$1L, "--tableofcontents__mobile__select__option"),
	        "data-autoid": "".concat(stablePrefix$13, "}--tableofcontents__mobile__select__option-").concat(option.id),
	        key: index,
	        value: option.id,
	        defaultValue: index === 0,
	        disabled: index === 0,
	        hidden: index === 0
	      }, option.title);
	    }
	  });
	};

	TOCMobile.propTypes = {
	  /**
	   * Array of menu item objects to render within the side nav.
	   * Each items has the following structure:
	   *
	   * | Properties Name | Data Type | Description     |
	   * | --------------- | --------- | --------------- |
	   * | title           | String    | Menu title text |
	   * | id              | String    | Menu id         |
	   */
	  menuItems: PropTypes.array,

	  /**
	   * Id of a menu item.
	   */
	  selectedId: PropTypes.string,

	  /**
	   * Menu label for mobile menu.
	   */
	  menuLabel: PropTypes.string,

	  /**
	   * Function to update parent state.
	   */
	  updateState: PropTypes.func
	};

	var stablePrefix$14 = settings$1.stablePrefix;
	var prefix$1M = settings_1.prefix;
	/**
	 * loops into the array of elements and returns the values
	 *
	 * @private
	 * @returns {Array} returns elemenrt name and data title
	 */

	var _findMenuItems = function _findMenuItems() {
	  var eles = document.querySelectorAll('a[name]');
	  var menuItems = [];
	  eles.forEach(function (element) {
	    if (element.getAttribute('name') !== 'menuLabel') {
	      menuItems.push({
	        id: element.getAttribute('name'),
	        title: element.getAttribute('data-title') || ''
	      });
	    }
	  });
	  return menuItems;
	};
	/**
	 * Table of Contents pattern.
	 */


	var TableOfContents = function TableOfContents(_ref) {
	  var menuItems = _ref.menuItems,
	      children = _ref.children,
	      menuLabel = _ref.menuLabel,
	      theme = _ref.theme,
	      stickyOffset = _ref.stickyOffset,
	      menuRule = _ref.menuRule,
	      headingContent = _ref.headingContent;

	  var _useState = React.useState([]),
	      _useState2 = slicedToArray(_useState, 2),
	      useMenuItems = _useState2[0],
	      setUseMenuItems = _useState2[1];

	  var _useState3 = React.useState(''),
	      _useState4 = slicedToArray(_useState3, 2),
	      selectedId = _useState4[0],
	      setSelectedId = _useState4[1];

	  var _useState5 = React.useState(''),
	      _useState6 = slicedToArray(_useState5, 2),
	      selectedTitle = _useState6[0],
	      setSelectedTitle = _useState6[1];

	  React.useEffect(function () {
	    if (menuItems === null || menuItems === void 0 ? void 0 : menuItems.length) {
	      setUseMenuItems(toConsumableArray(menuItems));
	    } else {
	      setUseMenuItems(_findMenuItems());
	    }
	  }, [menuItems]);
	  React.useEffect(function () {
	    var id = useMenuItems[0] ? useMenuItems[0].id : '';
	    var title = useMenuItems[0] ? useMenuItems[0].title : '';

	    if (id === 'menuLabel' && useMenuItems[1]) {
	      id = useMenuItems[1].id;
	      title = useMenuItems[1].title;
	    }

	    setSelectedId(id);
	    setSelectedTitle(title);
	  }, [useMenuItems]);
	  React.useEffect(function () {
	    /**
	     * Function to be added to eventListener and cleaned later on
	     */
	    var handleRAF = function handleRAF() {
	      window.requestAnimationFrame(setSelectedItem);
	    };

	    window.addEventListener('scroll', handleRAF);
	    return function () {
	      return window.removeEventListener('scroll', handleRAF);
	    };
	  });
	  /**
	   * Set selected id & title
	   *
	   */

	  var setSelectedItem = function setSelectedItem() {
	    var elems = getElemsInView();

	    if (elems) {
	      var _filteredItems$;

	      var id = elems || useMenuItems[0].id;
	      var filteredItems = useMenuItems.filter(function (menu) {
	        if (id !== 'undefined') {
	          return menu.id === id;
	        }
	      });
	      var title = (_filteredItems$ = filteredItems[0]) === null || _filteredItems$ === void 0 ? void 0 : _filteredItems$.title;

	      if (title !== undefined) {
	        setSelectedId(id);
	        setSelectedTitle(title);
	      }
	    }
	  };
	  /**
	   * Check whether provided anchor tags are in visible viewport
	   *
	   * @returns {string} name attribute
	   */


	  var getElemsInView = function getElemsInView() {
	    var items = toConsumableArray(document.querySelectorAll('a[name]')).map(function (elem, index, arr) {
	      return {
	        elem: elem,
	        height: arr[index + 1] ? arr[index + 1].getBoundingClientRect().y - elem.getBoundingClientRect().y : null,
	        position: elem.getBoundingClientRect().y
	      };
	    }).filter(function (elem, index, arr) {
	      return elem.height === null ? arr[index - 1].position < arr[index - 1].height : elem.position - 50 > -elem.height;
	    });

	    return items[0].elem.getAttribute('name');
	  };
	  /**
	   * Sets the selected menu item
	   *
	   * @param {*} id selected id of menu item
	   * @param {*} title selected title of menu item
	   */


	  var updateState = function updateState(id, title) {
	    setSelectedId(id);
	    setSelectedTitle(title);
	  };
	  /**
	   * Props for the Layout component
	   *
	   * @type {{marginBottom: string, type: string, marginTop: string}}
	   */


	  var layoutProps = {
	    type: '1-3'
	  };
	  /**
	   * Validate if the Menu Items has Id and Title filled
	   *
	   * @param {Array} menuItems array of Items
	   * @returns {Array} filtered array of items
	   */

	  var validateMenuItems = function validateMenuItems(menuItems) {
	    return menuItems.filter(function (item) {
	      return item.title.trim().length > 0 && item.id.trim().length > 0;
	    });
	  };
	  /**
	   * Props for TOCDesktop and TOCMobile
	   *
	   * @type {{
	   * updateState: Function,
	   * selectedId: string,
	   * menuItems: Array,
	   * selectedTitle: string,
	   * menuLabel: string
	   * children: object
	   * }}
	   */


	  var props = {
	    menuItems: validateMenuItems(useMenuItems),
	    selectedId: selectedId,
	    selectedTitle: selectedTitle,
	    menuLabel: menuLabel,
	    updateState: updateState,
	    children: children.length > 1 ? children[0] : null
	  };
	  /**
	   * Render TableOfContents pattern
	   *
	   * @returns {*} JSX Object
	   */

	  return React__default.createElement("section", {
	    "data-autoid": "".concat(stablePrefix$14, "--tableofcontents"),
	    className: cx("".concat(prefix$1M, "--tableofcontents"), defineProperty({}, "".concat(prefix$1M, "--tableofcontents--").concat(theme), theme))
	  }, React__default.createElement(Layout, layoutProps, React__default.createElement("div", {
	    className: "".concat(prefix$1M, "--tableofcontents__sidebar")
	  }, headingContent && React__default.createElement("div", {
	    className: "".concat(prefix$1M, "--tableofcontents__desktop__children")
	  }, headingContent, menuRule && React__default.createElement(HorizontalRule, null)), React__default.createElement("div", {
	    className: "".concat(prefix$1M, "--tableofcontents__mobile-top")
	  }), React__default.createElement("div", {
	    style: {
	      position: 'sticky',
	      top: stickyOffset ? "".concat(stickyOffset, "px") : 0
	    }
	  }, React__default.createElement(TOCDesktop, _extends_1({
	    menuRule: menuRule,
	    headingContent: headingContent
	  }, props)), React__default.createElement(TOCMobile, props))), React__default.createElement("div", {
	    className: "".concat(prefix$1M, "--tableofcontents__content")
	  }, React__default.createElement("div", {
	    className: "".concat(prefix$1M, "--tableofcontents__content-wrapper")
	  }, headingContent !== undefined ? React__default.createElement(React__default.Fragment, null, React__default.createElement("div", {
	    className: "".concat(prefix$1M, "--tableofcontents__children__mobile")
	  }, headingContent), children) : children))));
	};

	TableOfContents.propTypes = {
	  /**
	   * Array of menu item objects to render within the side nav.
	   * Each items has the following structure:
	   *
	   * | Properties Name | Data Type | Description     |
	   * | --------------- | --------- | --------------- |
	   * | title           | String    | Menu title text |
	   * | id              | String    | Menu id         |
	   *
	   * If `menuItems` is not passed in as a prop, the menu items are dynamically
	   * generated based on anchor links that exist on the page. The anchor links should
	   * follow the following format:
	   *
	   * ```html
	   * <a name="name-of-section" data-title="Lorem Ipsum"></a>
	   * ```
	   */
	  menuItems: PropTypes.arrayOf(PropTypes.shape({
	    title: PropTypes.string.isRequired,
	    id: PropTypes.string.isRequired
	  })),

	  /**
	   * Content to display next to the side nav.
	   */
	  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),

	  /**
	   * Placeholder value for menu label.
	   */
	  menuLabel: PropTypes.string,

	  /**
	   * Defines the color theme for the pattern. Choose from:
	   *
	   * | Name            | Description                              |
	   * | --------------- | ---------------------------------------- |
	   * | white / default | White theme applied to pattern           |
	   * | g10             | Gray 10 (g10) theme applied to pattern   |
	   * | g100            | Gray 100 (g100) theme applied to pattern |
	   */
	  theme: PropTypes.oneOf(['white', 'g10', 'g100']),

	  /**
	   * Defines the offset for the sticky column.
	   */
	  stickyOffset: PropTypes.number,

	  /**
	   * Defines if the menu ruler will be rendered.
	   */
	  menuRule: PropTypes.bool,

	  /**
	   * Content to be displayed above the navigation menu.
	   */
	  headingContent: PropTypes.node
	};
	TableOfContents.defaultProps = {
	  menuItems: null,
	  menuLabel: 'Jump to',
	  theme: 'white',
	  stickyOffset: null
	};

	exports.ButtonGroup = ButtonGroup;
	exports.CTA = CTA;
	exports.CTASection = CTASection;
	exports.CalloutData = CalloutData;
	exports.CalloutQuote = CalloutQuote;
	exports.CalloutWithMedia = CalloutWithMedia;
	exports.Card = Card;
	exports.CardGroup = CardGroup;
	exports.CardLink = CardLink;
	exports.CardSectionImages = CardSectionImages;
	exports.CardSectionSimple = CardSectionSimple;
	exports.ContentBlockCards = ContentBlockCards;
	exports.ContentBlockHeadlines = ContentBlockHeadlines;
	exports.ContentBlockMedia = ContentBlockMedia;
	exports.ContentBlockMixed = ContentBlockMixed;
	exports.ContentBlockSegmented = ContentBlockSegmented;
	exports.ContentBlockSimple = ContentBlockSimple;
	exports.ContentGroupCards = ContentGroupCards;
	exports.ContentGroupHorizontal = ContentGroupHorizontal;
	exports.ContentGroupPictograms = ContentGroupPictograms;
	exports.ContentGroupSimple = ContentGroupSimple;
	exports.ContentItemHorizontal = ContentItemHorizontal;
	exports.DotcomShell = DotcomShell;
	exports.ExpressiveModal = ExpressiveModal;
	exports.FeatureCard = FeatureCard;
	exports.FeatureCardBlockLarge = FeatureCardBlockLarge;
	exports.FeatureCardBlockMedium = FeatureCardBlockMedium;
	exports.Footer = Footer;
	exports.FooterLogo = Logo;
	exports.FooterNav = FooterNav;
	exports.FooterNavGroup = FooterNavGroup;
	exports.HeaderMenu = HeaderMenu$1;
	exports.HorizontalRule = HorizontalRule;
	exports.IbmLogo = IbmLogo;
	exports.Image = Image;
	exports.ImageWithCaption = ImageWithCaption;
	exports.Layout = Layout;
	exports.LeadSpace = LeadSpace;
	exports.LeadSpaceBlock = LeadSpaceBlock;
	exports.LegalNav = LegalNav;
	exports.LightboxMediaViewer = LightboxMediaViewer;
	exports.LinkList = LinkList;
	exports.LinkWithIcon = LinkWithIcon;
	exports.LocaleModal = LocaleModal;
	exports.LocaleModalCountries = LocaleModalCountries;
	exports.LocaleModalRegions = LocaleModalRegions;
	exports.LogoGrid = LogoGrid;
	exports.Masthead = Masthead;
	exports.MastheadL1 = MastheadL1;
	exports.MastheadLeftNav = MastheadLeftNav;
	exports.MastheadSearch = MastheadSearch;
	exports.MastheadTopNav = MastheadTopNav;
	exports.PictogramItem = PictogramItem;
	exports.Quote = Quote;
	exports.SideNavIcon = SideNavIcon$1;
	exports.SideNavMenu = SideNavMenu$1;
	exports.SideNavMenuWithBackForward = SideNavMenuWithBackForward;
	exports.SimpleBenefits = SimpleBenefits;
	exports.TableOfContents = TableOfContents;
	exports.VideoPlayer = VideoPlayer;
	exports.cardPropTypes = cardPropTypes;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
