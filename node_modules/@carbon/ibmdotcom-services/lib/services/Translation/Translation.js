"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _axios = _interopRequireDefault(require("axios"));

var _Locale = require("../Locale");

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _root$location;

/**
 * @constant {string | string} Host for the Translation API call
 * @private
 */
var _host = process && (process.env.REACT_APP_TRANSLATION_HOST || process.env.TRANSLATION_HOST) || 'https://www.ibm.com';
/**
 * @constant {string | string} CORS proxy for lower environment calls
 * @private
 */


var _proxy = ((_root$location = _windowOrGlobal.default.location) === null || _root$location === void 0 ? void 0 : _root$location.host) === 'www.ibm.com' ? '' : // Optional chaining operator in `process.env.ENVVAR` does not work in some build systems, notably Parcel
process && (process.env.REACT_APP_CORS_PROXY || process.env.CORS_PROXY) || '';
/**
 * Translation API endpoint
 *
 * @type {string}
 * @private
 */


var _endpoint = "".concat(_host, "/common/v18/js/data/jsononly");
/**
 * Session Storage key for translation data
 *
 * @type {string}
 * @private
 */


var _sessionTranslationKey = 'dds-translation';
/**
 * Tracking of the translation fetch
 *
 * @type {{}}
 * @private
 */

var _translationFetch = {};
/**
 * Number of times to retry the fetch before failing
 *
 * @type {number}
 * @private
 */

var _timeoutRetries = 50;
/**
 * Tracks the number of attempts for the fetch
 *
 * @type {number}
 * @private
 */

var _attempt = 0;
/**
 * The cache for in-flight or resolved requests for the i18n data, keyed by the initiating locale.
 *
 * @type {object<string, Translation>}
 */

var _requestsTranslation = {};
/**
 * Translation API class with methods for fetching i18n data for ibm.com
 */

var TranslationAPI = /*#__PURE__*/function () {
  function TranslationAPI() {
    (0, _classCallCheck2.default)(this, TranslationAPI);
  }

  (0, _createClass2.default)(TranslationAPI, null, [{
    key: "clearCache",

    /**
     * Clears the cache.
     */
    value: function clearCache() {
      Object.keys(_requestsTranslation).forEach(function (key) {
        return delete _requestsTranslation[key];
      });

      for (var i = 0; i < sessionStorage.length; ++i) {
        var key = sessionStorage.key(i);

        if (key.indexOf(_sessionTranslationKey) === 0) {
          sessionStorage.removeItem(key);
        }
      }
    }
    /**
     * Returns translation i18n data
     *
     * @param {object} codes object containing lc and cc
     *
     * @returns {Promise<any>} Translation data
     * @example
     * import { TranslationAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getTranslation() {
     *   const response = await TranslationAPI.getTranslation({
     *     lc: 'en',
     *     cc: 'us',
     *   });
     *   return response;
     * }
     */

  }, {
    key: "getTranslation",
    value: function () {
      var _getTranslation = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(codes) {
        var _this = this;

        var lang, country, locale, key, cachedRequest;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                lang = 'en';
                country = 'us';

                if (!(codes && codes.lc && codes.cc)) {
                  _context.next = 7;
                  break;
                }

                lang = codes.lc;
                country = codes.cc;
                _context.next = 12;
                break;

              case 7:
                _context.next = 9;
                return _Locale.LocaleAPI.getLocale();

              case 9:
                locale = _context.sent;
                lang = locale.lc;
                country = locale.cc;

              case 12:
                key = "".concat(lang, "-").concat(country);
                cachedRequest = _requestsTranslation[key];

                if (!cachedRequest) {
                  _context.next = 16;
                  break;
                }

                return _context.abrupt("return", cachedRequest);

              case 16:
                return _context.abrupt("return", _requestsTranslation[key] = new Promise(function (resolve, reject) {
                  _this.fetchTranslation(lang, country, resolve, reject);
                }));

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getTranslation(_x) {
        return _getTranslation.apply(this, arguments);
      }

      return getTranslation;
    }()
    /**
     * Fetches the translation data from sessionStorage or data fetch
     *
     * @param {string} lang Language code
     * @param {string} country Country code
     * @param {Function} resolve resolves the Promise
     * @param {Function} reject rejects the promise
     */

  }, {
    key: "fetchTranslation",
    value: function fetchTranslation(lang, country, resolve, reject) {
      var _this2 = this;

      var sessionTranslation = JSON.parse(sessionStorage.getItem("".concat(_sessionTranslationKey, "-").concat(country, "-").concat(lang)));

      if (sessionTranslation) {
        resolve(sessionTranslation);
      } else if (_translationFetch["".concat(country, "-").concat(lang)]) {
        _attempt++;

        if (_attempt < _timeoutRetries) {
          setTimeout(function () {
            _this2.fetchTranslation(lang, country, resolve, reject);
          }, 100);
        } else {
          reject();
        }
      } else {
        var proxy = '';

        if (_windowOrGlobal.default.location) {
          var currenthost = "".concat(_windowOrGlobal.default.location.protocol, "//").concat(_windowOrGlobal.default.location.host);
          proxy = currenthost !== _host ? _proxy : '';
        }

        var url = "".concat(proxy).concat(_endpoint, "/").concat(country).concat(lang, ".json");
        _attempt = 0;
        _translationFetch["".concat(country, "-").concat(lang)] = true;

        _axios.default.get(url, {
          headers: {
            'Content-Type': 'text/plain',
            origin: _host
          }
        }).then(function (response) {
          var data = _this2.transformData(response.data);

          sessionStorage.setItem("".concat(_sessionTranslationKey, "-").concat(country, "-").concat(lang), JSON.stringify(data));
          _translationFetch["".concat(country, "-").concat(lang)] = false;
          resolve(data);
        }).catch(function (error) {
          _translationFetch["".concat(country, "-").concat(lang)] = false;
          reject(error);
        });
      }
    }
    /**
     * Transforms translation data
     *
     * @param   {object} data translation data to be transformed
     * @returns {object} Translation data
     */

  }, {
    key: "transformData",
    value: function transformData(data) {
      data.footerMenu.push(data.socialFollow);
      return data;
    }
  }]);
  return TranslationAPI;
}();

var _default = TranslationAPI;
exports.default = _default;