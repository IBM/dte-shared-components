"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Analytics = require("../Analytics");

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Sets the Kaltura Partner ID, set by environment variable "KALTURA_PARTNER_ID"
 *
 * @type {number}
 * @private
 */
var _partnerId = process.env.KALTURA_PARTNER_ID || 1773841;
/**
 * Sets the Kaltura UIConf ID, set by environment variable "KALTURA_UICONF_ID"
 *
 * @type {number}
 * @private
 */


var _uiConfId = process.env.KALTURA_UICONF_ID || 27941801;
/**
 * @type {string} _embedUrl The API URL to call
 * @private
 */


var _embedUrl = "https://cdnapisec.kaltura.com/p/".concat(_partnerId, "/sp/").concat(_partnerId, "00/embedIframeJs/uiconf_id/").concat(_uiConfId, "/partner_id/").concat(_partnerId);
/**
 * @type {string} _thumbnailUrl
 * @private
 */


var _thumbnailUrl = "https://cdnsecakmi.kaltura.com/p/".concat(_partnerId, "/thumbnail/entry_id/");
/**
 * Number of times to retry the script ready loop before failing
 *
 * @type {number}
 * @private
 */


var _timeoutRetries = 50;
/**
 * Tracks the number of attempts for the script ready loop
 *
 * @type {number}
 * @private
 */

var _attempt = 0;
/**
 * Tracks the script status
 *
 * @type {boolean} _scriptLoading to track the script loading or not
 * @private
 */

var _scriptLoading = false;
/**
 * Timeout loop to check script state is the _scriptLoaded state or _scriptLoading state
 *
 * @param {Function} resolve Resolve function
 * @param {Function} reject Reject function
 * @private
 */

function _scriptReady(resolve, reject) {
  /**
   *
   * @param {object} root.kWidget if exists then resolve
   */
  if (_windowOrGlobal.default.kWidget) {
    _scriptLoading = false;
    resolve();
  } else if (_scriptLoading) {
    _attempt++;

    if (_attempt < _timeoutRetries) {
      setTimeout(function () {
        _scriptReady(resolve, reject);
      }, 100);
    } else {
      reject();
    }
  } else {
    _loadScript();

    _scriptReady(resolve, reject);
  }
}
/**
 * Returns boolean if the _scriptLoading and _scriptLoaded flag is false
 *
 * @private
 */


function _loadScript() {
  _scriptLoading = true;
  var script = document.createElement('script');
  script.src = _embedUrl;
  script.async = true;
  document.body.appendChild(script);
}
/**
 *
 * Object to cache video data
 *
 * @private
 */


var videoData = {};
/**
 * VideoPlayerAPI class with methods of checking script state and
 * embed video meta data and api data
 *
 * In order to set the Partner ID/UIConf ID, set the following environment
 * variables:
 *
 * - KALTURA_PARTNER_ID
 * - KALTURA_UICONF_ID
 */

var VideoPlayerAPI = /*#__PURE__*/function () {
  function VideoPlayerAPI() {
    (0, _classCallCheck2.default)(this, VideoPlayerAPI);
  }

  (0, _createClass2.default)(VideoPlayerAPI, null, [{
    key: "checkScript",

    /**
     *
     * Gets the full _scriptReady state
     *
     * @returns {Promise<*>} Promise kaltura video player file
     */
    value: function checkScript() {
      return new Promise(function (resolve, reject) {
        _scriptReady(resolve, reject);
      });
    }
    /**
     * Creates thumbnail image url with customizable params
     *
     * @param {object} params param object
     * @param {string} params.videoId video id
     * @param {string} params.height specify height in pixels
     * @param {string} params.width specify width in pixels
     *
     * @returns {string} url of thumbnail image
     *
     * @example
     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * function thumbnail() {
     *   const thumbnailData = {
     *      videoId: '0_uka1msg4',
     *      height: '240',
     *      width: '320'
     *   }
     *   const thumbnailUrl = VideoPlayerAPI.getThumbnailUrl(thumbnailData);
     * }
     */

  }, {
    key: "getThumbnailUrl",
    value: function getThumbnailUrl(_ref) {
      var videoId = _ref.videoId,
          height = _ref.height,
          width = _ref.width;
      var url = _thumbnailUrl + videoId;
      if (height) url = url + "/height/".concat(height);
      if (width) url = url + "/width/".concat(width);
      return url;
    }
    /**
     * Gets the embed meta data
     *
     * @param {string} videoId  The videoId we're embedding the placeholder for.
     * @param {string} targetId The targetId the ID where we're putting the placeholder.
     * @param {boolean} autoPlay Determine whether to autoplay on load of video.
     * @returns {object}  object
     *
     * @example
     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * function embedMyVideo() {
     *   const elem = document.getElementById('foo');
     *   const videoid = '12345';
     *   VideoPlayerAPI.embedVideo(videoid, elem);
     * }
     */

  }, {
    key: "embedVideo",
    value: function () {
      var _embedVideo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(videoId, targetId, autoPlay) {
        var fireEvent;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fireEvent = this.fireEvent;
                _context.next = 3;
                return this.checkScript().then(function () {
                  var promiseKWidget = new Promise(function (resolve) {
                    _windowOrGlobal.default.kWidget.embed({
                      targetId: targetId,
                      wid: '_' + _partnerId,
                      uiconf_id: _uiConfId,
                      entry_id: videoId,
                      flashvars: {
                        autoPlay: autoPlay,
                        titleLabel: {
                          plugin: true,
                          align: 'left',
                          text: '{mediaProxy.entry.name}'
                        }
                      },
                      // Ready callback is issued for this player:
                      readyCallback: function readyCallback(playerId) {
                        var kdp = document.getElementById(playerId);
                        kdp.addJsListener('playerPaused', function () {
                          fireEvent({
                            playerState: 1,
                            kdp: kdp,
                            videoId: videoId
                          });
                        });
                        kdp.addJsListener('playerPlayed', function () {
                          fireEvent({
                            playerState: 2,
                            kdp: kdp,
                            videoId: videoId
                          });
                        });
                        kdp.addJsListener('playerPlayEnd', function () {
                          fireEvent({
                            playerState: 3,
                            kdp: kdp,
                            videoId: videoId
                          });
                        });
                        resolve(kdp);
                      }
                    });
                  });
                  return {
                    kWidget: function kWidget() {
                      return promiseKWidget;
                    }
                  };
                });

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function embedVideo(_x, _x2, _x3) {
        return _embedVideo.apply(this, arguments);
      }

      return embedVideo;
    }()
    /**
     * Fires a metrics event when the video was played.
     * Pass events to common metrics event.
     *
     * @param {object} param params
     * @param {number} param.playerState state detecting different user actions
     * @param {object} param.kdp video object
     * @param {string} param.videoId id of the video
     *
     */

  }, {
    key: "fireEvent",
    value: function fireEvent(_ref2) {
      var playerState = _ref2.playerState,
          kdp = _ref2.kdp,
          videoId = _ref2.videoId;
      // If video was played and timestamp is 0, it should be "launched" state.
      var currentTime = Math.round(kdp.evaluate('{video.player.currentTime}'));

      if (playerState === 2 && currentTime === 0) {
        playerState = 0;
      }

      var eventData = {
        playerType: 'kaltura',
        title: kdp.evaluate('{mediaProxy.entry.name}'),
        currentTime: currentTime,
        duration: kdp.evaluate('{mediaProxy.entry.duration}'),
        playerState: playerState,
        videoId: videoId
      };

      _Analytics.AnalyticsAPI.videoPlayerStats(eventData);
    }
    /**
     * Gets the api data
     *
     * @param {string} videoId  The videoId we're embedding the placeholder for.
     * @returns {object}  object
     *
     * @example
     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getMyVideoInfo(id) {
     *   const data = await VideoPlayerAPI.api(id);
     *   console.log(data);
     * }
     */

  }, {
    key: "api",
    value: function () {
      var _api = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(videoId) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.checkScript().then(function () {
                  if (videoData && videoData[videoId]) {
                    return videoData[videoId];
                  } else {
                    return new Promise(function (resolve) {
                      return new _windowOrGlobal.default.kWidget.api({
                        wid: '_' + _partnerId
                      }).doRequest({
                        service: 'media',
                        action: 'get',
                        entryId: videoId
                      }, function (jsonObj) {
                        videoData[jsonObj.id] = jsonObj;
                        resolve(jsonObj);
                      });
                    });
                  }
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function api(_x4) {
        return _api.apply(this, arguments);
      }

      return api;
    }()
    /**
     * Convert video duration from milliseconds to HH:MM:SS
     *
     * @param {string} duration video duration in milliseconds
     * @returns {string} converted duration
     */

  }, {
    key: "getVideoDuration",
    value: function getVideoDuration(duration) {
      var seconds = Math.floor(duration / 1000 % 60);
      var minutes = Math.floor(duration / (1000 * 60) % 60);
      var hours = Math.floor(duration / (1000 * 60 * 60) % 24);
      hours = hours > 0 ? hours + ':' : '';
      seconds = seconds < 10 ? '0' + seconds : seconds;
      return duration && '(' + hours + minutes + ':' + seconds + ')';
    }
  }]);
  return VideoPlayerAPI;
}();

var _default = VideoPlayerAPI;
exports.default = _default;