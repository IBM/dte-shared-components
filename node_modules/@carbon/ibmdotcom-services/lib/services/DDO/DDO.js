"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _settings = _interopRequireDefault(require("@carbon/ibmdotcom-utilities/lib/utilities/settings/settings"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Returns boolean if the isDataLayerReady flag is true
 *
 * @returns {*} boolean flag if data layer is ready in the digitalData object
 * @private
 */
function _checkFlag() {
  return _windowOrGlobal.default.digitalData && _windowOrGlobal.default.digitalData.page && _windowOrGlobal.default.digitalData.page.isDataLayerReady;
}
/**
 * Number of times to retry the datalayer ready loop before failing
 *
 * @type {number}
 * @private
 */


var _timeoutRetries = 50;

var _dataLayerReadyPromise;
/**
 * Timeout loop to check if the digitalData object is ready.
 * This is the only way to achieve this without jQuery, as the event trigger
 * is fired from jQuery's custom event layer as
 * $(document).trigger('datalayer_ready').
 *
 * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`, that eliminates the polling.
 *
 * @private
 */


function _datalayerReady() {
  if (!_dataLayerReadyPromise) {
    _dataLayerReadyPromise = new Promise(function (resolve, reject) {
      /**
       * Tracks the number of attempts for the datalayer ready loop
       *
       * @type {number}
       * @private
       */
      var _attempt = 0;

      function _dataLayerReadyImpl() {
        if (_checkFlag()) {
          resolve();
        } else {
          _attempt++;

          if (_attempt < _timeoutRetries) {
            setTimeout(function () {
              _dataLayerReadyImpl(resolve, reject);
            }, 100);
          } else {
            reject(new Error('Timeout polling for digital data object.'));
          }
        }
      }

      _dataLayerReadyImpl();
    });
  }

  return _dataLayerReadyPromise;
}
/**
 * DDO API class with methods of fetching search results for
 * ibm.com
 */


var DDOAPI = /*#__PURE__*/function () {
  function DDOAPI() {
    (0, _classCallCheck2.default)(this, DDOAPI);
  }

  (0, _createClass2.default)(DDOAPI, null, [{
    key: "isReady",

    /**
     * Promise function that determines when the digital data object is ready
     *
     * @returns {Promise} Resolved data layer ready signal
     */
    value: function isReady() {
      return _datalayerReady();
    }
    /**
     * Gets the full digitalData (DDO) object.
     * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`.
     * For quick developerment purpose, what `ibm-common.js` automatically populates can be used.
     *
     * @returns {Promise<*>} Promise object
     */

  }, {
    key: "getAll",
    value: function () {
      var _getAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.isReady().then(function () {
                  return _windowOrGlobal.default.digitalData;
                }).catch(function () {
                  return null;
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getAll() {
        return _getAll.apply(this, arguments);
      }

      return getAll;
    }()
    /**
     * Sets the version of the library to the DDO.
     * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`.
     * For quick developerment purpose, what `ibm-common.js` automatically populates can be used.
     *
     * @returns {Promise<any>} Promise object
     */

  }, {
    key: "setVersion",
    value: function () {
      var _setVersion = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.isReady().then(function () {
                  _windowOrGlobal.default.digitalData.page.pageInfo.version = _settings.default.version;
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setVersion() {
        return _setVersion.apply(this, arguments);
      }

      return setVersion;
    }()
    /**
     * Gets the locale for the current page based on the language set as metadata.
     * Application should `window.digitalData` up-front, e.g. in a `<script>` tag in `<head>`.
     * For quick developerment purpose, what `ibm-common.js` automatically populates can be used.
     *
     * @returns {Promise<*>} Promise object
     */

  }, {
    key: "getLanguage",
    value: function () {
      var _getLanguage = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.isReady().then(function () {
                  return _windowOrGlobal.default.digitalData.page.pageInfo.language;
                });

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getLanguage() {
        return _getLanguage.apply(this, arguments);
      }

      return getLanguage;
    }()
  }]);
  return DDOAPI;
}();

var _default = DDOAPI;
exports.default = _default;