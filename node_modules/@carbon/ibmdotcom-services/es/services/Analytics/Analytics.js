import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import root from 'window-or-global';
/**
 * @constant {boolean} scrollTracker determines whether scroll tracking analytics is enabled
 * @private
 */

var _scrollTracker = process && process.env.SCROLL_TRACKING === 'true' || false;
/**
 * Current NODE_ENV
 *
 * @type {string | string}
 * @private
 */


var _env = process && process.env.NODE_ENV || 'development';
/**
 * Analytics API class with methods for firing analytics events on
 * ibm.com
 */


var AnalyticsAPI = /*#__PURE__*/function () {
  function AnalyticsAPI() {
    _classCallCheck(this, AnalyticsAPI);
  }

  _createClass(AnalyticsAPI, null, [{
    key: "registerEvent",

    /**
     * This method checks that the analytics script has been loaded
     * and fires an event to Coremetrics
     *
     * @param {object} eventData Object with standard IBM metric event properties and values to send to Coremetrics
     *
     * @example
     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
     *
     * function fireEvent() {
     *    const eventData = {
     *        type: 'element',
     *        primaryCategory: 'MASTHEAD',
     *        eventName: 'CLICK',
     *        executionPath: 'masthead__profile',
     *        execPathReturnCode: 'none',
     *        targetTitle: 'profile'
     *    }
     *    AnalyticsAPI.registerEvent(eventData);
     * }
     *
     *
     */
    value: function registerEvent(eventData) {
      if (root.ibmStats) {
        root.ibmStats.event(eventData);
      }
    }
    /**
     * Initializes all analytics global tracking init functions
     */

  }, {
    key: "initAll",
    value: function initAll() {
      this.initScrollTracker();
      this.initDynamicTabs();
      this.initModals();
    }
    /**
     *
     * If scroll tracking is enabled, this method will fire an event for every 400px
     * user scrolls down the page. Only the deepest depth will fire the event (e.g if
     * user scrolls back up the page, the event will not be triggered)
     *
     * @example
     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
     *
     * function init() {
     *   AnalyticsAPI.initScrollTracker();
     * }
     **/

  }, {
    key: "initScrollTracker",
    value: function initScrollTracker() {
      if (_scrollTracker) {
        var trackingInterval = 400;
        var trackedMarker = 0;
        var curMarker = 0;
        var didScroll = false;
        var fireEvent = this.registerEvent;
        root.addEventListener('scroll', function () {
          didScroll = true;
        });
        setInterval(function () {
          if (didScroll) {
            didScroll = false;
            curMarker = Math.floor(root.pageYOffset / trackingInterval);

            if (curMarker > trackedMarker) {
              trackedMarker = curMarker;
              fireEvent({
                type: 'element',
                primaryCategory: 'SCROLL DISTANCE',
                eventName: trackingInterval * trackedMarker,
                executionPath: root.innerWidth,
                execPathReturnCode: root.innerHeight
              });
            }
          }
        }, 50);
      }
    }
    /**
     * This instantiates an event listener to trigger an event if the Carbon
     * Tabs component is being interacted with by the user
     *
     * @example
     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
     *
     * function init() {
     *   AnalyticsAPI.initDynamicTabs();
     * }
     */

  }, {
    key: "initDynamicTabs",
    value: function initDynamicTabs() {
      var tabSelected = this.triggerTabSelected.bind(this);
      root.document.addEventListener('tab-selected', function (evt) {
        tabSelected(evt.target.id, evt.detail.item.innerText);
      });
    }
    /**
     * Triggers to CLICK event for the dynamic tabs
     *
     * @param {string} executionPath Target ID
     * @param {string} targetTitle Target innerText
     */

  }, {
    key: "triggerTabSelected",
    value: function triggerTabSelected(executionPath, targetTitle) {
      try {
        this.registerEvent({
          type: 'element',
          primaryCategory: 'WIDGET',
          eventName: 'CLICK',
          eventCategoryGroup: 'TABS DYNAMIC',
          executionPath: executionPath,
          targetTitle: targetTitle
        });
      } catch (err) {
        if (_env !== 'production') {
          console.error('Error triggering tab event:', err);
        }
      }
    }
    /**
     * This instantiates an event listener to trigger an event if the Carbon
     * Modal component is being interacted with by the user
     *
     * @example
     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
     *
     * function init() {
     *   AnalyticsAPI.initModals();
     * }
     */

  }, {
    key: "initModals",
    value: function initModals() {
      var modalHide = this.triggerModalHide.bind(this);
      root.document.addEventListener('modal-hidden', function (evt) {
        modalHide(evt.target.id, evt.detail.launchingElement.innerText);
      });
      var modalShow = this.triggerModalShow.bind(this);
      root.document.addEventListener('modal-shown', function (evt) {
        modalShow(evt.target.id, evt.detail.launchingElement.innerText);
      });
    }
    /**
     * Triggers the HIDE event for the modal
     *
     * @param {string} executionPath Target ID
     * @param {string} targetTitle Target innerText
     */

  }, {
    key: "triggerModalHide",
    value: function triggerModalHide(executionPath, targetTitle) {
      try {
        this.registerEvent({
          type: 'element',
          primaryCategory: 'WIDGET',
          eventName: 'HIDE',
          eventCategoryGroup: 'SHOWHIDE',
          executionPath: executionPath,
          targetTitle: targetTitle
        });
      } catch (err) {
        if (_env !== 'production') {
          console.error('Error triggering modal hide event:', err);
        }
      }
    }
    /**
     * Triggers the SHOW event for the modal
     *
     * @param {string} executionPath Target ID
     * @param {string} targetTitle Target innerText
     */

  }, {
    key: "triggerModalShow",
    value: function triggerModalShow(executionPath, targetTitle) {
      try {
        this.registerEvent({
          type: 'element',
          primaryCategory: 'WIDGET',
          eventName: 'SHOW',
          eventCategoryGroup: 'SHOWHIDE',
          executionPath: executionPath,
          targetTitle: targetTitle
        });
      } catch (err) {
        if (_env !== 'production') {
          console.error('Error triggering modal show event:', err);
        }
      }
    }
    /**
     * Sends video player metrics data
     *
     * @param {object} data event data from the video player
     *
     * @example
     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';
     *
     *function init() {
     *    const data = {
     *       playerType: 'kaltura',
     *       title: 'Folgers Coffee',
     *       currentTime: 1,
     *       duration: 60,
     *       playerState: 1,
     *       videoId: '0_uka1msg4',
     *    };
     *
     *    AnalyticsAPI.videoPlayerStats(data);
     *}
     *
     */

  }, {
    key: "videoPlayerStats",
    value: function videoPlayerStats(data) {
      var playerState = '',
          currentTime = Math.floor(data.currentTime),
          duration = Math.floor(data.duration),
          percentWatched = Math.floor(currentTime / duration * 100); // Set nicenames for player states for event.

      switch (data.playerState) {
        case 0:
          playerState = 'launched';
          break;

        case 1:
          playerState = 'paused';
          break;

        case 2:
          playerState = 'played';
          break;

        case 3:
          playerState = 'ended';
          break;

        case 99:
          playerState = 'error';
          break;

        default:
      }

      if (currentTime === 0) {
        currentTime = 'start';
        percentWatched = '0';
      }

      if (currentTime >= duration || data.playerState === 3) {
        currentTime = 'end';
        percentWatched = '100';
      } // If went to the end of the video, and fired "pause" event, don't fire pause event b/c it's really
      // the end of the video, so just let "end" event fire and tag metrics.


      if (currentTime === 'end' && data.playerState === 1) {
        return;
      }

      var eventData = {
        type: 'video',
        primaryCategory: 'VIDEO',
        eventName: data.title,
        eventCategoryGroup: data.playerType,
        executionPath: data.videoId,
        execPathReturnCode: playerState,
        eventVidStatus: data.playerState,
        eventVidTimeStamp: currentTime,
        eventVidLength: duration,
        eventVidPlayed: percentWatched + '%'
      };

      try {
        this.registerEvent(eventData);
      } catch (err) {
        if (_env !== 'production') {
          console.error('Error firing video metrics:', err);
        }
      }
    }
  }]);

  return AnalyticsAPI;
}();

export default AnalyticsAPI;