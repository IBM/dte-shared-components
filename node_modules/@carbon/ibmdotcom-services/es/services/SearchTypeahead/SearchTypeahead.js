import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import axios from 'axios';
import { LocaleAPI } from '../Locale';
/**
 * @constant {string | string} Host for the API calls
 * @private
 */

var _host = process && process.env.SEARCH_TYPEAHEAD_HOST || 'https://www-api.ibm.com';
/**
 * @constant {string | string} API version
 * @private
 */


var _version = process && process.env.SEARCH_TYPEAHEAD_VERSION || 'v1';
/**
 * SearchTypeahead endpoint
 *
 * @type {string}
 * @private
 */


var _endpoint = "".concat(_host, "/search/typeahead/").concat(_version);
/**
 * SearchTypeahead API class with methods of fetching search results for
 * ibm.com
 */


var SearchTypeaheadAPI = /*#__PURE__*/function () {
  function SearchTypeaheadAPI() {
    _classCallCheck(this, SearchTypeaheadAPI);
  }

  _createClass(SearchTypeaheadAPI, null, [{
    key: "getResults",

    /**
     * Gets search results
     *
     * @param {string} query Query string to pass to the service
     * @returns {Promise<any>} Response data from ibm search
     * @example
     * import { SearchTypeaheadAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getResults(query) {
     *   const response = await SearchTypeaheadAPI.getResults(query);
     *   return response;
     * }
     */
    value: function () {
      var _getResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {
        var lang, urlQuery, url;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return LocaleAPI.getLang();

              case 2:
                lang = _context.sent;
                urlQuery = ["lang=".concat(lang.lc), "cc=".concat(lang.cc), "query=".concat(encodeURIComponent(query))].join('&');
                url = "".concat(_endpoint, "?").concat(urlQuery);
                _context.next = 7;
                return axios.get(url, {
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  }
                }).then(function (response) {
                  return response.data.response;
                });

              case 7:
                return _context.abrupt("return", _context.sent);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getResults(_x) {
        return _getResults.apply(this, arguments);
      }

      return getResults;
    }()
  }]);

  return SearchTypeaheadAPI;
}();

export default SearchTypeaheadAPI;