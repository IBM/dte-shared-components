import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import axios from 'axios';
/**
 * @constant {string | string} Host for the API calls
 * @private
 */

var _host = process && process.env.MARKETING_SEARCH_HOST || 'https://www.ibm.com';
/**
 * @constant {string | string} API version
 * @private
 */


var _version = process && process.env.MARKETING_SEARCH_VERSION || 'v3';
/**
 * MarketingSearch endpoint
 *
 * @type {string}
 * @private
 */


var _endpoint = "".concat(_host, "/marketplace/api/search/").concat(_version, "/combined_suggestions");
/**
 * MarketingSearch API class with methods of fetching search results for
 * ibm.com
 */


var MarketingSearchAPI = /*#__PURE__*/function () {
  function MarketingSearchAPI() {
    _classCallCheck(this, MarketingSearchAPI);
  }

  _createClass(MarketingSearchAPI, null, [{
    key: "getResults",

    /**
     * Gets search results for marketing
     *
     * @param {string} query Query string to pass to the service
     * @returns {Promise<any>} Response data from ibm search
     * @example
     * import { MarketingSearchAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getResults(query) {
     *   const response = await MarketingSearchAPI.getResults(query);
     *   return response;
     * }
     */
    value: function () {
      var _getResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {
        var lc, cc, url;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                lc = 'en'; // TODO: create utility for fetching lc

                cc = 'us'; // TODO: create utility for fetching cc

                url = "".concat(_endpoint, "?locale=").concat(lc, "-").concat(cc, "&q=").concat(encodeURIComponent(query));
                _context.next = 5;
                return axios.get(url, {
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  }
                }).then(function (response) {
                  return response.data;
                });

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getResults(_x) {
        return _getResults.apply(this, arguments);
      }

      return getResults;
    }()
  }]);

  return MarketingSearchAPI;
}();

export default MarketingSearchAPI;