import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import jsonp from 'jsonp';
/**
 * @constant {string | string} Host for the profile status API call
 * @private
 */

var _host = process && process.env.PROFILE_HOST || 'https://idaas.iam.ibm.com';
/**
 * @constant {string | string} API version
 * @private
 */


var _version = process && process.env.PROFILE_VERSION || 'v1';
/**
 * Profile status endpoint
 *
 * @type {string}
 * @private
 */


var _endpoint = "".concat(_host, "/").concat(_version, "/mgmt/idaas/user/status/");
/**
 * Profile API class with methods for checking user authentication for ibm.com
 */


var ProfileAPI = /*#__PURE__*/function () {
  function ProfileAPI() {
    _classCallCheck(this, ProfileAPI);
  }

  _createClass(ProfileAPI, null, [{
    key: "getUserStatus",

    /**
     * Returns user status (authenticated or unauthenticated)
     *
     * @returns {Promise<any>} User status
     * @example
     * import { ProfileAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getUserStatus() {
     *   const response = await ProfileAPI.getUserStatus();
     *   return response;
     * }
     */
    value: function getUserStatus() {
      var url = _endpoint;
      return new Promise(function (resolve, reject) {
        return jsonp(url, null, function (err, data) {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    /**
     * Monitors user status (authenticated or unauthenticated)
     *
     * @example
     * import { ProfileAPI } from '@carbon/ibmdotcom-services';
     *
     * function monitorUserStatus() {
     *   ProfileAPI.monitorUserStatus((err, status) => {
     *     console.log('The new login status:', status.user);
     *   });
     * }
     */

  }, {
    key: "monitorUserStatus",
    value: function monitorUserStatus(callback) {
      return jsonp(_endpoint, null, callback);
    }
  }]);

  return ProfileAPI;
}();

export default ProfileAPI;