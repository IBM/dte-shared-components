"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _react = require("@storybook/react");

var _addonKnobs = require("@storybook/addon-knobs");

var _storybookReadme = require("storybook-readme");

var _README = _interopRequireDefault(require("./README.md"));

var _DataTable = _interopRequireWildcard(require("../DataTable"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var readmeURL = 'https://bit.ly/2Z9PGsC';

var props = function props() {
  return {
    useZebraStyles: (0, _addonKnobs.boolean)('Zebra row styles (useZebraStyles)', false),
    size: (0, _addonKnobs.select)('Row height (size)', {
      compact: 'compact',
      short: 'short',
      tall: 'tall',
      none: null
    }, null),
    stickyHeader: (0, _addonKnobs.boolean)('Sticky header (experimental)', false)
  };
};

(0, _react.storiesOf)('DataTable', module).addParameters({
  component: _DataTable.default,
  subcomponents: {
    Table: _DataTable.Table,
    TableActionList: _DataTable.TableActionList,
    TableBatchAction: _DataTable.TableBatchAction,
    TableBatchActions: _DataTable.TableBatchActions,
    TableBody: _DataTable.TableBody,
    TableCell: _DataTable.TableCell,
    TableContainer: _DataTable.TableContainer,
    TableExpandHeader: _DataTable.TableExpandHeader,
    TableExpandRow: _DataTable.TableExpandRow,
    TableExpandedRow: _DataTable.TableExpandedRow,
    TableHead: _DataTable.TableHead,
    TableHeader: _DataTable.TableHeader,
    TableRow: _DataTable.TableRow,
    TableSelectAll: _DataTable.TableSelectAll,
    TableSelectRow: _DataTable.TableSelectRow,
    TableToolbar: _DataTable.TableToolbar,
    TableToolbarAction: _DataTable.TableToolbarAction,
    TableToolbarContent: _DataTable.TableToolbarContent,
    TableToolbarSearch: _DataTable.TableToolbarSearch,
    TableToolbarMenu: _DataTable.TableToolbarMenu
  }
}).addDecorator(_addonKnobs.withKnobs).add('default', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/default').default(props());
}), {
  info: {
    /* eslint-disable no-useless-escape */
    text: "\n          Data Tables are used to represent a collection of resources, displaying a\n          subset of their fields in columns, or headers. The `DataTable` component\n          that we export from Carbon requires two props to be passed in: `rows`\n          and `headers`.\n          You can find more detailed information surrounding usage of this component\n          at the following url: ".concat(readmeURL, "\n        ")
    /* eslint-enable no-useless-escape */

  }
}).add('with toolbar', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-toolbar').default(props());
}), {
  info: {
    text: "\n        DataTable with action menu and filtering.\n\n        You can find more detailed information surrounding usage of this component\n        at the following url: ".concat(readmeURL, "\n      ")
  }
}).add('with sorting', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-sorting').default(props());
}), {
  info: {
    text: "\n        DataTable with sorting\n\n        You can find more detailed information surrounding usage of this component\n        at the following url: ".concat(readmeURL, "\n      ")
  }
}).add('with selection', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-selection').default(props());
}), {
  info: {
    text: "\n        DataTable with selection\n\n        You can find more detailed information surrounding usage of this component\n        at the following url: ".concat(readmeURL, "\n      ")
  }
}).add('with radio button selection', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-selection--radio').default(props());
}), {
  info: {
    text: "\n        DataTable with radio button selection\n\n        You can find more detailed information surrounding usage of this component\n        at the following url: ".concat(readmeURL, "\n      ")
  }
}).add('with expansion', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-expansion').default(props());
}), {
  info: {
    text: "\n          DataTable with expansion\n\n          You can find more detailed information surrounding usage of this component\n          at the following url: ".concat(readmeURL, "\n        ")
  }
}).add('with batch expansion', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-batch-expansion').default(props());
}), {
  info: {
    text: "\n          DataTable with batch expansion\n\n          You can find more detailed information surrounding usage of this component\n          at the following url: ".concat(readmeURL, "\n        ")
  }
}).add('with batch actions', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-batch-actions').default(props());
}), {
  info: {
    text: "\n          Uses <TableToolbar> alongside <TableBatchActions> and <TableBatchAction>\n          to create the toolbar and placeholder for where the batch action menu will\n          be displayed.\n\n          You can use the `getBatchActionProps` prop getter on the\n          <TableBatchActions> component to have it wire up the ghost menu for you.\n\n          Individual <TableBatchAction> components take in any kind of event handler\n          prop that you would expect to use, like `onClick`. You can use these\n          alongside the `selectedRows` property in your `render` prop function\n          to pass along this info to your batch action handler.\n\n          You can find more detailed information surrounding usage of this component\n          at the following url: ".concat(readmeURL, "\n        ")
  }
}).add('with dynamic content', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-dynamic-content').default(props());
}), {
  info: {
    text: "\n        Showcases DataTable behavior when rows are added to the component,\n        and when cell data changes dynamically.\n      "
  }
}).add('with boolean column', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-boolean-column').default(props());
}), {
  info: {
    text: "\n        DataTable with toolbar and filtering with column has boolean value.\n      "
  }
}).add('with options', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-options').default(props());
}), {
  info: {
    text: "\n        DataTable with options like disabled, isSelected, isExpanded etc.\n\n        You can find more detailed information surrounding usage of this component\n        at the following url: ".concat(readmeURL, "\n      ")
  }
}).add('with overflow menu', (0, _storybookReadme.withReadme)(_README.default, function () {
  return require('./stories/with-overflow-menu').default(_objectSpread(_objectSpread({}, props()), {}, {
    overflowMenuOnHover: (0, _addonKnobs.boolean)('Show overflow menu on hover (overflowMenuOnHover)', false)
  }));
}), {
  info: {
    text: "\n      DataTable with Overflow menus added.\n\n      You can find more detailed information surrounding usage of this component\n      at the following url: ".concat(readmeURL, "\n    ")
  }
});